<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Code Life</title>
    <link>https://www.boris1993.com/</link>
    
    <atom:link href="https://www.boris1993.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Boris has arrived!</description>
    <pubDate>Tue, 07 Feb 2023 08:52:50 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>SwiftUI 学习记录 - 切换 TabView 的 tab 时触发震动反馈</title>
      <link>https://www.boris1993.com/swiftui-trigger-haptic-feedback-when-changing-tabs.html</link>
      <guid>https://www.boris1993.com/swiftui-trigger-haptic-feedback-when-changing-tabs.html</guid>
      <pubDate>Sun, 05 Feb 2023 16:02:10 GMT</pubDate>
      
      <description>&lt;p&gt;最近在折腾 iOS 开发的时候，想实现在切换 &lt;code&gt;TabView&lt;/code&gt; 的 tab 时触发震动反馈，因为一边写一边学嘛，基础不牢，只能在网上瞎搜，试了各种方法都不奏效。直到前两天看到&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL0RpbWlsbGlhbi9JY2VDdWJlc0FwcC9ibG9iL21haW4vSWNlQ3ViZXNBcHAvQXBwL0ljZUN1YmVzQXBwLnN3aWZ0I0wxMzItTDE0NQ==&quot;&gt; Ice Cubes: for Mastodon 的这段代码&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，豁然开朗。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>最近在折腾 iOS 开发的时候，想实现在切换 <code>TabView</code> 的 tab 时触发震动反馈，因为一边写一边学嘛，基础不牢，只能在网上瞎搜，试了各种方法都不奏效。直到前两天看到<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RpbWlsbGlhbi9JY2VDdWJlc0FwcC9ibG9iL21haW4vSWNlQ3ViZXNBcHAvQXBwL0ljZUN1YmVzQXBwLnN3aWZ0I0wxMzItTDE0NQ=="> Ice Cubes: for Mastodon 的这段代码<i class="fa fa-external-link-alt"></i></span>，豁然开朗。</p><span id="more"></span><p>之前写的时候，只知道给 <code>selection</code> 传一个绑定的对象，但是看完 <code>IceCubes</code> 的代码，再一看 <code>selection</code> 参数的文档，恍然大悟，这个参数要的其实是一个 <code>SelectionValue</code> 的绑定对象，所以我其实可以在这个对象的 <code>set</code> 方法上面做文章。</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> {</span><br><span class="line">    <span class="meta">@State</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> selectedTab <span class="operator">=</span> <span class="type">Tab</span>.<span class="type">Timeline</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {</span><br><span class="line">        <span class="type">TabView</span>(selection: .<span class="keyword">init</span>(</span><br><span class="line">            get: {</span><br><span class="line">                selectedTab</span><br><span class="line">            },</span><br><span class="line">            set: { newTab <span class="keyword">in</span> </span><br><span class="line">                selectedTab <span class="operator">=</span> newTab</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 在TabView更新selection的时候触发震动反馈就行了</span></span><br><span class="line">                <span class="keyword">if</span> (globalState.isHapticFeedbackEnabled) {</span><br><span class="line">                    <span class="type">HapticsHelper</span>.playHapticFeedback()</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        )) {</span><br><span class="line">            <span class="comment">// Views</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>顺便提一嘴我之前走过的一个弯路，就是试图在 <code>TabView</code> 上用<code>.onTapGesture()</code> 方法，结果虽然能震了，但是 tab 不会切换，当时还花了好长时间找怎么调用原本的<code>.onTapGesture()</code> 来切 tab，当然最后一无所获，最后认输，把震动反馈这个功能忍痛砍了……</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/SwiftUI/">SwiftUI</category>
      
      <category domain="https://www.boris1993.com/tags/TabView/">TabView</category>
      
      <category domain="https://www.boris1993.com/tags/Haptic-Feedback/">Haptic Feedback</category>
      
      <category domain="https://www.boris1993.com/tags/%E9%9C%87%E5%8A%A8%E5%8F%8D%E9%A6%88/">震动反馈</category>
      
      
      <comments>https://www.boris1993.com/swiftui-trigger-haptic-feedback-when-changing-tabs.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>通过 Hexo 博客完成 NIP-05 验证</title>
      <link>https://www.boris1993.com/nostr-nip-05-with-hexo.html</link>
      <guid>https://www.boris1993.com/nostr-nip-05-with-hexo.html</guid>
      <pubDate>Sat, 04 Feb 2023 17:26:02 GMT</pubDate>
      
      <description>&lt;p&gt;简单几步，轻松用自己的博客站完成 &lt;code&gt;NIP-05&lt;/code&gt; 认证。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>简单几步，轻松用自己的博客站完成 <code>NIP-05</code> 认证。</p><span id="more"></span><h2 id="让Hexo在生成时包含-well-known目录"><a href="#让Hexo在生成时包含-well-known目录" class="headerlink" title="让Hexo在生成时包含.well-known目录"></a>让 Hexo 在生成时包含<code>.well-known</code> 目录</h2><p>编辑 <code>config.yml</code>，添加如下配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">include:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">".well-known/**"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="转换公钥格式"><a href="#转换公钥格式" class="headerlink" title="转换公钥格式"></a>转换公钥格式</h2><p>Damus 生成的 <code>npub</code> 开头的公钥不能直接用，要先转换成十六进制格式的公钥。可以用<span class="exturl" data-url="aHR0cHM6Ly9kYW11cy5pby9rZXkv">这个网站<i class="fa fa-external-link-alt"></i></span>来转换。</p><p>把 <code>npub</code> 开头的公钥粘贴进 <code>damus key</code> 一栏，<code>hex key</code> 会自动计算出来，复制 <code>hex key</code> 的内容备用。</p><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>在 <code>source</code> 目录下新建一个名为<code>.well-known</code> 的目录，然后在<code>.well-known</code> 目录中创建 <code>nostr.json</code>，填写如下信息：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"names"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"你的用户名"</span><span class="punctuation">:</span> <span class="string">"刚刚转换得到的hex key"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>在本地运行 <code>hexo clean &amp;&amp; hexo g</code>，生成成功后检查 <code>public</code> 目录中是否存在<code>.well-known/nostr.json</code> 文件，如存在则说明配置正确。</p><h2 id="配置Nostr"><a href="#配置Nostr" class="headerlink" title="配置Nostr"></a>配置 Nostr</h2><p>提交代码并部署成功后，即可在 <code>nostr</code> 客户端配置 <code>NIP-05</code> 认证，本文以 <code>Damus</code> 为例。</p><p>点击左上角头像，进入 <code>Profile</code>，点击 <code>Edit</code>，在 <code>NIP-05 VERIFICATION</code> 一栏中填写<code>你的username@你的博客网站</code>，比如我填写的是 <code>boris1993@www.boris1993.com</code>，最后点击 <code>Save</code>。</p><p>如果一切正常的话，在你的 Profile 页面就能看到一个对勾图标，代表验证成功。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/nostr/">nostr</category>
      
      <category domain="https://www.boris1993.com/tags/NIP-05/">NIP-05</category>
      
      <category domain="https://www.boris1993.com/tags/Damus/">Damus</category>
      
      
      <comments>https://www.boris1993.com/nostr-nip-05-with-hexo.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>设计并实现一个简易的短 URL 服务</title>
      <link>https://www.boris1993.com/designing-and-implementing-a-short-url-service.html</link>
      <guid>https://www.boris1993.com/designing-and-implementing-a-short-url-service.html</guid>
      <pubDate>Fri, 03 Feb 2023 09:57:07 GMT</pubDate>
      
      <description>&lt;p&gt;突然就对短链接服务的原理来了兴趣，于是就查了些资料，自己实现了一个很简陋的演示性的短链接服务。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>突然就对短链接服务的原理来了兴趣，于是就查了些资料，自己实现了一个很简陋的演示性的短链接服务。</p><span id="more"></span><h2 id="短链接服务是怎么工作的"><a href="#短链接服务是怎么工作的" class="headerlink" title="短链接服务是怎么工作的"></a>短链接服务是怎么工作的</h2><p>短链接服务这玩意，说来其实非常简单，就是给用户传来的 URL 起个别名，然后把别名与原链接的映射关系记录在数据库里。</p><p>用户访问短链接时，请求首先会到短链接服务的服务器；短链接服务端收到请求，取出对应的原 URL，最后通知用户端的浏览器做个跳转。</p><h2 id="301跳转？还是302跳转？"><a href="#301跳转？还是302跳转？" class="headerlink" title="301跳转？还是302跳转？"></a>301 跳转？还是 302 跳转？</h2><p>尽管按照语义来讲，301 跳转更合适，因为一个短 URL 必定只对应一个长 URL，但是看起来生产上更多使用 302 跳转，因为这样的话请求会经过短网址提供商的服务器，短网址提供商就可以收集到用户的一些信息，然后把这些信息变现。</p><h2 id="如何生成短链接"><a href="#如何生成短链接" class="headerlink" title="如何生成短链接"></a>如何生成短链接</h2><p>上面说到，短链接服务的核心就是要给长链接生成一个 “别名”，那么这个别名应该怎么生成呢？</p><p>我相信不少人一上来就会想到哈希算法，比如给原 URL 做个 MD5，虽然不是不行，就是哈希算法有碰撞这么个问题，虽然影响不大吧，但处理起来还是个麻烦。</p><p>上网一顿冲浪，我发现其实这个生成的算法非常简单，就是直接用发号器生成一个 ID，把这个 ID 跟原链接绑定就行。足够简单，而且不会碰撞。</p><p>不过既然都提到这两种算法了，不如顺便介绍一下。</p><h3 id="发号器方案"><a href="#发号器方案" class="headerlink" title="发号器方案"></a>发号器方案</h3><p>发号器方案本质上就是生成分布式 ID，如果要简单处理，那么可以使用 <code>Redis</code> 的 <code>incr</code> 操作，或者取数据库的自增序列；复杂情况的话，可以让数据库集群中每个节点各负责生成某一范围的数字，或者使用雪花算法等 UUID 生成算法。</p><p>在得到发号器生成的数字之后，再将其转换为 62 进制数，就可以当成短 URL 的 ID 了。这么做的原因，一方面是可以一定程度上防止直接暴露序列的值产生的安全问题；另一方面，因为为了保证序列够用，发号器返回的数字会比较大，将低进制数转换为高进制数可以显著减少字符数量。</p><h3 id="哈希算法方案"><a href="#哈希算法方案" class="headerlink" title="哈希算法方案"></a>哈希算法方案</h3><blockquote><ol><li>将长网址 md5 生成 32 位签名串，分为 4 段，每段 8 个字节</li><li>对这四段循环处理，取 8 个字节，将他看成 16 进制串与 0x3fffffff (30 位 1) 与操作，即超过 30 位的忽略处理</li><li>这 30 位分成 6 段，每 5 位的数字作为字母表的索引取得特定字符，依次进行获得 6 位字符串</li><li>总的 md5 串可以获得 4 个 6 位串，取里面的任意一个就可作为这个长 url 的短 url 地址</li></ol><p>摘自 <span class="exturl" data-url="aHR0cHM6Ly9odWZhbmd5dW4uY29tLzIwMTcvc2hvcnQtdXJsLw==">短网址 (short URL) 系统的原理及其实现<i class="fa fa-external-link-alt"></i></span></p></blockquote><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>解决了理论问题，接下来就要面对现实问题：用什么实现，和跑在哪里。</p><p>因为这只是一个演示性的短链接服务，目前定位是就我一个人玩，所以我一方面不想花时间在部署和维护上，另一方面也想趁机玩点没玩过的东西。所以我决定把这玩意放在 <code>CloudFlare Workers</code> 上面，用 <code>TypeScript</code> 语言开发，数据存放在 <code>CloudFlare Workers KV</code> 数据库里。这样，我就只需要关心代码怎么写，其他的包括维护数据库、估算服务器压力这些事都不用担心。</p><p>数据库中我需要用两个表，一个表用来存放当前的序列值，和<code>短URL -&gt; 原URL</code> 的映射，这个表是服务的核心；另一个表用来存放<code>长URL -&gt; 短URL</code> 的映射，这么设计的原因是，针对相同的长 URL，我不需要在生成新的短 URL，既节省空间，也能稍微节省点能源不是。</p><p>而生成短链接的算法，我当然选择最简单的数据库序列。但因为 <code>CloudFlare Workers KV</code> 并不支持真正的序列，所以我在数据库里面用一个专门的 key 当作序列来用。这个选型有一个风险就是，在高并发状态下我无法保证序列的值不会重复，因为<code>取出序列 -- 生成ID -- 保存新的序列</code>这个操作不是原子性的，高并发状态下可能会有多个请求同时取到相同的序列，进而生成相同的 ID，最后就会产生错误的结果。不过，还是那句话，就我一个人用的玩意，暂时先不考虑那么多。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>这个服务的流程分两大部分，生成新的短 URL，和查询短 URL 并完成跳转。查询操作没什么梗，查到了就返回，查不到就 404 呗。</p><p>生成新的短 URL 的话，大致就是这么个流程：</p><pre><code class="highlight mermaid">graph TD;    start[开始];    finish[结束];    request_received[收到生成的请求];    check_existing_record{检查是否已经生成过};    return_existing_record[返回已有的短URL];    fetch_current_sequence[查询当前的序列];    calculate_base62[计算序列的62进制数值];    increase_sequence_number[序列增1];    save_to_database[将短URL和新的序列存入数据库];    return_new_generated_short_url[返回生成的短URL];        start --&gt; request_received;    request_received --&gt; check_existing_record;    check_existing_record --&gt;|Y| return_existing_record;    return_existing_record --&gt; finish;    check_existing_record --&gt;|N| fetch_current_sequence;    fetch_current_sequence --&gt; calculate_base62;    calculate_base62 --&gt; increase_sequence_number;    increase_sequence_number --&gt; save_to_database;    save_to_database --&gt; return_new_generated_short_url;    return_new_generated_short_url --&gt; finish;</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>这里就只放具体实现相关的代码了，完整的代码库可以到参考文档第一条的 GitHub 仓库看到。</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> url <span class="keyword">from</span> <span class="string">'url'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">RequestBody</span>, <span class="title class_">ResponseBody</span>, <span class="title class_">ShortUrl</span> } <span class="keyword">from</span> <span class="string">'./model'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起始的序列值</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INITIAL_SEQUENCE_NUMBER</span> = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Env</span> {</span><br><span class="line">    [<span class="attr">x</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetch</span>(</span><br><span class="line">        <span class="attr">request</span>: <span class="title class_">Request</span>,</span><br><span class="line">        <span class="attr">env</span>: <span class="title class_">Env</span>,</span><br><span class="line">        <span class="attr">ctx</span>: <span class="title class_">ExecutionContext</span></span><br><span class="line">    ): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; {</span><br><span class="line">        <span class="keyword">switch</span> (request.<span class="property">method</span>) {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">handlePostRequest</span>(request, env);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'GET'</span>:</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">handleGetRequest</span>(request, env);</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleGetRequest</span>(<span class="params"></span></span><br><span class="line"><span class="params">    request: Request,</span></span><br><span class="line"><span class="params">    env: Env</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; {</span><br><span class="line">    <span class="comment">// 取URL中的path部分</span></span><br><span class="line">    <span class="keyword">let</span> url_parts = url.<span class="title function_">parse</span>(request.<span class="property">url</span>);</span><br><span class="line">    <span class="keyword">let</span> path = url_parts.<span class="property">pathname</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有path部分，或者path有多层</span></span><br><span class="line">    <span class="comment">// 那么视为无效请求</span></span><br><span class="line">    <span class="comment">// 合法的短URL格式为：https://mydomain.com/RlB2PdD</span></span><br><span class="line">    <span class="keyword">if</span> (path == <span class="literal">null</span> || path.<span class="title function_">split</span>(<span class="regexp">/\/(?=.)/</span>).<span class="property">length</span> !== <span class="number">2</span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">"No short URL key provided or invalid path. Returning 400"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">"No short URL key provided or the path is invalid."</span>, {</span><br><span class="line">            <span class="attr">status</span>: <span class="number">400</span></span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> pathParts = path?.<span class="title function_">split</span>(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 专门处理下favicon.ico的请求</span></span><br><span class="line">    <span class="comment">// 可能是我的实现有问题，不一定必须</span></span><br><span class="line">    <span class="keyword">if</span> (pathParts[<span class="number">1</span>] === <span class="string">"favicon.ico"</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出path，即短URL的key</span></span><br><span class="line">    <span class="keyword">let</span> key = pathParts[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Looking for the target URL with key <span class="subst">${key}</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对env.SHORT_URL操作，就是对SHORT_URL这个KV数据库做操作</span></span><br><span class="line">    <span class="comment">// 这里就是从数据库中查询这个key对应的长URL</span></span><br><span class="line">    <span class="keyword">let</span> shortUrlJson = <span class="keyword">await</span> env.<span class="property">SHORT_URL</span>.<span class="title function_">get</span>(key);</span><br><span class="line">    <span class="keyword">if</span> (shortUrlJson === <span class="literal">null</span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`No target URL found for key <span class="subst">${key}</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">"No target URL found"</span>, {</span><br><span class="line">            <span class="attr">status</span>: <span class="number">404</span></span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造返回的JSON，然后返回一个HTTP 302让浏览器跳转</span></span><br><span class="line">    <span class="keyword">let</span> shortUrlObject = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(shortUrlJson) <span class="keyword">as</span> <span class="title class_">ShortUrl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Target URL for key <span class="subst">${key}</span> is <span class="subst">${shortUrlObject.url}</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Response</span>.<span class="title function_">redirect</span>(shortUrlObject.<span class="property">url</span>, <span class="number">302</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handlePostRequest</span>(<span class="params"></span></span><br><span class="line"><span class="params">    request: Request,</span></span><br><span class="line"><span class="params">    env: Env</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; {</span><br><span class="line">    <span class="keyword">let</span> requestBody = <span class="keyword">await</span> request.<span class="title function_">json</span>() <span class="keyword">as</span> <span class="title class_">RequestBody</span>;</span><br><span class="line">    <span class="keyword">let</span> targetUrl = requestBody.<span class="property">url</span>!;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Creating a short URL for target <span class="subst">${targetUrl}</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询这个长URL是否已经有对应的短URL</span></span><br><span class="line">    <span class="comment">// SHORT_URL_MAPPING表记录的是长URL对应的短URL</span></span><br><span class="line">    <span class="keyword">let</span> existingShortUrl = <span class="keyword">await</span> env.<span class="property">SHORT_URL_MAPPING</span>.<span class="title function_">get</span>(targetUrl) <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">if</span> (existingShortUrl !== <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// 查到了，就直接返回</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Existing short URL key <span class="subst">${existingShortUrl}</span> found for <span class="subst">${targetUrl}</span>`</span>);</span><br><span class="line">        <span class="keyword">let</span> responseBody = <span class="keyword">new</span> <span class="title class_">ResponseBody</span>(existingShortUrl);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">            <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(responseBody),</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">status</span>: <span class="number">201</span>,</span><br><span class="line">                <span class="attr">headers</span>: {</span><br><span class="line">                    <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出当前的序列值，将其转换为62进制，作为短URL的key</span></span><br><span class="line">    <span class="keyword">let</span> curentSequence = <span class="keyword">await</span> <span class="title function_">getCurrentSequence</span>(env);</span><br><span class="line">    <span class="keyword">let</span> key = <span class="title function_">string10to62</span>(curentSequence);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">new</span> <span class="title class_">ShortUrl</span>(targetUrl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存短URL，更新序列</span></span><br><span class="line">    <span class="keyword">await</span> env.<span class="property">SHORT_URL</span>.<span class="title function_">put</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">    <span class="keyword">await</span> env.<span class="property">SHORT_URL_MAPPING</span>.<span class="title function_">put</span>(targetUrl, key);</span><br><span class="line">    <span class="keyword">await</span> env.<span class="property">SHORT_URL</span>.<span class="title function_">put</span>(<span class="string">"sequence"</span>, <span class="string">`<span class="subst">${++curentSequence}</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Created a new short URL key <span class="subst">${key}</span> for <span class="subst">${targetUrl}</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回生成的结果</span></span><br><span class="line">    <span class="keyword">let</span> responseBody = <span class="keyword">new</span> <span class="title class_">ResponseBody</span>(key);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">        <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(responseBody),</span><br><span class="line">        {</span><br><span class="line">            <span class="attr">status</span>: <span class="number">201</span>,</span><br><span class="line">            <span class="attr">headers</span>: {</span><br><span class="line">                <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取出当前的序列值，如果数据库中未初始化，</span></span><br><span class="line"><span class="comment"> * 那么就将初始序列写入数据库，然后返回初始序列。</span></span><br><span class="line"><span class="comment"> * 这个方法不涉及序列的更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getCurrentSequence</span>(<span class="params">env: Env</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; {</span><br><span class="line">    <span class="keyword">let</span> currentSequence = <span class="keyword">await</span> env.<span class="property">SHORT_URL</span>.<span class="title function_">get</span>(<span class="string">"sequence"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentSequence === <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">await</span> env.<span class="property">SHORT_URL</span>.<span class="title function_">put</span>(<span class="string">"sequence"</span>, <span class="string">`<span class="subst">${INITIAL_SEQUENCE_NUMBER}</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable constant_">INITIAL_SEQUENCE_NUMBER</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentSequence;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将10进制数转换为62进制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">string10to62</span>(<span class="params"><span class="built_in">number</span>: <span class="built_in">number</span></span>) {</span><br><span class="line">    <span class="keyword">var</span> chars = <span class="string">'0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ'</span>.<span class="title function_">split</span>(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> radix = chars.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> qutient = +<span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">do</span> {</span><br><span class="line">        <span class="keyword">let</span> mod = qutient % radix;</span><br><span class="line">        qutient = (qutient - mod) / radix;</span><br><span class="line">        arr.<span class="title function_">unshift</span>(chars[mod]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (qutient);</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">''</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="一些改进空间"><a href="#一些改进空间" class="headerlink" title="一些改进空间"></a>一些改进空间</h2><p>因为针对相同的长 URL 并不需要每次都返回相同的短 URL，所以<code>长URL -&gt; 短URL</code> 表中，我可以给每条记录都加一个 TTL，在有效期内，每次针对相同的长 URL 的生成请求都会返回同一个短 URL，同时刷新 TTL；而超过有效期后，这条映射就会被删除，对应的长 URL 则会生成新的短 URL。这样一定程度上既可以防止恶意刷接口炸数据库，同时也可以清除掉不太可能再被用到的数据。</p><p>而在如上改动的影响下，必然会出现多个短 URL 对应同一个长 URL 的情况，这多少也是浪费了一些空间。所以我感觉可以在<code>短URL -&gt; 长URL</code> 映射表中，增加一个最后访问时间字段，每有一个短 URL 的请求，就更新这个时间到请求的时间。再启动一个定时任务，定时扫描每个短链接的最后访问时间，并将在指定时间（如半年）内没有被访问过的短链接删除。（我觉得，应该没有人把短链接当成永久链接吧？就算不考虑被删，万一服务商跑路了呢？</p><p>此外，还可以给<code>短URL -&gt; 长URL</code> 映射表中再增加一个访问次数字段，以便结合其他收集到的数据来做分析。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9jZi13b3JrZXItc2hvcnQtdXJs">cf-worker-short-url - GitHub<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGlubGluaXNtaW5lL3AvOTUyMzA5NS5odG1s">短网址服务 (TinyURL) 生成算法<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI5MjcwMDM0L2Fuc3dlci80NjQ0NjkxMQ==">短 URL 系统是怎么设计的？ - iammutex 的回答 - 知乎<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9odWZhbmd5dW4uY29tLzIwMTcvc2hvcnQtdXJsLw==">短网址 (short URL) 系统的原理及其实现<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/%E7%9F%AD%E9%93%BE%E6%8E%A5/">短链接</category>
      
      
      <comments>https://www.boris1993.com/designing-and-implementing-a-short-url-service.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关闭 Vercel 的部署结果通知</title>
      <link>https://www.boris1993.com/disable-vercel-deployment-notification.html</link>
      <guid>https://www.boris1993.com/disable-vercel-deployment-notification.html</guid>
      <pubDate>Thu, 02 Feb 2023 15:57:51 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;每次 Vercel 部署之后，它都会在部署的 commit 下面发个类似这样的留言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Successfully deployed to the following URLs:&lt;/p&gt;
&lt;h2 id=&quot;blog-–-x2F&quot;&gt;&lt;a hr</description>
        
      
      
      
      <content:encoded><![CDATA[<p>每次 Vercel 部署之后，它都会在部署的 commit 下面发个类似这样的留言：</p><blockquote><p>Successfully deployed to the following URLs:</p><h2 id="blog-–-x2F"><a href="#blog-–-x2F" class="headerlink" title="blog – ./"></a>blog – ./</h2><hr><p>blog-boris1993.vercel.app</p><p>boris1993.com</p><p><a href="http://www.boris1993.com/">www.boris1993.com</a></p></blockquote><p>而且 GitHub 还会给我发邮件通知这个留言的内容，但是这个消息说实话没啥用，白白麻烦人而已，后来发现，在项目根目录创建一个名为 <code>vercel.json</code> 的文件，里面写上这样的配置就行：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"github"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"silent"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>这个配置的作用就是让 Vercel 不再往这个 repo 的 commit 下面评论部署状态。提交之后，Vercel 就会在这次部署开始遵循 <code>vercel.json</code> 的设定，不会再发送评论，自然也就不会有那封 “骚扰邮件” 了。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/tips/">小技巧</category>
      
      
      <category domain="https://www.boris1993.com/tags/Vercel/">Vercel</category>
      
      
      <comments>https://www.boris1993.com/disable-vercel-deployment-notification.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Concourse 实战 - 监控 GitHub release 并自动构建镜像</title>
      <link>https://www.boris1993.com/concourse-practise-build-and-push-docker-image.html</link>
      <guid>https://www.boris1993.com/concourse-practise-build-and-push-docker-image.html</guid>
      <pubDate>Sun, 29 Jan 2023 07:12:56 GMT</pubDate>
      
      <description>&lt;p&gt;距离上一篇 Concourse 相关的文章发布，已过去两年有余，期间因为没什么使用场景，不知道该怎么继续写下去，于是就断了。这次，我终于有机会将 Concourse 用到我自己的 home lab，并成功完成了一条 pipeline。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>距离上一篇 Concourse 相关的文章发布，已过去两年有余，期间因为没什么使用场景，不知道该怎么继续写下去，于是就断了。这次，我终于有机会将 Concourse 用到我自己的 home lab，并成功完成了一条 pipeline。</p><span id="more"></span><h2 id="背景及需求"><a href="#背景及需求" class="headerlink" title="背景及需求"></a>背景及需求</h2><p>偶然在网上看到了一个可以多端直播推流的工具，叫<span class="exturl" data-url="aHR0cHM6Ly9hbnRtZWRpYS5pby8="> Ant Media Server<i class="fa fa-external-link-alt"></i></span>，但是它的安装程序并不支持我正在用的 <code>Ubuntu 22.04 LTS</code>，同时它也没有提供制作好的 Docker 镜像，只能自己手动构建。可手动构建也太不优雅，根本不能忍，所以萌生了一个需求：监控 <code>Ant Media Server</code> 的 GitHub releases，如果有新的版本发布，那么就自动构建新的 Docker 镜像，并推送到我的 Docker Hub 中。</p><h2 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h2><p>首先，我要实现在 Concourse 里面监控 GitHub release。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvbmNvdXJzZS9naXRodWItcmVsZWFzZS1yZXNvdXJjZS8=">github-release<i class="fa fa-external-link-alt"></i></span>这个 resource type 就是干这件事的，所以我们可以在 pipeline 中定义这样一个 resource：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">github-release</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">ant-media</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">Ant-Media-Server</span></span><br><span class="line">    <span class="comment"># 默认监视的是"release-"开头的tag</span></span><br><span class="line">    <span class="comment"># 但Ant Media Server的tag都是以"ams-"开头的</span></span><br><span class="line">    <span class="comment"># 所以需要指定一下</span></span><br><span class="line">    <span class="attr">tag_filter:</span> <span class="string">"ams-v?([^v].*)"</span></span><br></pre></td></tr></tbody></table></figure><p>资源光在 <code>resources</code> 里面定义好还不够，我们需要在 pipeline 里面用 <code>get</code> 这个 task 来让 Concourse 做出从这个资源获取数据的操作。所以，开始写 pipeline 咯。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span> <span class="comment"># pipeline的名字</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span> <span class="comment"># 公开就意味着用户不需登录也能在dashboard中看到</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">get:</span> <span class="string">ant-media-server</span> <span class="comment"># 这里要写上面定义的resource的名字</span></span><br><span class="line">      <span class="attr">trigger:</span> <span class="literal">true</span> <span class="comment"># 这个资源将作为一个触发器</span></span><br></pre></td></tr></tbody></table></figure><p>这样就实现了让 Concourse 监控这个 GitHub release，并在发布新 release 的时候触发 pipeline 运行。而这个 task 在运行的时候，会将 release 中的 artifact 下载到 <code>ant-media-server</code> 这个目录中，所以我们也不用担心下载文件的问题。同时它还会把 release 的版本号写在 <code>version</code> 这个文件中，后面我们可以利用这个文件来生成 Docker 镜像的 tag。</p><p>有了 Ant Media Server 的成品文件，按照<span class="exturl" data-url="aHR0cHM6Ly9yZXNvdXJjZXMuYW50bWVkaWEuaW8vZG9jcy9kb2NrZXItYW5kLWRvY2tlci1jb21wb3NlLWluc3RhbGxhdGlvbg==">官方文档<i class="fa fa-external-link-alt"></i></span>的说法，接下来只要做两件事：下载 Dockerfile，执行 <code>docker build</code> 命令就行。但是放在 pipeline 里面，就没这么简单了。</p><p>先做第一件事，下载 Dockerfile。感谢<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pncmlmZi9odHRwLXJlc291cmNl"> jgriff/http-resource<i class="fa fa-external-link-alt"></i></span>这个仓库，它可以实现在 Concourse 里面通过 HTTP 下载一个文件。那么接下来 pipeline 里面可以这么写：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为这不是Concourse官方提供的resource type</span></span><br><span class="line"><span class="comment"># 所以需要在这里定义一个名为http-resource的resource type</span></span><br><span class="line"><span class="comment"># 并声明由jgriff/http-resource这个Docker镜像来实现</span></span><br><span class="line"><span class="attr">resource_types:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-resource</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">    <span class="attr">source:</span></span><br><span class="line">      <span class="attr">repository:</span> <span class="string">jgriff/http-resource</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-dockerfile</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">http-resource</span> <span class="comment"># 上面定义好这个resource type之后，就可以在这里用了</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="comment"># 指定要下载的文件</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://raw.githubusercontent.com/ant-media/Scripts/master/docker/Dockerfile_Process</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span> <span class="comment"># pipeline的名字</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span> <span class="comment"># 公开就意味着用户不需登录也能在dashboard中看到</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">  <span class="comment"># 让这两个task并行执行，节省时间</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">in_parallel:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">get:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">trigger:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 下载ant-media-server-dockerfile这个resource指定的文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">get:</span> <span class="string">ant-media-server-dockerfile</span></span><br></pre></td></tr></tbody></table></figure><p>现在 Dockerfile 可以下载到了，但是它是被保存在 <code>ant-media-server-dockerfile/body</code> 这个文件里面的，我们需要把它移动到 <code>ant-media-server</code> 这个目录里，才能保证后面成功运行 <code>docker build</code>。所以接下来要用 <code>mv</code> 命令把文件移过去。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">  <span class="comment"># 前略</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">move-dockerfile</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># task运行在Linux环境</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># task将通过ubuntu这个Docker镜像运行</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">ubuntu</span></span><br><span class="line">      <span class="comment"># 将这两个资源传给镜像</span></span><br><span class="line">      <span class="attr">inputs:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-dockerfile</span></span><br><span class="line">      <span class="comment"># 因为修改了ant-media-server这个资源的内容</span></span><br><span class="line">      <span class="comment"># 所以要将其输出，这样后续的task才能取到修改后的内容</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">run:</span> </span><br><span class="line">        <span class="attr">path:</span> <span class="string">mv</span></span><br><span class="line">        <span class="attr">args:</span> [<span class="string">"ant-media-server-dockerfile/body"</span>, <span class="string">"ant-media-server/Dockerfile"</span>]</span><br></pre></td></tr></tbody></table></figure><p>有了 Dockerfile，接下来就可以开始着手构建了。不用想，对于构建 Docker 镜像这样常见的 task，Concourse 预先制作好了 <a href="https://github.com/concourse/oci-build-task/"><code>concourse/oci-build-task</code></a>这个镜像来给我们用。</p><p>但是首先我们需要创建一个包含着 build args 的文件，因为文档的 <code>docker build</code> 命令中提到了 <code>--build-arg AntMediaServer=&lt;Replace_With_Ant_Media_Server_Zip_File&gt;</code> 这个参数，而 Ant Media Server 的 zip 文件名又会随着 release 而变化，同时 <code>oci-build-task</code> 的参数 <code>BUILD_ARGS_*</code> 并不支持 shell 命令，也就是说我不能通过 <code>BUILD_ARGS_AntMediaServer=ant-media-server-community-$(cat version).zip</code> 这样的方法来生成，那么只能用 <code>oci-build-task</code> 的 <code>BUILD_ARGS_FILE</code> 参数，传进去一个生成好的 build args file。</p><p>所以我们需要在 pipeline 中增加这两步来完成镜像的构建操作。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">  <span class="comment"># 前略</span></span><br><span class="line">  <span class="comment"># 生成build args file</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">generate-build-args</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">ubuntu</span></span><br><span class="line">      <span class="attr">inputs:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">run:</span> </span><br><span class="line">        <span class="comment"># 这里我曾经试过 </span></span><br><span class="line">        <span class="comment"># path: echo</span></span><br><span class="line">        <span class="comment"># args: ["AntMediaServer=ant-media-server-community-$(cat ant-media-server/version).zip", "&gt;", "ant-media-server/build_args.txt"]</span></span><br><span class="line">        <span class="comment"># 但是没成功，因为Concourse会把args做字符串拼接处理，最后当成一整个字符串传给命令</span></span><br><span class="line">        <span class="comment"># 所以其实变成了 echo "AntMediaServer=ant-media-server-community-$(cat ant-media-server/version).zip &gt; ant-media-server/build_args.txt"</span></span><br><span class="line">        <span class="comment"># 很明显这只能把这串字符串打在屏幕上，并不能生成文件</span></span><br><span class="line">        <span class="comment"># 所以只能通过调用sh来执行命令，把命令当成参数传给sh</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">sh</span></span><br><span class="line">        <span class="attr">args:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">-exc</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">'echo "AntMediaServer=ant-media-server-community-$(cat ant-media-server/version).zip" &gt; ant-media-server/build_args.txt'</span></span><br><span class="line">  <span class="comment"># 开始构建镜像</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">build-image</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">registry-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">concourse/oci-build-task</span></span><br><span class="line">      <span class="comment"># 构建所需的文件都在ant-media-server这个资源中</span></span><br><span class="line">      <span class="comment"># 所以将它传给这个task</span></span><br><span class="line">      <span class="attr">inputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="comment"># 将task输出的资源命名为image，并将其输出</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">params:</span></span><br><span class="line">        <span class="attr">CONTEXT:</span> <span class="string">ant-media-server</span></span><br><span class="line">        <span class="attr">BUILD_ARGS_FILE:</span> <span class="string">ant-media-server/build_args.txt</span></span><br><span class="line">      <span class="comment"># 缓存构建结果，加速将来的新的构建</span></span><br><span class="line">      <span class="attr">caches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">run:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">build</span></span><br></pre></td></tr></tbody></table></figure><p><code>oci-build-task</code> 成功后，会把镜像保存到 <code>image/image.tar</code> 文件中。要将它上传到 Docker Hub，我们还需要定义一个 <code>registry-image</code> 类型的 resource，来指定要将镜像上传到哪里。</p><p>因为上传 Docker Hub 需要登陆，而把 token 写在 pipeline 里面是非常蠢的行为，所以我把登陆信息放到了 Vault 中。向 Vault 放登陆信息很简单，在 <code>/concourse</code> 这个 path 中新建两个 secret 就可以了：</p><ul><li><code>/shared/dockerhub_username</code>，key 是 <code>value</code>，value 填写 Docker Hub 的用户名</li><li><code>/shared/dockerhub_token</code>，key 是 <code>value</code>，value 填写 Docker Hub 的 access token</li></ul><p>之所以我把登陆信息放到 <code>/shared</code> 这个 path 下，是因为我在 Vault 中配置了这个 path 作为一个公共的 path，在构建的时候要根据实际情况来修改，比如改成 team 的名字，或者放在 <code>/{team}/{pipeline}/</code> 下面。具体请参考 Concourse 与 Vault 集成相关的文档，这里不再赘述。</p><p>放好登陆信息后，就可以添加这样一个 resource：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-docker</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">registry-image</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">"((dockerhub_username))/ant-media-server"</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">"((dockerhub_username))"</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">"((dockerhub_token))"</span></span><br></pre></td></tr></tbody></table></figure><p>然后在 pipeline 最后增加两个 task，一个是读取 <code>ant-media-server/version</code> 的值，将其写在名为 <code>tag</code> 的变量中，后面我们会用这个变量来指定镜像的 tag；另一个就是对 <code>ant-media-server-docker</code> 这个资源执行 <code>put</code> 的操作，将 <code>image/image.tar</code> 这个镜像上传到 Docker Hub。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">  <span class="comment"># 前略</span></span><br><span class="line">  <span class="comment"># load_var用来从文件读入数据，并将其放在一个变量中</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">load_var:</span> <span class="string">tag</span></span><br><span class="line">    <span class="comment"># 指定要读的文件</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">ant-media-server/version</span></span><br><span class="line">    <span class="comment"># 为避免自动识别给我识别错，干脆直接指定文件内容的格式</span></span><br><span class="line">    <span class="comment"># trim就是纯文本，读取之后会去掉头尾的空白</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">trim</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">put:</span> <span class="string">ant-media-server-docker</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">image/image.tar</span></span><br><span class="line">      <span class="comment"># 上传时，同时更新latest和相关semver的镜像</span></span><br><span class="line">      <span class="comment"># 比如上传2.5.3时，会同时更新2.5，2，latest这三个tag</span></span><br><span class="line">      <span class="attr">bump_aliases:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 这里注意要指明从local var source中寻找变量，也就是开头的.:</span></span><br><span class="line">      <span class="comment"># 否则会找不到这个变量</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">"((.:tag))"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="完整的pipeline"><a href="#完整的pipeline" class="headerlink" title="完整的pipeline"></a>完整的 pipeline</h2><p>至此这个 pipeline 就完成了，下面我附上已经部署过的版本，供参考。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">resource_types:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-resource</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">    <span class="attr">source:</span></span><br><span class="line">      <span class="attr">repository:</span> <span class="string">jgriff/http-resource</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">github-release</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">ant-media</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">Ant-Media-Server</span></span><br><span class="line">    <span class="attr">tag_filter:</span> <span class="string">"ams-v?([^v].*)"</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-dockerfile</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">http-resource</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://raw.githubusercontent.com/ant-media/Scripts/master/docker/Dockerfile_Process</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-docker</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">registry-image</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">"((dockerhub_username))/ant-media-server"</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">"((dockerhub_username))"</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">"((dockerhub_token))"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">build_log_retention:</span></span><br><span class="line">    <span class="comment"># 只保留最近5次的构建记录，以节省空间</span></span><br><span class="line">    <span class="attr">builds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">in_parallel:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">get:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">trigger:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">get:</span> <span class="string">ant-media-server-dockerfile</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">load_var:</span> <span class="string">tag</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">ant-media-server/version</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">trim</span></span><br><span class="line">    <span class="attr">reveal:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">move-dockerfile</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">ubuntu</span></span><br><span class="line">      <span class="attr">inputs:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-dockerfile</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">run:</span> </span><br><span class="line">        <span class="attr">path:</span> <span class="string">mv</span></span><br><span class="line">        <span class="attr">args:</span> [<span class="string">"ant-media-server-dockerfile/body"</span>, <span class="string">"ant-media-server/Dockerfile"</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">generate-build-args</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">ubuntu</span></span><br><span class="line">      <span class="attr">inputs:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">run:</span> </span><br><span class="line">        <span class="attr">path:</span> <span class="string">sh</span></span><br><span class="line">        <span class="attr">args:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">-exc</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">'echo "AntMediaServer=ant-media-server-community-$(cat ant-media-server/version).zip" &gt; ant-media-server/build_args.txt'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">build-image</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">registry-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">concourse/oci-build-task</span></span><br><span class="line">      <span class="attr">inputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">params:</span></span><br><span class="line">        <span class="attr">CONTEXT:</span> <span class="string">ant-media-server</span></span><br><span class="line">        <span class="attr">BUILD_ARGS_FILE:</span> <span class="string">ant-media-server/build_args.txt</span></span><br><span class="line">      <span class="attr">caches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">run:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">put:</span> <span class="string">ant-media-server-docker</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">image/image.tar</span></span><br><span class="line">      <span class="attr">bump_aliases:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">"((.:tag))"</span></span><br></pre></td></tr></tbody></table></figure>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/concourse/">concourse</category>
      
      <category domain="https://www.boris1993.com/tags/concourse-ci/">concourse-ci</category>
      
      <category domain="https://www.boris1993.com/tags/vault/">vault</category>
      
      
      <comments>https://www.boris1993.com/concourse-practise-build-and-push-docker-image.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode 刷题笔记</title>
      <link>https://www.boris1993.com/leetcode-notes.html</link>
      <guid>https://www.boris1993.com/leetcode-notes.html</guid>
      <pubDate>Thu, 26 Jan 2023 07:23:57 GMT</pubDate>
      
      <description>&lt;p&gt;迫于找工作，不得不一边鄙视自己的智商，一边硬着头皮刷 LeetCode。既然开始刷题，那顺便做个笔记，以便日后温习。&lt;/p&gt;
&lt;p&gt;我是跟着 &lt;a href=&quot;https://neetcode.io/practice&quot;&gt;&lt;code&gt;NeetCode&lt;/code&gt;&lt;/a&gt;的顺序来做的，所以一部分题目我是按照 &lt;code&gt;NeetCode&lt;/code&gt; 的分类来归类的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>迫于找工作，不得不一边鄙视自己的智商，一边硬着头皮刷 LeetCode。既然开始刷题，那顺便做个笔记，以便日后温习。</p><p>我是跟着 <a href="https://neetcode.io/practice"><code>NeetCode</code></a>的顺序来做的，所以一部分题目我是按照 <code>NeetCode</code> 的分类来归类的。</p><span id="more"></span><h2 id="Arrays-amp-Hashing"><a href="#Arrays-amp-Hashing" class="headerlink" title="Arrays &amp; Hashing"></a>Arrays &amp; Hashing</h2><h3 id="217-Contains-Duplicate"><a href="#217-Contains-Duplicate" class="headerlink" title="217. Contains Duplicate"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY29udGFpbnMtZHVwbGljYXRlLw==">217. Contains Duplicate<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,1]</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Input: nums = [1,2,3,4]</span><br><span class="line">Output: false</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        HashSet&lt;Integer&gt; hashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums) {</span><br><span class="line">            <span class="comment">// 看见一个数字就去hashSet里面查，</span></span><br><span class="line">            <span class="comment">// 查到就说明重复过了</span></span><br><span class="line">            <span class="keyword">if</span> (hashSet.contains(i)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            hashSet.add(i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="242-Valid-Anagram"><a href="#242-Valid-Anagram" class="headerlink" title="242. Valid Anagram"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdmFsaWQtYW5hZ3JhbS8=">242. Valid Anagram<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "anagram", t = "nagaram"</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Input: s = "rat", t = "car"</span><br><span class="line">Output: false</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> {</span><br><span class="line">        <span class="keyword">if</span> (s.length() != t.length()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串s中各个字符出现的次数</span></span><br><span class="line">        Map&lt;Character, Integer&gt; countS = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串t中各个字符出现的次数</span></span><br><span class="line">        Map&lt;Character, Integer&gt; countT = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) {</span><br><span class="line">            countS.put(</span><br><span class="line">                s.charAt(i), </span><br><span class="line">                countS.getOrDefault(s.charAt(i), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) {</span><br><span class="line">            countT.put(</span><br><span class="line">                t.charAt(i), </span><br><span class="line">                countT.getOrDefault(t.charAt(i), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Map#equals比较的是两个map中的键值对</span></span><br><span class="line">        <span class="comment">// 键值对相同，说明两串字符都用了相同的字母，每个字母出现的次数也一样</span></span><br><span class="line">        <span class="comment">// 即同字母异序词</span></span><br><span class="line">        <span class="keyword">return</span> countS.equals(countT);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1299-Replace-Elements-with-Greatest-Element-on-Right-Side"><a href="#1299-Replace-Elements-with-Greatest-Element-on-Right-Side" class="headerlink" title="1299. Replace Elements with Greatest Element on Right Side"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVwbGFjZS1lbGVtZW50cy13aXRoLWdyZWF0ZXN0LWVsZW1lbnQtb24tcmlnaHQtc2lkZS8=">1299. Replace Elements with Greatest Element on Right Side<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [17,18,5,4,6,1]</span><br><span class="line">Output: [18,6,6,6,1,-1]</span><br><span class="line">Explanation: </span><br><span class="line">- index 0 --&gt; the greatest element to the right of index 0 is index 1 (18).</span><br><span class="line">- index 1 --&gt; the greatest element to the right of index 1 is index 4 (6).</span><br><span class="line">- index 2 --&gt; the greatest element to the right of index 2 is index 4 (6).</span><br><span class="line">- index 3 --&gt; the greatest element to the right of index 3 is index 4 (6).</span><br><span class="line">- index 4 --&gt; the greatest element to the right of index 4 is index 5 (1).</span><br><span class="line">- index 5 --&gt; there are no elements to the right of index 5, so we put -1.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] replaceElements(<span class="type">int</span>[] arr) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">mx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = mx;</span><br><span class="line">            mx = Math.max(mx, a);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解题思路就是把 explanation 反过来看，既然要找元素右边最大的数，那么就从最右开始，这样找到的最大的数必定适用于 <code>arr[i] ~ arr[length - 1]</code> 这个范围。</p><h3 id="392-Is-Subsequence"><a href="#392-Is-Subsequence" class="headerlink" title="392. Is Subsequence"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaXMtc3Vic2VxdWVuY2Uv">392. Is Subsequence<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "abc", t = "ahbgdc"</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Input: s = "axc", t = "ahbgdc"</span><br><span class="line">Output: false</span><br><span class="line"></span><br><span class="line">Input: s = "acb", t = "ahbgdc"</span><br><span class="line">Output: false</span><br><span class="line"></span><br><span class="line">Input: s = "aaaaaa", t = "bbaaaa"</span><br><span class="line">Output: false</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubsequence</span><span class="params">(String s, String t)</span> {</span><br><span class="line">        <span class="keyword">if</span> (s.equals(t) || s.length() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t.length() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) {</span><br><span class="line">            <span class="keyword">if</span> (t.charAt(i) == s.charAt(sIndex)) {</span><br><span class="line">                sIndex++;</span><br><span class="line">                <span class="keyword">if</span> (sIndex &gt;= s.length()) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解题思路就是整两个指针，<code>sIndex</code> 指向 <code>s</code> 的各个字符，在循环里面逐个取 <code>t</code> 的字符跟 <code>s[sIndex]</code> 对比，匹配到的话 <code>sIndex</code> 就往下走一步，如果 <code>sIndex</code> 能走到头，就说明 <code>s</code> 是 <code>t</code> 的子序列。</p><h3 id="58-Length-of-Last-Word"><a href="#58-Length-of-Last-Word" class="headerlink" title="58. Length of Last Word"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbGVuZ3RoLW9mLWxhc3Qtd29yZC8=">58. Length of Last Word<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "Hello World"</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The last word is "World" with length 5.</span><br><span class="line"></span><br><span class="line">Input: s = "   fly me   to   the moon  "</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The last word is "moon" with length 4.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLastWord</span><span class="params">(String s)</span> {</span><br><span class="line">        String[] strs = s.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">return</span> strs[strs.length - <span class="number">1</span>].length();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我的评价是，这道题不应该出现在 LeetCode，应该出现在大学 Java 课程的作业里。</p><h3 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdHdvLXN1bS8=">1. Two Sum<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) {</span><br><span class="line">        <span class="comment">// key是数字本身，value是数字所在下标</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">// 算一下target与当前下标的差</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">complement</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(complement)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] { map.get(complement), i };</span><br><span class="line">            }</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"No solution found"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算过程：</p><ul><li><code>i = 0</code>，<code>nums[i] = 2</code>，<code>complement = 9 - 2 = 7</code>，map 的 key 里面找不到 7，所以 <code>map.put(2, 0)</code></li><li><code>i = 1</code>，<code>nums[i] = 7</code>，<code>complement = 9 - 7 = 2</code>，map 的 key 里面有 2，即 <code>nums[i] + nums[map.get(2)] = 9</code>，返回 <code>[map.get(2), nums[i]]</code> 即 <code>[0, 1]</code></li></ul><h3 id="14-Longest-Common-Prefix"><a href="#14-Longest-Common-Prefix" class="headerlink" title="14. Longest Common Prefix"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbG9uZ2VzdC1jb21tb24tcHJlZml4Lw==">14. Longest Common Prefix<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = ["flower","flow","flight"]</span><br><span class="line">Output: "fl"</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> {</span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿第一个字符串当模版，匹配剩下几个字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">commonPrefix</span> <span class="operator">=</span> strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; strs.length; i++) {</span><br><span class="line">            <span class="comment">// 如果commonPrefix在strs[i]的下标不是0</span></span><br><span class="line">            <span class="comment">// 那么就去掉commonPrefix的最后一个字母，直到下标为0</span></span><br><span class="line">            <span class="comment">// 如果没有common prefix，那么commonPrefix会被砍成空字符串</span></span><br><span class="line">            <span class="keyword">while</span> (strs[i].indexOf(commonPrefix) != <span class="number">0</span>) {</span><br><span class="line">                commonPrefix = commonPrefix.substring(<span class="number">0</span>, commonPrefix.length() - <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> commonPrefix;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算过程：（语言描述太费劲，直接拿 Replit 放示意图算了）</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mo-0mHl8WwWsSHDX4V-7bYAUGZodjRGawnyJS2NygvakiR5dihCV8UzWHK5fCWseo_znk-QV23IbwhHmbYzDUV1L2RylbjtAdsI8Yc3Ab80dTy8IqmzAYV-nXAjsUHcVwD3Bk206U9ziDJ_ZJV05k9oT0rlAY4Ec3wFw2twnnfQCN3iCrbEgvjG9ENijPx7y_?width=1024&amp;height=227&amp;cropmode=none"></p><h3 id="49-Group-Anagrams"><a href="#49-Group-Anagrams" class="headerlink" title="49. Group Anagrams"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZ3JvdXAtYW5hZ3JhbXMv">49. Group Anagrams<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = ["eat","tea","tan","ate","nat","bat"]</span><br><span class="line">Output: [["bat"],["nat","tan"],["ate","eat","tea"]]</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> {</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str: strs) {</span><br><span class="line">            <span class="comment">// 取一个字符串，打散成字符数组，把字符数组排序后得到一个新字符串</span></span><br><span class="line">            <span class="comment">// 比如eat-&gt; aet，tea-&gt;aet</span></span><br><span class="line">            <span class="comment">// 这个作为map的key</span></span><br><span class="line">            <span class="type">char</span>[] charArray = str.toCharArray();</span><br><span class="line">            Arrays.sort(charArray);</span><br><span class="line">            <span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(newStr)) {</span><br><span class="line">                map.put(newStr, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 把重排序后结果相同的字符串放在同一个key下面的List里面</span></span><br><span class="line">            map.get(newStr).add(str);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(map.values());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算过程语言不好描述…… 但是代码挺易懂的吧，实在看不明白的话自己 debug 一下就清楚了。</p><h3 id="118-Pascal’s-Triangle"><a href="#118-Pascal’s-Triangle" class="headerlink" title="118. Pascal’s Triangle"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcGFzY2Fscy10cmlhbmdsZS8=">118. Pascal’s Triangle<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example: </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: numRows = 5</span><br><span class="line">Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]</span><br><span class="line"></span><br><span class="line">Input: numRows = 1</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">generate</span><span class="params">(<span class="type">int</span> numRows)</span> {</span><br><span class="line">        <span class="comment">// 需要单独处理只有一行的情况</span></span><br><span class="line">        <span class="comment">// 否则会因为下面预设前两行数据的代码而返回错误的数据</span></span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> List.of(List.of(<span class="number">1</span>));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(numRows);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 前两行的内容是固定的</span></span><br><span class="line">        result.add(List.of(<span class="number">1</span>));</span><br><span class="line">        result.add(List.of(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">2</span>; row &lt; numRows; row++) {</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(row + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 这一行最左边肯定是1</span></span><br><span class="line">            list.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 两个两个取上一行的各个数，两两相加，得到当前格子的数字</span></span><br><span class="line">            <span class="comment">// 因为要取上一行的第i和第i+1个元素，所以循环结束条件得是上一行的个数减一</span></span><br><span class="line">            <span class="comment">// 否则就下标越界了</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">previousRow</span> <span class="operator">=</span> row - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; result.get(previousRow).size() - <span class="number">1</span>; i++) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> result.get(previousRow).get(i) + result.get(previousRow).get(i + <span class="number">1</span>);</span><br><span class="line">                list.add(sum);</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 最右边也肯定是1</span></span><br><span class="line">            list.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            result.add(list);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="27-Remove-Element"><a href="#27-Remove-Element" class="headerlink" title="27. Remove Element"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVtb3ZlLWVsZW1lbnQv">27. Remove Element<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,2,3], val = 3</span><br><span class="line">Output: 2, nums = [2,2,_,_]</span><br><span class="line">Explanation: Your function should return k = 2, with the first two elements of nums being 2.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="comment">// 不等于val的数字的个数，同时当作nums的一个指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val) {</span><br><span class="line">                nums[count] = nums[i];</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="929-Unique-Email-Addresses"><a href="#929-Unique-Email-Addresses" class="headerlink" title="929. Unique Email Addresses"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdW5pcXVlLWVtYWlsLWFkZHJlc3Nlcw==">929. Unique Email Addresses<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: emails = ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: "testemail@leetcode.com" and "testemail@lee.tcode.com" actually receive mails.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numUniqueEmails</span><span class="params">(String[] emails)</span> {</span><br><span class="line">        HashSet&lt;String&gt; uniqueEmails = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String email : emails) {</span><br><span class="line">            <span class="type">String</span> <span class="variable">sanitizedEmail</span> <span class="operator">=</span> <span class="string">""</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">indexOfPlusSign</span> <span class="operator">=</span> email.indexOf(<span class="string">"+"</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">indexOfAtSign</span> <span class="operator">=</span> email.indexOf(<span class="string">"@"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (indexOfPlusSign &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// 按题目要求，第一个加号及其以后的用户名部分都会被忽略</span></span><br><span class="line">                sanitizedEmail += email.substring(<span class="number">0</span>, indexOfPlusSign);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                sanitizedEmail += email.substring(<span class="number">0</span>, indexOfAtSign);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 按题目要求，用户名部分的点都会被忽略</span></span><br><span class="line">            sanitizedEmail = sanitizedEmail.replace(<span class="string">"."</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理完了用户名部分，把域名部分拼上去</span></span><br><span class="line">            sanitizedEmail += email.substring(indexOfAtSign);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 全处理完之后，扔进HashSet里面，顺便去重</span></span><br><span class="line">            uniqueEmails.add(sanitizedEmail);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uniqueEmails.size();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="205-Isomorphic-Strings"><a href="#205-Isomorphic-Strings" class="headerlink" title="205. Isomorphic Strings"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaXNvbW9ycGhpYy1zdHJpbmdz">205. Isomorphic Strings<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example: </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "paper", t = "title"</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Input: s = "foo", t = "bar"</span><br><span class="line">Output: false</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIsomorphic</span><span class="params">(String s, String t)</span> {</span><br><span class="line">        <span class="comment">// 俩字符串长度都不一样，那必然不同形</span></span><br><span class="line">        <span class="keyword">if</span> (s.length() != t.length()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立s中每个字符与t中同位置字符的映射关系</span></span><br><span class="line">        <span class="comment">// 如 egg -&gt; add</span></span><br><span class="line">        <span class="comment">// e -&gt; a, g -&gt; d</span></span><br><span class="line">        HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>(s.length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) {</span><br><span class="line">            <span class="keyword">if</span> (map.containsValue(t.charAt(i))) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            map.put(s.charAt(i), t.charAt(i));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后从map里面，按照s的每个字母，取出映射过的字符</span></span><br><span class="line">        <span class="comment">// 拼在StringBuilder里面</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) {</span><br><span class="line">            <span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> map.get(s.charAt(i));</span><br><span class="line">            sb.append(ch);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查用映射拼出来的字符串与t是否相同</span></span><br><span class="line">        <span class="keyword">return</span> sb.toString().equals(t);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="347-Top-K-Frequent-Elements"><a href="#347-Top-K-Frequent-Elements" class="headerlink" title="347. Top K Frequent Elements"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdG9wLWstZnJlcXVlbnQtZWxlbWVudHMv">347. Top K Frequent Elements<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,1,1,2,2,3], k = 2</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) {</span><br><span class="line">        <span class="keyword">if</span> (nums.length == k) {</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Arrays</span><br><span class="line">            .stream(nums)</span><br><span class="line">            <span class="comment">// int -&gt; Integer</span></span><br><span class="line">            .boxed()</span><br><span class="line">            <span class="comment">// 收集到一个map中，key是数字，value是出现的次数</span></span><br><span class="line">            .collect(Collectors.groupingBy(num -&gt; num, Collectors.summingInt(num -&gt; <span class="number">1</span>)))</span><br><span class="line">            .entrySet()</span><br><span class="line">            .stream()</span><br><span class="line">            <span class="comment">// 把entry set按照value降序排列</span></span><br><span class="line">            .sorted(Map.Entry.comparingByValue((a, b) -&gt; Integer.compare(b, a)))</span><br><span class="line">            <span class="comment">// 取前k个</span></span><br><span class="line">            .limit(k)</span><br><span class="line">            <span class="comment">// 把key取出来，unbox成int</span></span><br><span class="line">            .mapToInt(e -&gt; e.getKey())</span><br><span class="line">            <span class="comment">// 最后造个数组出来返回掉</span></span><br><span class="line">            .toArray();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>还写 (chao) 了一个不用 <code>stream</code>，纯手工拿 entry set 做比较的解法，因过于丑陋，就不贴在这了，<code>submission</code> 在<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdG9wLWstZnJlcXVlbnQtZWxlbWVudHMvc3VibWlzc2lvbnMvODg2MTUyMzUzLw==">这里<i class="fa fa-external-link-alt"></i></span>。</p><h3 id="128-Longest-Consecutive-Sequence"><a href="#128-Longest-Consecutive-Sequence" class="headerlink" title="128. Longest Consecutive Sequence"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbG9uZ2VzdC1jb25zZWN1dGl2ZS1zZXF1ZW5jZS9kZXNjcmlwdGlvbi8=">128. Longest Consecutive Sequence<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [100,4,200,1,3,2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.</span><br><span class="line"></span><br><span class="line">Input: nums = [0,3,7,2,5,8,4,6,0,1]</span><br><span class="line">Output: 9</span><br><span class="line">Explanation: The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore its length is 9.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">longestStreak</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentStreak</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">// 因为当前数字已经记入了一个“连击”</span></span><br><span class="line">            <span class="comment">// 所以当这个数字跟上一个数字重复的时候，直接跳到下一个数字</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) {</span><br><span class="line">                <span class="comment">// 既然连续，那么当前数字跟上一个数字肯定差1</span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] == nums[i - <span class="number">1</span>] + <span class="number">1</span>) {</span><br><span class="line">                    currentStreak++;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 如果不连续了，记下来最大的连击数，当前连击数重置</span></span><br><span class="line">                    longestStreak = Math.max(longestStreak, currentStreak);</span><br><span class="line">                    currentStreak = <span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后取最大的连击数，这个不用多说吧</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(longestStreak, currentStreak);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Two-Pointers"><a href="#Two-Pointers" class="headerlink" title="Two Pointers"></a>Two Pointers</h2><h3 id="125-Valid-Palindrome"><a href="#125-Valid-Palindrome" class="headerlink" title="125. Valid Palindrome"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdmFsaWQtcGFsaW5kcm9tZS8=">125. Valid Palindrome<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "A man, a plan, a canal: Panama"</span><br><span class="line">Output: true</span><br><span class="line">Explanation: "amanaplanacanalpanama" is a palindrome.</span><br><span class="line"></span><br><span class="line">Input: s = " "</span><br><span class="line">Output: true</span><br><span class="line">Explanation: s is an empty string "" after removing non-alphanumeric characters.</span><br><span class="line">Since an empty string reads the same forward and backward, it is a palindrome.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="comment">// 把不是字母和数字的字符剔出去，然后转小写，方便比较</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.replaceAll(<span class="string">"[\\W]|_"</span>, <span class="string">""</span>);</span><br><span class="line">        str = str.toLowerCase();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">reversed</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str).reverse().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str.equals(reversed);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但是很显然，这个偷鸡解法并不是 <code>two pointers</code> 这个分类想要的，所以另一个解法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="comment">// 把不是字母和数字的字符剔出去，然后转小写，方便比较</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.replaceAll(<span class="string">"[\\W]|_"</span>, <span class="string">""</span>);</span><br><span class="line">        str = str.toLowerCase();</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> chars.length / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> chars.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// head和tail两个指针逐步向middle逼近</span></span><br><span class="line">        <span class="comment">// 一边走，一边比较两个指针指向的字母是不是一样</span></span><br><span class="line">        <span class="keyword">while</span> (head &lt; middle) {</span><br><span class="line">            <span class="keyword">if</span> (chars[head] != chars[tail]) {</span><br><span class="line">                <span class="comment">// 不一样的话，那自然就不是回文字符串了</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            head++;</span><br><span class="line">            tail--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-Container-With-Most-Water"><a href="#11-Container-With-Most-Water" class="headerlink" title="11. Container With Most Water"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY29udGFpbmVyLXdpdGgtbW9zdC13YXRlcg==">11. Container With Most Water<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: height = [1,8,6,2,5,4,8,3,7]</span><br><span class="line">Output: 49</span><br><span class="line">Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg"></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> height.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">            <span class="comment">// 取容器最短的那个板子，木桶原理嘛</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">ht</span> <span class="operator">=</span> Math.min(height[left], height[right]);</span><br><span class="line">            <span class="comment">// 板子左右有几格水</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">water</span> <span class="operator">=</span> right - left;</span><br><span class="line">            <span class="comment">// 水的体积，也就是蓝色正方形的面积，底*高</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">volume</span> <span class="operator">=</span> ht * water;</span><br><span class="line">            <span class="comment">// 记录最大的体积</span></span><br><span class="line">            max = Math.max(max, volume);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 既然要找最大的体积，当然哪个板子短就换哪个</span></span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) {</span><br><span class="line">                left++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                right--;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h2><h3 id="108-Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY29udmVydC1zb3J0ZWQtYXJyYXktdG8tYmluYXJ5LXNlYXJjaC10cmVlLw==">108. Convert Sorted Array to Binary Search Tree<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-10,-3,0,5,9]</span><br><span class="line">Output: [0,-3,9,-10,null,5]</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg"></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">return</span> builder(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">builder</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从中间将nums二分</span></span><br><span class="line">        <span class="comment">// 比如在第一层递归中，</span></span><br><span class="line">        <span class="comment">// [-10,-3,0,5,9] -&gt; [-10,-3,0] [5,9]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中间的数字作为二叉搜索树的根节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">rootNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[middle]);</span><br><span class="line">        <span class="comment">// 第一层递归中[-10, -3]拿去构造左边的子节点</span></span><br><span class="line">        rootNode.left = builder(nums, left, middle - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 第一层递归中[5,9]拿去构造右边的子节点</span></span><br><span class="line">        rootNode.right = builder(nums, middle + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rootNode;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>思路就是递归 + 二分，或许还有些分治思想？先找见根节点，然后把数组左右分成两半，在递归里面再重复这样的操作，直到只有一个根节点，也就是最下面的叶子节点。最后往上组装。<br>数据怎么跑的 debug 一下看看吧，用语言描述肯定要乱死。</p><h2 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h2><h3 id="146-LRU-Cache"><a href="#146-LRU-Cache" class="headerlink" title="146. LRU Cache"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbHJ1LWNhY2hlL2Rlc2NyaXB0aW9uLw==">146. LRU Cache<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example: </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]</span><br><span class="line">[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, 1, null, -1, null, -1, 3, 4]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">LRUCache lRUCache = new LRUCache(2);</span><br><span class="line">lRUCache.put(1, 1); // cache is {1=1}</span><br><span class="line">lRUCache.put(2, 2); // cache is {1=1, 2=2}</span><br><span class="line">lRUCache.get(1);    // return 1</span><br><span class="line">lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}</span><br><span class="line">lRUCache.get(2);    // returns -1 (not found)</span><br><span class="line">lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}</span><br><span class="line">lRUCache.get(1);    // return -1 (not found)</span><br><span class="line">lRUCache.get(3);    // return 3</span><br><span class="line">lRUCache.get(4);    // return 4</span><br></pre></td></tr></tbody></table></figure></blockquote><p>解题思路：</p><p>LRU Cache，即 <code>Least Recently Used Cache</code>，其运作机理是，如果在 cache 已满的时候添加新的记录，那么要先删掉其中最不常用的记录，然后添加新的记录。</p><p>我们可以用双向链表来实现这个效果，越靠近链表头，就代表这个元素越常被用到；反之越靠近链表尾，这个元素就越不常用，链表尾的前一个元素也将是在 cache 满了之后被删掉的那个元素。</p><p>那么首先需要创建一个类 <code>Node</code>，代表双向链表中的节点。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">    Node next;</span><br><span class="line">    Node prev;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> {</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这时候就可以初始化 <code>LRUCache</code> 这个类的结构了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> {</span><br><span class="line">    <span class="comment">// 链表头节点，永远不动</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 链表尾节点，永远不动</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 存储key与Node的映射，get的时候实际上是从这取值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Node&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// cache容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> {</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="comment">// 双向链表头尾相连</span></span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来先实现 <code>get</code> 方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当一个节点被get</span></span><br><span class="line"><span class="comment">// 那么就把它提到双向链表的头部位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> {</span><br><span class="line">    <span class="comment">// 根据题目要求，key不存在就返回-1</span></span><br><span class="line">    <span class="keyword">if</span> (!map.containsKey(key)) {</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">nodeNext</span> <span class="operator">=</span> node.next;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">nodePrev</span> <span class="operator">=</span> node.prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先把这个node从当前位置抹去</span></span><br><span class="line">    nodePrev.next = nodeNext;</span><br><span class="line">    nodeNext.prev = nodePrev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后插入到头部</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">headNext</span> <span class="operator">=</span> head.next;</span><br><span class="line">    node.next = headNext;</span><br><span class="line">    node.prev = head;</span><br><span class="line">    headNext.prev = node;</span><br><span class="line">    head.next = node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.value;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来实现 <code>put</code> 方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> {</span><br><span class="line">    <span class="comment">// 如果key已经存在</span></span><br><span class="line">    <span class="comment">// 那么put相当于更新value，同时刷新在LRU Cache中的位置</span></span><br><span class="line">    <span class="comment">// 所以先把已有的这个node删掉</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key)) {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.remove(key);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">nodeNext</span> <span class="operator">=</span> node.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">nodePrev</span> <span class="operator">=</span> node.prev;</span><br><span class="line">        nodePrev.next = nodeNext;</span><br><span class="line">        nodeNext.prev = nodePrev;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果cache满了，就要先删掉末尾的节点（末位淘汰制？</span></span><br><span class="line">    <span class="keyword">if</span> (map.size() == capacity) {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">leastRecentUsedNode</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        map.remove(leastRecentUsedNode.key);</span><br><span class="line"></span><br><span class="line">        leastRecentUsedNode.prev = tail;</span><br><span class="line">        tail.prev = leastRecentUsedNode.prev;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">    map.put(key, newNode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把这个新建的node塞到head和headNext之间</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">headNext</span> <span class="operator">=</span> head.next;</span><br><span class="line">    newNode.prev = head;</span><br><span class="line">    newNode.next = headNext;</span><br><span class="line">    headNext.prev = newNode;</span><br><span class="line">    head.next = newNode;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可见新增节点和删除节点操作的代码是经常重复的，所以抽成两个单独的方法。最后完整的解题代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Node&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> {</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> {</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) {</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        remove(node);</span><br><span class="line">        insert(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> {</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) {</span><br><span class="line">            remove(map.get(key));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map.size() == capacity) {</span><br><span class="line">            remove(tail.prev);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        insert(<span class="keyword">new</span> <span class="title class_">Node</span>(key, value));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node node)</span> {</span><br><span class="line">        map.remove(node.key);</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Node node)</span> {</span><br><span class="line">        map.put(node.key, node);</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">headNext</span> <span class="operator">=</span> head.next;</span><br><span class="line">        node.prev = head;</span><br><span class="line">        node.next = headNext;</span><br><span class="line">        headNext.prev = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">        Node next;</span><br><span class="line">        Node prev;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> {</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Math-amp-Geometry"><a href="#Math-amp-Geometry" class="headerlink" title="Math &amp; Geometry"></a>Math &amp; Geometry</h2><h3 id="9-Palindrome-number"><a href="#9-Palindrome-number" class="headerlink" title="9. Palindrome number"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcGFsaW5kcm9tZS1udW1iZXIv">9. Palindrome number<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 121</span><br><span class="line">Output: true</span><br><span class="line">Explanation: 121 reads as 121 from left to right and from right to left.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">input</span> <span class="operator">=</span> x;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">reversedNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// x从低位往高位取数字，然后从高位到低位填给reversedNum</span></span><br><span class="line">        <span class="comment">// 即把x反转</span></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">// reversedNum乘10，加上x除以10的余数，即当前x的末位数</span></span><br><span class="line">            reversedNum = reversedNum * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// x除以10，抛掉当前的末位数</span></span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (reversedNum &gt; Integer.MAX_VALUE || reversedNum &lt; Integer.MIN_VALUE) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> input == reversedNum;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算过程：</p><ul><li><code>x = 121</code>，<code>reversedNum = 0</code>；<code>reversedNum = reversedNum * 10 + x % 10 = 0 + 1 = 1</code>；<code>x = x / 10 = 121 / 10 = 12</code></li><li><code>x = 12</code>，<code>reversedNum = 1</code>；<code>reversedNum = reversedNum * 10 + x % 10 = 10 + 2 = 12</code>；<code>x = x / 10 = 12 / 10 = 1</code></li><li><code>x = 1</code>，<code>reversedNum = 12</code>；<code>reversedNum = reversedNum * 10 + x % 10 = 120 + 1 = 121</code>；<code>x = x / 10 = 1 / 10 = 0</code></li><li><code>input == reversedNum =&gt; 121 == 121 =&gt; true</code></li></ul><p>写到这想到还有个粗暴解法，把数字当成字符串，翻转一下然后比较两个字符串是不是一样不就行了，做什么数学题？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputString</span> <span class="operator">=</span> Integer.toString(x);</span><br><span class="line">        <span class="type">String</span> <span class="variable">reversedString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(inputString).reverse().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inputString.equals(reversedString);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>多清爽，三行完事还不烧脑子。</p><h3 id="13-Roman-to-Integer"><a href="#13-Roman-to-Integer" class="headerlink" title="13. Roman to Integer"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcm9tYW4tdG8taW50ZWdlci8=">13. Roman to Integer<i class="fa fa-external-link-alt"></i></span></h3><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "MCMXCIV"</span><br><span class="line">Output: 1994</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="comment">// 基本罗马数字</span></span><br><span class="line">        <span class="keyword">final</span> HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">7</span>);</span><br><span class="line">        map.put(<span class="string">'I'</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">'V'</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">'X'</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">'L'</span>, <span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">'C'</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">'D'</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">'M'</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// IV这种左减格式的数字收拾起来太麻烦，</span></span><br><span class="line">        <span class="comment">// 直接转成连续的基本数字</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">sanitized</span> <span class="operator">=</span> s</span><br><span class="line">                .replace(<span class="string">"IV"</span>, <span class="string">"IIII"</span>)</span><br><span class="line">                .replace(<span class="string">"IX"</span>, <span class="string">"VIIII"</span>)</span><br><span class="line">                .replace(<span class="string">"XL"</span>, <span class="string">"XXXX"</span>)</span><br><span class="line">                .replace(<span class="string">"XC"</span>, <span class="string">"LXXXX"</span>)</span><br><span class="line">                .replace(<span class="string">"CD"</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">                .replace(<span class="string">"CM"</span>, <span class="string">"DCCCC"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">char</span>[] chars = sanitized.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> aChar : chars) {</span><br><span class="line">            result += map.get(aChar);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算过程：</p><ul><li><code>MCMXCIV</code>(1994) =&gt; <code>M CM XC IV</code>(1000 900 90 4) =&gt; <code>M DCCC LXXXX IIII</code></li><li>从头到尾遍历 <code>MDCCCLXXXXIIII</code> 中每个字符，去 map 里面找对应的阿拉伯数字，加起来就完事了</li></ul><p>一开始做的时候愁死我了，没有左减格式的数字没啥难度，想破脑袋也没想到怎么处理左减，抄答案发现还能这么玩，属实打开思路了。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://www.boris1993.com/tags/%E4%B9%90%E6%89%A3/">乐扣</category>
      
      
      <comments>https://www.boris1993.com/leetcode-notes.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>我的新冠感染纪实</title>
      <link>https://www.boris1993.com/recording-my-infection-of-corona.html</link>
      <guid>https://www.boris1993.com/recording-my-infection-of-corona.html</guid>
      <pubDate>Sat, 24 Dec 2022 10:48:15 GMT</pubDate>
      
      <description>&lt;p&gt;我，很不幸，于 2022-12-23 夜，新冠奥密克戎发作。不过，最近记录自己被感染的生活好像是个流量密码，那我干脆也蹭一波热点，记录一下我感染之后的感受。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>我，很不幸，于 2022-12-23 夜，新冠奥密克戎发作。不过，最近记录自己被感染的生活好像是个流量密码，那我干脆也蹭一波热点，记录一下我感染之后的感受。</p><span id="more"></span><h2 id="病发"><a href="#病发" class="headerlink" title="病发"></a>病发</h2><p>说来，一开始有征兆还是在 22 日下午，我从医院开完药出来之后，就偶尔会咳两声，但是嗓子里的感觉又不像是感染，更像是吸入了什么灰尘，喉咙那有点麻麻沙沙的异物感，所以就没放在心上。</p><p>正经开始感觉不对劲，是在 12 月 23 日的下午。本来这天阳光不是很足，上海又降温了，好死不死我还没开空调，屋里本来就有点冷。我慢慢开始感觉有点浑身发凉，但是没想到是发病，以为只是单纯的着凉而已，于是打开了空调，期盼能舒服一点。</p><p>但是慢慢的事情开始朝不对劲的方向发展，晚上我开始感觉脑袋会忽然飘一下，后背也开始有一种奇怪但熟悉的痛感，我不知道该怎么描述，就是那种你摸上去就会有点钝痛的那种感觉。我发觉这事不是那么简单，我估计是发烧了，但这时候我依旧没往新冠感染上想，以为就是个普通感冒。但是苦于我的温度计找不到了，不量体温又不是个办法，遂硬着头皮，走到小区对面的药房，借了药房的温度计测了一下。结果不出预料，37 度 5。因为药房的温度计也卖完了，于是在咨询了一下怎么吃药之后，就回去了。</p><p>说真的，家里必须得时常检查下温度计还能不能找见，发烧的时候顶着寒冷出门绝不是个好主意。我在走路的时候，时不时就会晕一下，过马路左右扭头的时候甚至耳朵嗡的一下，虽然神志清楚，但是总感觉险些要晕过去。也就算我命大，硬是慢慢的走回来了。</p><p>书归正传，有时候吧，这事还真就是无巧不成书，正好我在 22 日那天要去医院开我的焦虑症的药，就顺路在药房买了些能对应新冠感染的药，虽然不是布洛芬和对乙酰氨基酚这种值钱玩意，但至少退烧、止痛、镇咳、缓解咽痛的药都拿到了。只是万万没想到第二天就能派上用场…..TAT。</p><p>得了医嘱，回来开始吃退烧药。药名叫<code>酚氨咖敏片</code>，说主治感冒、发烧、头痛，里面包含氨基比林、对乙酰氨基酚、咖啡因、马来酸氯苯那敏。吃了药，想到没有体温计还是不行，于是打开各种外卖平台，想看看附近药房有没有能外卖过来的。要不说咱命好呢，正好交大附近的一个药房还有额温枪，不容多想，手起键落下了一单。一看预计 00:23 送达，我还挺美，哪知道临到凌晨的时候美团说已经送达？？？我一问骑手，才知道他们不肯单独为这一个玩意跑这么远，只能等第二天中午再送。行吧，没盼头了，一摸电热毯烧的很热，空调也够劲，睡。</p><h2 id="次日"><a href="#次日" class="headerlink" title="次日"></a>次日</h2><p>一晚上觉也没睡太好，醒了有三四次，期间还做了不少奇奇怪怪的梦，到了早上 10 点来钟，迷迷糊糊的醒了，但是感觉非常赖床，左滚右滚就是不想起，还感觉身上似乎出了很多的汗。翻腾了大概半小时，终于鼓起勇气，爬出被窝起床。一摸后背，果然湿漉漉的，出了不少的汗。起来刷过牙洗过脸，开始吃药。过了会看到我这还有不少抗原试剂盒，是中旬上海封城的时候发的，于是就拿了一个测了一下，一开始只看见 C 有杠杠，T 没有，还庆幸不是新冠，但是 15 分钟后，T 这里开始出现浅浅的一道。果然，还是没躲掉。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mWO2voEUyEI09T5DfSeht0WLEhBksrM1G-I2m6Qz1cph3sn3FvgkBze2-raZzaQYy0QtBH58HvWkrIOGbMPRpiA6nus5-pdy2BM88NtU_hpRbKP8H69u8yn9mUvkq28d0UYhuC7uQrbkcRfIkQh4HW7kTtU6_p2J2SbulOeLFuzmnSihKQXNh8born4k8Iqo4?width=2268&amp;height=4032&amp;cropmode=none" alt="噫！好了！我中了！"></p><p>既然中了，那果然还是得搞点更对症的药。问了之前感染过的兄弟，都说布洛芬好使，但是现在药房肯定是买不到了。好在微信上线了一个互助小程序，我成功联系到了两个人，一位给我送了 4 片对乙酰氨基酚，另一位网购了 100 来片布洛芬，我正在等他到货。中午吃过饭之后，跑腿小哥也把药送到了我这里。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mAj0KEJQDSmAdPc9Gp3eRloZUcZhlxE78QLynR-nL5HiKM202igAlGwbVZhPzHzSJ79vtdaxB-p2RkS-BLLQN7pjVgPTwGeP7wihpBB4g-B24Jwj3qz7o6yXaTmlqeBfHikxcMi9-SmlruXConpxWlzUI2NkBXMZnauHyq9WD_HT-r1UetDROti8Hxc2bW0cM?width=1080&amp;height=1920&amp;cropmode=none"></p><p>之前一直不相信自己是新冠感染的另一个原因就是，很多人都说他们感染之后丧失了嗅觉和味觉，但是我味觉丝毫不受任何影响，吃什么都很有味，包括头一天晚上吃的柚子，和这一天吃的外卖，味觉都很正常，没有发生味觉丧失和味觉改变。或许这个症状也是因人而异吧。至于嗅觉，我是个过敏性鼻炎患者，嗅觉不好使不是一年两年了，所以就算没了我也不知道……</p><p>下午也没心情搞什么，躺在床上无所事事，大概三点来钟睡着了，一觉干到 6 点半。醒来没一会接到家里的电话，说已经在来上海的飞机上了。我是感觉又安心又担心，安心当然是因为父母能来照顾我，但是我又非常害怕传染给他们，不过既然来了，也劝不回去，只能车到山前必有路了吧。吃过晚饭，一边写这篇流水账，一边等父母过来。</p><p>对了，还没说我买的额温枪呢。实话说我一开始特别怀疑这玩意的准确度，因为中午拿到之后我就测了好几次，那会身体明明感觉到还有一点烧，但是一直都只能测出来 36 度 5、36 度 8。直到刚才 (20:54)，我明显感觉到体温又上来之后，才测出来个 37 度 6，而且这还夹杂在一堆 37 度整、36 度 8 之间。果然还是得整个水银的才靠谱啊。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mvpAGcJhm0Ud7IgIpXh_ebi-CJ_hvcEOunXKa0-GyFdpnHvxh2pZo8t-z1xrjmQWDubZ-xUd6ySxUEmBohnXrwEDrJJ32_kzqZc-CMm25T-URLNl7A1_y9dPca2CV4VPB9ybTbB_hT9mUQNm_hZ75NLNd1Msl12-4NhittfqsuFP07KCBKPbAZzAdfKcg17kR?width=2268&amp;height=4032&amp;cropmode=none"></p><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>前一天晚上还是有点低烧，看到网上建议忍一忍再吃退烧药，让体温帮助杀灭病毒，所以睡前也没喝布洛芬，直接钻进烧热了电热毯的被窝睡了。一晚上还是各种奇怪的梦。可早上一醒，嘿，你猜怎么着？我不烧了！然而嗓子比前一天加倍的疼，咳嗽好像也略微多了点，还带着白痰。莫非病毒已经被打的溃不成军，妄图用加重咳嗽的方法往外大量散播么？如果屋里只有我一个人的话，那我才懒得管，你随便爱往哪传播就往哪传播去，但是现在我父母也来了，那我的评价就是</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mHsmVq1FsngCGjpoupugQmvcHH_aq6pFAIOw9nkLrZ97rGWUpk4cnvdzv5iZZ8w_OcyIWEkifWVdOOByx8isrFVbrJLeJMGBqQtxgD8OoK231mwDKm-5FjFpBOWQuAziP21oZofqePtefWifQ0y9D9PWRu2G5dQvaCn_0A0sfu69ChbHckn3Ix5h7MMbvfyH6?width=1024&amp;height=640&amp;cropmode=none"></p><p>继续说症状，今天后背还是有类似发烧引发的那种痛感，隐隐还有点头疼，而且偶尔脑袋还是会恍惚一下，大概是发烧导致的问题还没好利索。</p><p>中午吃过饭，也没什么精神头干别的，直接从大概一两点睡到了将近 6 点，起来之后，因为头疼搞得很恶心，吐了一大口。好在没有影响食欲，晚饭依旧吃得很香。饭后也没啥精神，待了会就睡了。</p><h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><p>第四天一整天的主旨就是一个字：睡。</p><p>头天晚上睡觉的时候，一晚上醒了几次，断断续续的睡到了大概十点来钟，起来也没什么精神，什么都不想干，只想趴着，只想睡觉。但也有值得高兴的事，母上大人做的素面一如既往的好吃。</p><p>下午断断续续睡了好几觉，睡醒了就还是头疼。喝了口热水，感觉有点恶心，暗觉不妙，但是也没多想，就想接着睡。但是刚躺下没一会，突然胃就一抽给呕出来一口。说时迟那时快，我强忍着咬紧牙关，光速戴上口罩冲进厕所，哇哇的把中午饭和晚饭都吐干净了。饭吐了不说，还吐了好几口鲜血，场面甚是恐怖。我害怕是肺出血，还特意咳了口痰，还好还好痰里没血。但又想到最近吃的药有点杂，开始担心是不是肝坏了，遂在支付宝上找了个在线问诊，大夫听完我描述说，不像是肝损伤，建议我把药都停了，饭不要吃太烫的，观察一下看看，如果不再吐就没事了。还好还好，不需要去 ICU。完事喝了点水，待了会就准备继续睡觉。可是白天睡了太多，晚上断断续续的差不多两点钟才正经睡着。</p><p>为啥我突然开始担心肝呢？因为这几天确实药吃的有点杂，有布洛芬，有胆木浸膏糖浆，还有父母从老家带来的 “新冠治疗方” 中药，我害怕里面有什么成分重叠，给肝脏上了太大压力，就像那些因为害怕而过量服药的人一样。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4momBf0-4kRXGd8YzfJ6IHXOC5B4ZYoOdhbTDy8wnPJZ_68SQ3QKJIHL08fZDInoe_q5BBfI8IuyEms3o6aoFuiRo9HeLLQ49_OR7aFroxb-XvNxVPkBQZThtd5vORAu-oTxac9YmPr2-hJcfq5lQFuh27E9SLy9TFovbUSxj4GodB1ZIhNTMGaWiI0AzA9AoI?width=3024&amp;height=3024&amp;cropmode=none"></p><p>不过既然大夫都说把不必要的药都停了，那就遵医嘱呗，反正新冠这玩意最后还是得靠自己，不烧也不死命的咳，那也就别瞎吃药了。</p><p>忘了是中午还是下午，顺便又做了个自测，这次变成强阳性了，T 这一杠红的甚是晃眼。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4m42eoOX0de8IY9xgzaa3XARYNIKRJ-YEX8FIJpYXKRqHssNwGu3al8ub991s7nRKM7FQ-o5UuXj8kZtmvw65O1UbTjQ5FZqm2Dp-03rubFSXO7f0_tiq9vvfor2swOyfjVqEWJp2L31zDFZjIeuNcp9lyCsV04yo-licKxim2HH_OdhcTesOz0IuDjQFNSMeC?width=2268&amp;height=4032&amp;cropmode=none"></p><p>这两天也算是目前为止精神最差的两天，什么都不想干，要是味觉再没了的话，我可能连饭都不想吃。</p><h2 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h2><p>今天早上的主题是：疼！</p><p>第四天开始，我的左边嗓子就已经开始疼起来了，但是今天我没想到竟能如此的疼！什么吞刀片感，明明是电钻打眼感好吗？而且正好是左边打穿了，正在开始往右边打！</p><p>不过也有好消息，就是咳嗽更少了，而且也确实没有再吐血，甚至没有恶心的感觉。精神状态也比前两天好了不少。前两天不止是什么都不想干，听到微信的通知声音都烦躁的很。</p><p>而且今天开始，咳嗽的次数又变少了，一天满打满算好像也就不到 10 次的样子。感觉应该是快要康复了？</p><p>早饭吃了个黑麦片配小麦胚芽，这还是我在六七月份上海解封之后买的。然后遵医嘱吃了颗奥美拉唑肠溶胶囊养养胃。吃完早饭无所事事，瞎翻手机的时候，看到小区群有人在卖体温计，正好我缺个体温计，只有个感觉并不是那么准的额温枪。没时间多想，果断拿下。呐，就是这玩意：</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mvcCwFHFZ9heCSzDiPI8594gPozMjNjaby8Wx4m2UbpAaSuX1wH70q9raTFwTqdjA-7otQ90rDVgzreyKNmSaDM11hL2YD_zA5lhfa52mhS8_bDMeZP6mRQaKo8ZF1ctYcdEj9AAEpfXGZSEzgBYV8QnSqx_bxLykeC9Hq7LhsbsYtkoKQvB8gZ0P8Zzlf54a?width=2268&amp;height=4032&amp;cropmode=none" alt="我也是有体温计的人了"></p><p>中午吃的是素面和金枪鱼罐头。饭后虽然说有了点精神，但还是什么都不想干，那不用说，睡！</p><p>睡到大概四五点的时候，隐约感觉有点冷，以为是下午睡觉没开空调，屋里降温的原因。想到有了体温计，就测一下吧。可这一测吓我一跳，37 度 5，这是又烧上了？但是感觉又不像，嘴里哈气也没有之前发烧那种哈热气的感觉，摸脑门也不觉得热，让父母摸了一下，好像也没啥大差别，只好不管了，再观察一下。</p><p>网上瞎冲浪的时候，看见这么一张图，又想到我晚上睡大床，父母却只能在沙发和帆布床上凑合，瞬间泪如雨下。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mlI63YdtYfe7RKJPG8T-jZ2rEfuEyBJzTsmOSvUjzb2rDn-TwDU4EiW9gNF_nO7F7SvIj2ZupkyTIVvh8SJwQIjtsJ3urXwt_QI6MhDl8BMteOtKEQ26T16OvW09T8z15F3ftc3dbB7wL7skrn4R4lsSgoyJO3lbJ44eqX5F8BouaR_RKyK_p9VK-EZzUPIwG?width=596&amp;height=1024&amp;cropmode=none"></p><p>晚饭吃的小米粥和香菇炒油菜，吃过饭之后感觉头疼的厉害，那正好吃片扑热息痛，又退烧又缓解头痛。有一说一我真的觉得扑热息痛比布洛芬好使欸，见效又快又明显。刚刚 (20:52) 又测了下体温，37 度 1，果然是真的又烧起来了，不过拜扑热息痛所赐，并不觉得很难受，甚至有精神继续更新这篇纪实。</p><p>一边写文，一边喝椰子水，美得很！</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mU0vNu3XcC1lXN_JcvApJrWxp2Xh6IV53PpvpcWOxj-jRUwX3IOdtc_L8LrVLcT2yp-nInmepeAd-LdYdPj8aQ_aeXewTv9qvJ1EKxx09xQApDY8MSSTlJLutuc3TJkS8Mf_LcxqXAANGTvNcT5vw4jdCZ-90A_vXCshXFxHVWi_0iIBtBs-cdhLj0NVWkv7q?width=2268&amp;height=4032&amp;cropmode=none"></p><p>如果说大量喝白开水会感觉不舒服或者恶心的话，确实喝果汁是个不错的选择，写文的功夫，我大概已经连着干下去三分之二盒了。确实比喝白开水舒服。</p><p>说话的功夫，又到了 21:00，烧上电热毯，休息一会，准备睡觉。</p><h2 id="第六天-第八天"><a href="#第六天-第八天" class="headerlink" title="第六天 ~ 第八天"></a>第六天～第八天</h2><p>这三天变化不是很多，想想干脆合起来写好了。</p><p>从第六天开始突然感觉症状明显减轻，第六天仍稍微有一点类似发烧的头晕感，但是第七天往后就几乎没有这种感觉，精力也恢复不少，能专心做事或者动脑了。会想起前几天，“脑雾” 比较严重的一次，是在厕所蹲完坑扯了张纸准备擦，但扯下来纸后我鬼使神差开始擦手，擦了两下感觉有点不对，顿了顿才想起来是要擦屁股……</p><p>虽然说病情是在好转，但是最近这两天的抗原结果我属实没看明白。第六天测的时候是弱阳性，第七天突然强阳，缓冲液刚滴进去，T 那条就红了，然后第八天呢，又变成非常弱的阳性，缓冲液滴进去 15 分钟之后都得仔细盯才能看到及其不明显的一条杠。难道说，病毒也在跟我玩回光返照么？</p><table><thead><tr><th>第六天</th><th>第七天</th><th>第八天</th></tr></thead><tbody><tr><td><img data-src="https://bn02pap001files.storage.live.com/y4m7IztWVFellz1Ya9Ks7gSssT7zlO6stwOnAgj9ryG913-sjpdRQ8ZJFnNZQ2xSMLiazfAHa-_NEurjAA3yVDv4r5D9krDXRZ02t6H-fSFfxOyyD7Nch6JjQEjN_X4jvdARUXBY10ubWndM_u0VW0hQEvHrvCup3AU_hF-5R6A3W7sliVUF__vPb5lOdQO7wKy?width=371&amp;height=660&amp;cropmode=none"></td><td><img data-src="https://bn02pap001files.storage.live.com/y4mYIGOT7g2N4NcFCf2tDmeNE6shFZdC7evo-MoQAoms9Dn5rGB2rWyiW1UXzFPLr3ogMwYLpw8MOmfCCtTgNJOIV4Fv5w8IfUFY3e0606zp5fkp1UUHY_l9KtFIHOJfkpieRGrRJU9LsDcgiWy4u9wJluLWCJjucRuKUXOKzWOYavsbareDegQaCPojL3NI3yM?width=371&amp;height=660&amp;cropmode=none"></td><td><img data-src="https://bn02pap001files.storage.live.com/y4mXdA7L2ny1fjGqETOFcZKI2pXOYC6pTz9O7Pd-Im8tlc0kdNeF7oVoCxqOPb6oeUYfYE4PpwLgQ2Bj8a4uQf4kvjfunqe-lGhmNd6aSoayxcNZINfqyvvvteKGBCR-pYe2n0rNkcIhRAL6M3dkMZjaCI7hvROmzbrtZARHfh8oI63byZ6f8IOIw8J0k5Xx4pe?width=371&amp;height=660&amp;cropmode=none"></td></tr></tbody></table><p>咳嗽倒还是那样，每天还是有十来次咳痰，后面还有一点干咳。看网上的说法，这算是长新冠症状的一种？</p><p>然后就是最恶心的症状 – 嗓子吞刀片，这几天就还是该怎么疼就怎么疼，一天下来可能某个时间段稍微好点，但过一会好像又加重。拿手机给自己的嗓子眼拍了张特写，发现咽部有网状白色，而且扁桃腺也肿的厉害，盲猜是诱发咽炎和扁桃腺炎了。照片…… 我想想还是不贴出来了吧，血盆大口也不是那么好看。</p><h2 id="第九天-第十二天"><a href="#第九天-第十二天" class="headerlink" title="第九天 ~ 第十二天"></a>第九天～第十二天</h2><p>第九天往后开始没啥大变化，依旧是偶尔咳痰，以及嗓子干痛。问了药房大夫，说吃点消炎药控制咽痛就行，正好我有点蒲地兰消炎片，照着说明书就开始吃。第十一天早上醒来，突然就发现嗓子不疼了，我也懒得再看嗓子眼里面是啥样，盲猜咽炎和扁桃肿大都应该是没了。咳痰依旧偶尔有一点，打算等有时间了去医院再做个检查，顺便照个肺部 CT，看看肺子有没有受影响。</p><p>第十一天又测了个抗原，已经完全看不到 T 的那条杠，看来新冠病毒是已经没有了，剩下的症状大概就是所谓的长新冠？</p><p><img data-src="https://bn02pap001files.storage.live.com/y4m1FZzo_p7Gsi-ZzZqjwicWEyrQq-ICE1HX_aQKkPMsNe5L89wUEj9UvSnWWAHjpwmKSN_ipdFFaS-TjV4aObT5MfPb43OY29wnLnu8Hm_yhTDlmkY80JiSMJZmTo9xJvEHsxihns5iysc10_I6C815vwZGAwatP9KWQPwQ0xTmlbZj9z6lYtW0m0xYKoWioXx?width=371&amp;height=660&amp;cropmode=none"></p><p>而且这几天虽然精力恢复了不少，但还是很困，早上不想起，迷迷糊糊能一直睡到中午，吃过午饭就眼皮发沉又想睡觉。</p><h2 id="其他查到的信息"><a href="#其他查到的信息" class="headerlink" title="其他查到的信息"></a>其他查到的信息</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9lLmR4eS5jbi93aXNkb20vZnJvbnQvemhpaHVpaGFvLzEzNzk=">布洛芬和对乙酰氨基酚 你可能不知道的事<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/recoding-my-life/">生活记录</category>
      
      
      <category domain="https://www.boris1993.com/tags/%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E/">新冠肺炎</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%A5%A5%E5%AF%86%E5%85%8B%E6%88%8E/">奥密克戎</category>
      
      <category domain="https://www.boris1993.com/tags/Omicron/">Omicron</category>
      
      
      <comments>https://www.boris1993.com/recording-my-infection-of-corona.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>二手 MicroServer Gen8 折腾记</title>
      <link>https://www.boris1993.com/setting-up-microserver-gen8.html</link>
      <guid>https://www.boris1993.com/setting-up-microserver-gen8.html</guid>
      <pubDate>Sun, 18 Dec 2022 19:01:45 GMT</pubDate>
      
      <description>&lt;p&gt;上个月冲动消费，入手了一台 HPE ProLiant MicroServer Gen8。其实我早想搞一台正经的服务器来玩了，因为群晖的魔改 Linux 总是玩的不那么爽。现在心愿实现，开始折腾。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>上个月冲动消费，入手了一台 HPE ProLiant MicroServer Gen8。其实我早想搞一台正经的服务器来玩了，因为群晖的魔改 Linux 总是玩的不那么爽。现在心愿实现，开始折腾。</p><span id="more"></span><h2 id="重置iLO"><a href="#重置iLO" class="headerlink" title="重置iLO"></a>重置 iLO</h2><p>到手之后，我发现我把事想简单了，服务器一般只给一个 VGA 口，而这台也不例外，然而，我这里没有一个能接 VGA 口的设备。是的，你没看错。不止显示器没有 VGA 口，连电视也没有。遂果断下单了一个 VGA 到 HDMI 转接器。第二天收到快递，兴冲冲的接上，却发现只能显示 POST 画面，之后无论是正常继续启动，还是进 RBSU（ROM based setup utility），电视上都是无信号。事到如此，接显示器这条路算是堵死了。别问我为什么不买个支持 VGA 的显示器，你自己想想这成本划得来么？</p><p>虽然接显示器不行，但是天无绝人之路啊，地球人都知道，正经服务器上都有一个带外管理系统，Gen 8 也不例外，带有惠普的 iLO（Integrated Lights-out）带外管理模块。iLO 的地址在 POST 界面左下角有显示，</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mqoh9KX_EvO-_zK6RXa5mBvTr2Y4o_qEol3rVfXy6yPZ0FD0_UYVzbEbSiLSngI4dqdPIDpfaZR-n0GDa-Wxnw64D-CPNF5bwi7aIRw8RA5sbnJRLjW3u7fTv3LLp5iILHCw1mM7Y0_CZq77fkpKdVMClUPJqB2nSWL2Uanp3V06q-wSJz57jWtefq0RDRGZj?width=242&amp;height=167&amp;cropmode=none"></p><p>但是这个地址跟我的网络不在一个网段啊？没办法，拎出来一台带网口的笔记本电脑，把电脑跟 iLO 直连，给电脑配置静态 IP 为 <code>10.132.190.34</code>，子网掩码 <code>255.0.0.0</code>，试一试，果然能 ping 通，问题解决。开玩笑，哥们可是网络工程专业的。</p><p>接下来就要重置 iLO，省得因为上任机主的配置引出什么别的麻烦。但是问题又出现了，不知道什么原因，iLO 的网页不是打不开，就是报错 <code>Connection with iLO cannot be established</code>。一顿上网冲浪之后，发现还可以用 SSH 连接，果断掏出 <code>putty</code>，好在上任没改 iLO 的默认管理员密码，不然我就真的抓瞎了。</p><p>登进去之后，反手就是一个 <code>Reset /map1</code> 来重置 iLO 的所有配置，过了一会 iLO 重启完毕，再次 SSH 登录，把 DHCP 打开，这样我就能给 iLO 分配一个我的内网的地址了。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;/&gt;hpiLO-&gt; cd /map1/dhcpendpt1</span><br><span class="line"></span><br><span class="line">status=0</span><br><span class="line">status_tag=COMMAND COMPLETED</span><br><span class="line">Tue Dec 20 15:13:47 2022</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/map1/dhcpendpt1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/map1/dhcpendpt1&gt;hpiLO-&gt; set EnabledState=yes</span><br><span class="line"></span><br><span class="line">status=0</span><br><span class="line">status_tag=COMMAND COMPLETED</span><br><span class="line">Tue Dec 20 15:14:28 2022</span><br><span class="line"></span><br><span class="line">Network settings change applied.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Settings change applied, iLO 4 will now be reset.</span><br><span class="line">Logged Out: It may take several minutes before you can log back in.</span><br><span class="line"></span><br><span class="line">CLI session stopped</span><br></pre></td></tr></tbody></table></figure><p>然后 iLO 会自动重启，过几分钟重启完成之后，就能在路由器里面看到 iLO 分配的地址了。</p><h2 id="更新iLO固件"><a href="#更新iLO固件" class="headerlink" title="更新iLO固件"></a>更新 iLO 固件</h2><p>上面一顿操作重置 iLO 之后，很神奇地，iLO 的 web 端能正常打开了。那么接下来，我就要升级 iLO 固件的版本，因为自带的 iLO 版本太低，反正自己用着玩，用新不用旧。</p><p>到<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmhwZS5jb20vY29ubmVjdC9zL3Byb2R1Y3Q/bGFuZ3VhZ2U9ZW5fVVMma21wbW9pZD0xMDA5MTQzODUzJnRhYj1kcml2ZXJzQW5kU29mdHdhcmUjdD1Ecml2ZXJzYW5kU29mdHdhcmU="> HPE Integrated Lights-Out 4 (iLO 4)<i class="fa fa-external-link-alt"></i></span>这里进入 <code>Online ROM Flash Component for Windows x64 - HPE Integrated Lights-Out 4</code> 下载最新的 iLO 4 固件。目前最新版是 <code>2.81</code>。下载好安装程序之后，打开运行，选择 <code>Extract</code> 把安装包解压缩到一个地方。<code>Install</code> 是不能用的，因为只能在服务器上才能自动安装。解压后可以看到一个叫 <code>ilo4_281.bin</code> 的文件，这个就是 iLO 的固件。</p><p>进入 iLO 控制台的 <code>Administration -&gt; Firmware</code> 页面，<code>File</code> 里面选择 <code>ilo4_281.bin</code> 这个文件。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mEPrwJVtS4chVC9o-Nby06DcHRydHTg18hCaMz9uOQCBbe9WbBRW93RtHOxuhk4SdkIW4QtRZ_ep2rZ_kGrOvdCBm1UrD38ds4JjCu0q1JjZfMnBmfpeobgFiOQyISblL3Lzhv1M5JTF0Rv91wpaUQHUDqZmWaMlIwWWHUaHyBUn1KYVMxOMI1RQJvcFliqWD?width=1038&amp;height=733&amp;cropmode=none"></p><p>然后点 <code>Upload</code>，静等固件上传和更新完成即可。期间不要刷新页面或者关掉页面内的进度条弹窗，地球人都知道，刷机期间手贱就是找事。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mwwKwQJTYXytd8h4bSp_b8urrY_tOzwx9Kj9c_t7O8--V6Fo_XVnc7ol2zhrXTbviY-zAoIHHIs19kY05adB65NjaoN_qmNI7wvyYrEsT2oB0rknZ57UzH0g6Z35WOExe_3DUWp7by0wvQfq88g5dSP-3nVnHI_fkvDu3Knq9EAct5EhfrjNRaZOakzgcQ3O6?width=1038&amp;height=733&amp;cropmode=none"></p><h2 id="修复iLO降级"><a href="#修复iLO降级" class="headerlink" title="修复iLO降级"></a>修复 iLO 降级</h2><p>iLO 重启之后，我看到一条报错说 <code>iLO Self-Test reports a problem with: Embedded Flash/SD-CARD</code>，在网上一顿冲浪之后，说可以尝试在 <code>Diagnostics</code> 页面里 Reset iLO 来修复。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mt11qaL1hUQVWvG3oVu3SX2o8kav-0_PFMkjELRZHWcqmuAF93RLPFwCuIvkvZn2iWikw4LdWevru_kwOaFC9z70siunFN0cMfzTpqkJzz4DrLBW9k9M_b5HSHHpK2Er-z_4yVM6E63uXjH_1MO_NGMm5ijTqqEwDWai8DDC5nNrqRHmu0VWW9My-dXGgDyWF?width=1719&amp;height=538&amp;cropmode=none"></p><p>但是我在 Reset 之后，问题依旧存在，按照网上的说法来看，应该是硬件有问题，要更换板载 Flash 了。</p><h2 id="配置RAID"><a href="#配置RAID" class="headerlink" title="配置RAID"></a>配置 RAID</h2><blockquote><p>这一部分因为不方便复现，故使用<span class="exturl" data-url="aHR0cHM6Ly93d3cuZW9vbC5uZXQvP3A9NjU="> HP MicroServer Gen8 不疼使用教程 - Eddie’s Blog<i class="fa fa-external-link-alt"></i></span>的文章配图用作参考。向 Eddie 表示由衷的感谢！</p></blockquote><p>我在 3 和 4 盘位插了两块 1TB 的固态硬盘，1 和 2 盘位暂时空下来。这么做的原因是，1 和 2 盘位是 SATA-3，3 和 4 盘位是 SATA-2，所以我打算把更快的接口留给日后拓展更大容量的机械硬盘，而固态硬盘本身读写速度就很快，插在一个慢点的接口上也不会造成很大的性能问题。</p><p>插硬盘之前要先关机，因为 Gen 8 的硬盘位是不支持热插拔的。插好硬盘后开机，在 POST 界面出现 <code>HP Dynamic Smart Array B120i</code> 的初始化信息时敲 F5 来进入 RAID 配置页面。这里可以多敲几次来保证成功率，就像进 BIOS 敲 del 那样。如果进入成功，就会看到一个写着 HP 的大球，这时候系统正在加载 RAID 卡的配置界面。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mkcpDtOtKU0DbaC-Tkn1cgrQfqpxWvCNTFl-ITdjeFKlXvlCx7_P7YUnM20OgSmYhqdacjJ3hI5QniuSzFkn6yF8B_y4R3LihrneZYb9UfBg6jpBkqHPdp0JxJERoUVRvNmr4g3GgJIgwFJ4RpJlZtOcuVfPg7Rq4J9BJDSyYMklMqivaONVUZNtjQkQX2tHh?width=750&amp;height=551&amp;cropmode=none"></p><p>进来之后，就可以点 <code>Dynamic Smart Array B120i RAID</code> 页面的 <code>Configure</code> 按钮来配置 RAID 了。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mMomyaUTiIKYGDPS3nEIxiEt6EMVKQ8f0UeGiQ_U9Ad68uONhXjG7eASnLeryXT3hgvED72HABXSIkORtEQXeGp50tDaHnL-FQ9HN_n_QYzpKzKlTXx-twPSG6iLgNWT8ZeuGrRa86Kcsl8OjwUXS_cO55yMUaiTCC1r8f9Ikw57SMvPukfQ33b17fRTtCZFN?width=750&amp;height=412&amp;cropmode=none"></p><h2 id="装ESXi"><a href="#装ESXi" class="headerlink" title="装ESXi"></a>装 ESXi</h2><p>前面洋洋洒洒整了一大堆，但那都是前置任务。到这一步开始主线，装系统。Gen 8 主板上带了一个 TF 卡槽和一个 USB 2.0 接口。起初我打算把 ESXi 装在 TF 卡里面的，但是试了一张之前用过的老卡，安装慢的令人发指，又试了一张几个月前买的卡，结果 ESXi 安装程序发现不了，怀疑是系统没识别。我懒得折腾卡了，遂拿出一个闲置的 U 盘，插在了主板的 USB 口上。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mTFefdMmvB0ewsT0Qe_LkMu0rX_oG4F18mR8ZoCmROtHupCIWpReH__OnotZhnxBCh6z_1V6xfhdN4VViTFd8PPjrWkxL5jpanAvCnWO_DHOhsyKct4smeTxiDriSLPAGUKSm6Fejwn_xuuA2D7dMIv_NeUTQH6RFGpxEXE6qk1m7DWtM3QQZHTkOi-8UHgy1?width=2365&amp;height=1330&amp;cropmode=none"></p><p>至于 ESXi 系统，我选择了惠普定制的版本，毕竟不知道 VMWare 官方版跟定制版差别在哪，还不如直接选厂商定制的版本来的方便。镜像可以到<span class="exturl" data-url="aHR0cHM6Ly9jdXN0b21lcmNvbm5lY3Qudm13YXJlLmNvbS9kb3dubG9hZHMvZGV0YWlscz9kb3dubG9hZEdyb3VwPU9FTS1FU1hJNjVVMi1IUEUmcHJvZHVjdElkPTYxNA==">这里<i class="fa fa-external-link-alt"></i></span>下载，记得要选 <code>Pre-Gen9 Custom Image</code>。下载好 Install CD 之后，进入 iLO 的远程控制台，HTML5 的就行，<br>然后点击标题栏的光盘按钮，选 <code>CD/DVD - Local *.iso file</code>，就可以把 ESXi 的安装盘插进服务器的虚拟光驱。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mekuH7sP_2xy3uapbEPDgUvkBU0iwQIgzetoEiZGg85LzsUdff9pHQia4m2npTMOpBOwFS7y_39SqB77VaeGrh10bqhy3AEgI-GFwybJLxLW5fnRYX1zu_TygXJUsNwEScCF5ZbYavpNo0HiP6nTmrXkADnI_oz3qICNzlLxmAKp-57aFVDuf-9QxiO5-tN0G?width=461&amp;height=198&amp;cropmode=none"></p><p>打开服务器电源之后，就会正常从光盘启动进入 ESXi 的安装程序。安装步骤很简单，这里就不再赘述了，唯一要注意的就是选对安装位置，因为安装程序会把一整块盘当作系统盘，所以我个人建议把它装在 TF 卡或者 U 盘里。也不用担心 TF 卡或者 U 盘会降低系统性能，我这里实测没有什么明显难忍的性能问题。</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>装完 ESXi 不代表着结束，而代表着折腾之路才刚刚开始。我的计划是将这台机器打造成一个 <del>all in boom</del>all in one 的家庭计算中心和数据中心，而计划的第一步是先配置好软路由。但是因为电信师傅被疫情影响了工作进度，还不知道哪天才能来帮我改光猫桥接。所以我暂且放一个未完待续在这。后续计划的实施我会尽快在这里更新。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mtOCRNkLk0OewU_7ZO4p0C14cqVkSYyeKx0aBZc83ylumDBA89xk5xF1rOLl-jpgnhS26yPiqJnA3lezTYEs84Pen-Bc5CPGQayAATLpKUVhFG0-A33Ao36Q_TASLxqG76OyePlD5bx97-1ae6fqvUU3nrYkrZxzGurls69q-Regvp_wcesIKJmJZ4aYqslaf?width=600&amp;height=338&amp;cropmode=none"></p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/Gen8/">Gen8</category>
      
      
      <comments>https://www.boris1993.com/setting-up-microserver-gen8.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Servlet 和 Spring MVC 是不是线程安全的</title>
      <link>https://www.boris1993.com/are-servlet-and-spring-mvc-thread-safe.html</link>
      <guid>https://www.boris1993.com/are-servlet-and-spring-mvc-thread-safe.html</guid>
      <pubDate>Wed, 14 Dec 2022 06:01:16 GMT</pubDate>
      
      <description>&lt;p&gt;太长不看：默认情况下 &lt;code&gt;servlet&lt;/code&gt; 不是线程安全的；&lt;code&gt;Spring bean&lt;/code&gt; 是否线程安全取决于这个 bean 的 scope。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>太长不看：默认情况下 <code>servlet</code> 不是线程安全的；<code>Spring bean</code> 是否线程安全取决于这个 bean 的 scope。</p><span id="more"></span><h2 id="Servlet为什么不是线程安全的"><a href="#Servlet为什么不是线程安全的" class="headerlink" title="Servlet为什么不是线程安全的"></a>Servlet 为什么不是线程安全的</h2><p>单个 servlet 实例中的方法会被多个线程同时调用很多次，而 servlet 类中的变量是引用传递，多个线程同时存取某个变量时，就会产生线程安全问题。</p><p>以下方法可以让 servlet 或其中的一部分代码块变成线程安全的：</p><ul><li>使用 <code>syncronized</code> 关键字。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span> <span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        <span class="comment">//pre-processing</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) {</span><br><span class="line">            <span class="comment">//code in this block is thread-safe</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//other processing;</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>使用 <code>SingleThreadModel</code> 类</li></ul><p>如果在 <code>Sun Java System Web Server 7.0</code> 中部署单线程 servlet 时，servlet 引擎会创建一个 servlet 实例池，并保持内存中有多个 servlet 实例的副本。要想调整实例池中的实例数量，可以调整 Web Server 中的 <code>singleThreadedServletPoolSize</code> 属性。这种情况下，服务器的性能可能会降低，如果池中的所有实例全部被占用，那么新到来的请求就必须要在队列中等待某个实例被释放。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> <span class="keyword">implements</span> <span class="title class_">SingleThreadModel</span> {</span><br><span class="line">    <span class="comment">//servlet methods...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Spring-Bean什么时候是线程安全的，什么时候不是"><a href="#Spring-Bean什么时候是线程安全的，什么时候不是" class="headerlink" title="Spring Bean什么时候是线程安全的，什么时候不是"></a>Spring Bean 什么时候是线程安全的，什么时候不是</h2><p>首先，<code>singleton</code> 的 bean 不是线程安全的。在不使用 <code>@Lazy</code> 注解时，框架会在启动时就初始化好 singleton bean。但是框架不会管理开发人员怎么用这些 singleton bean，换言之，开发人员要自己处理线程安全问题。</p><p>而被 <code>@RequestScope</code> 注解标记的 bean 是线程安全的，因为这些 bean 不会在线程之间共享，而是在每次请求到来时都会创建新的实例。</p><p>Session scope 的 bean 也不是线程安全的，因为这些 bean 会与用户的会话绑定，每有一个新用户发来请求，就会创建一个新的 bean。但是，用户发来的请求可能是并行的，所以也有可能产生线程安全问题。</p><p>Prototype bean 是不是线程安全取决于它与哪种 bean 绑定。如果它是被一个 singleton bean 所依赖，因为 singleton bean 不是线程安全的，这个 prototype bean 也将被多个线程访问，所以此时 prototype bean 不是线程安全的；如果它被一个 request scope 的 bean 所依赖，那么这个 prototype bean 就是线程安全的，因为它会随着 request scoped bean 消亡而消亡，同时不会被多个线程共享。</p><p>除此之外，如果一个 bean 是无状态的，那么无论是什么 scope，它都是线程安全的。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vY2QvRTE5MTQ2LTAxLzgxOS0yNjM0L2FieGJoL2luZGV4Lmh0bWw=">Handling Threading Issues<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2RvbHN6ZXdza2kuY29tL3NwcmluZy9zcHJpbmctYmVhbi10aHJlYWQtc2FmZXR5LWd1aWRlLw==">Spring bean thread safety guide<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/">多线程</category>
      
      <category domain="https://www.boris1993.com/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/">线程安全</category>
      
      
      <comments>https://www.boris1993.com/are-servlet-and-spring-mvc-thread-safe.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java 的线程安全，以及死锁</title>
      <link>https://www.boris1993.com/java-thread-security-deadlock.html</link>
      <guid>https://www.boris1993.com/java-thread-security-deadlock.html</guid>
      <pubDate>Wed, 14 Dec 2022 05:24:48 GMT</pubDate>
      
      <description>&lt;p&gt;刚才面试的时候被问到了关于线程安全和死锁的问题，有点露怯，故赶紧查漏补缺，记录于此。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>刚才面试的时候被问到了关于线程安全和死锁的问题，有点露怯，故赶紧查漏补缺，记录于此。</p><span id="more"></span><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><blockquote><p>线程安全是程序设计中的术语，指某个函数、函数库在多线程环境中被调用时，能够正确地处理多个线程之间的公用变量，使程序功能正确完成。</p></blockquote><h2 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h2><ul><li>乐观锁：认为在使用数据时，不会有别的线程修改数据，所以不会加锁，只在更新时判断之前有没有被别的线程更新了数据。比如在数据库中设置一个 <code>version</code> 字段，在更新前先查询该字段的值，然后在写入时比较数据库中的值是否与之前查询到的值相同。</li><li>悲观锁：认为自己在使用数据的时候，一定有别的线程来修改数据，因此在获取数据的时候先加锁，确保数据不会被线程修改。</li></ul><h2 id="如何保证线程安全"><a href="#如何保证线程安全" class="headerlink" title="如何保证线程安全"></a>如何保证线程安全</h2><ul><li><code>syncronized</code> 关键字，举例：<code>ConcurrentHashMap</code>。是悲观锁。<ul><li>锁升级机制：<blockquote><p>它是指在锁对象的对象头里面有一个 <code>threadid</code> 字段，在第一次访问的时候 <code>threadid</code> 为空，JVM 让其持有偏向锁，并将 <code>threadid</code> 设置为其线程 ID，再次进入的时候会先判断 <code>threadid</code> 是否与其线程 ID 一致，如果一致则可以直接使用此对象，如果不一致，则升级偏向锁为轻量级锁，通过自旋循环一定次数来获取锁，执行一定次数之后，如果还没有正常获取到要使用的对象，此时就会把锁从轻量级升级为重量级锁，此过程就构成了 <code>synchronized</code> 锁的升级。</p></blockquote><ul><li>偏向锁（无锁）：大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得。偏向锁的目的是在某个线程获得锁之后（线程的 id 会记录在对象的 <code>Mark Word</code> 中），消除这个线程锁重入（CAS）的开销，看起来让这个线程得到了偏护。</li><li>轻量级锁（CAS）：就是由偏向锁升级来的，偏向锁运行在一个线程进入同步块的情况下，当第二个线程加入锁争用的时候，偏向锁就会升级为轻量级锁；轻量级锁的意图是在没有多线程竞争的情况下，通过 CAS 操作尝试将 <code>Mark Word</code> 更新为指向 <code>LockRecord</code> 的指针，减少了使用重量级锁的系统互斥量产生的性能消耗。</li><li>重量级锁：虚拟机使用 CAS 操作尝试将 <code>MarkWord</code> 更新为指向 <code>LockRecord</code> 的指针，如果更新成功表示线程就拥有该对象的锁；如果失败，会检查 <code>MarkWord</code> 是否指向当前线程的栈帧，如果是，表示当前线程已经拥有这个锁；如果不是，说明这个锁被其他线程抢占，此时膨胀为重量级锁。</li></ul></li></ul></li><li><code>Lock</code> 接口的实现类，常用 <code>ReentrantLock</code>。是悲观锁。<code>lock()</code> 加锁，<code>unlock()</code> 解锁，不解锁会造成死锁。<ul><li>等待可中断：当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情，可中断特性对处理执行时间非常长的同步块很有帮助。</li><li>公平锁：多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；而非公平锁则不保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。<code>synchronized</code> 中的锁是非公平的，<code>ReentrantLock</code> 默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁。</li><li>锁绑定多个条件：一个 <code>ReentrantLock</code> 对象可以同时绑定多个 <code>Condition</code> 对象，而在 <code>synchronized</code> 中，锁对象的 <code>wait()</code> 和 <code>notify()</code> 或 <code>notifyAll()</code> 方法可以实现一个隐含的条件，如果要和多于一个的条件关联的时候，就不得不额外地添加一个锁，而 <code>ReentrantLock</code> 则无须这样做，只需要多次调用 <code>newCondition()</code> 方法即可。</li></ul></li><li><code>ThreadLocal</code>。当多个线程操作同一个变量且互不干扰的场景下，可以使用 <code>ThreadLocal</code> 来解决。它会在每个线程中对该变量创建一个副本，即每个线程内部都会有一个该变量，且在线程内部任何地方都可以使用，线程之间互不影响，这样一来就不存在线程安全问题，也不会严重影响程序执行性能。<ul><li><code>ThreadLocal</code> 线程容器保存变量时，底层其实是通过 <code>ThreadLocalMap</code> 来实现的。它是以当前 <code>ThreadLocal</code> 变量为 key，要存的变量为 value。获取的时候就是以当前 <code>ThreadLocal</code> 变量去找到对应的 key，然后获取到对应的值。</li></ul></li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><blockquote><p>两个或两个以上的线程持有不同系统资源的锁，线程彼此都等待获取对方的锁来完成自己的任务，但是没有让出自己持有的锁，线程就会无休止等待下去。线程竞争的资源可以是：锁、网络连接、通知事件，磁盘、带宽，以及一切可以被称作 “资源” 的东西。</p></blockquote><h2 id="检测死锁"><a href="#检测死锁" class="headerlink" title="检测死锁"></a>检测死锁</h2><p>可以使用 <code>jstack</code> 检查死锁。</p><p>命令：<code>jstack $(jps -l | grep 'DeadLockExample' | cut -f1 -d ' ')</code>。</p><p>示例输出：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Java stack information for the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line">"Thread-1":</span><br><span class="line">    at DeadLockExample$2.run(DeadLockExample.java:58)</span><br><span class="line">    - waiting to lock &lt;0x000000076ab660a0&gt; (a java.lang.Object)</span><br><span class="line">    - locked &lt;0x000000076ab660b0&gt; (a java.lang.Object)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">"Thread-0":</span><br><span class="line">    at DeadLockExample$1.run(DeadLockExample.java:28)</span><br><span class="line">    - waiting to lock &lt;0x000000076ab660b0&gt; (a java.lang.Object)</span><br><span class="line">    - locked &lt;0x000000076ab660a0&gt; (a java.lang.Object)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br></pre></td></tr></tbody></table></figure><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><ul><li>以确定的顺序获锁</li><li>超时放弃</li><li>死锁检测</li><li>尽量降低锁的使用粒度</li><li>尽量使用同步代码块，而不是同步方法</li><li>避免嵌套锁</li><li>专锁专用</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzODMyMDY3MA==">4 种解决线程安全问题的方式<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aWhlbmdjYXQuZ2l0aHViLmlvLzIwMTkvMDgvMDkvamF2YS10dXRvcmlhbC1mb3ItbGFuZ3VhZ2UtYWRhdmFuY2VkLWRlYWRsb2NrLWV4YW1wbGUtYW5kLXNvbHV0aW9uLw==">Java 高级教程系列 - 死锁示例及解决<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjI5NjY5L2FydGljbGUvZGV0YWlscy8xMDg1NTIzMzE=">Java 多线程开发中避免死锁的八种方法<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/">多线程</category>
      
      <category domain="https://www.boris1993.com/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/">线程安全</category>
      
      <category domain="https://www.boris1993.com/tags/%E6%AD%BB%E9%94%81/">死锁</category>
      
      
      <comments>https://www.boris1993.com/java-thread-security-deadlock.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Filter 与 interceptor 的区别</title>
      <link>https://www.boris1993.com/filter-vs-interceptor.html</link>
      <guid>https://www.boris1993.com/filter-vs-interceptor.html</guid>
      <pubDate>Tue, 13 Dec 2022 07:36:21 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Filter&quot;&gt;&lt;a href=&quot;#Filter&quot; class=&quot;headerlink&quot; title=&quot;Filter&quot;&gt;&lt;/a&gt;Filter&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 是 &lt;code&gt;Servlet&lt;/code&gt; 规范制定的，受 &lt;code&gt;Servlet&lt;/code&gt; 容器支持，接口定义在 &lt;code&gt;javax.servlet&lt;/code&gt; 包中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 是被 Web Server（如 &lt;code&gt;Tomcat&lt;/code&gt;）调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 需要在 &lt;code&gt;web.xml&lt;/code&gt; 中定义之后才会起作用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 只在请求的前后起作用，&lt;code&gt;Servlet&lt;/code&gt; 对于 &lt;code&gt;Filter&lt;/code&gt; 来说是一个黑盒。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 的执行顺序是：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void init(FilterConfig)&lt;/code&gt; - 容器在初始化 &lt;code&gt;Filter&lt;/code&gt; 时调用，在 &lt;code&gt;Filter&lt;/code&gt; 生命周期内仅会被调用一次。方法可以抛出 &lt;code&gt;ServletException&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doFilter(ServletRequest, ServletResponse, FilterChain)&lt;/code&gt; - Web 容器每一次请求都会调用该方法。该方法将容器的请求和响应作为参数传递进来， &lt;code&gt;FilterChain&lt;/code&gt; 用来调用下一个 &lt;code&gt;Filter&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void destroy()&lt;/code&gt; - 当容器销毁 Filter 实例时调用该方法，可以在方法中销毁资源，该方法在 Filter 的生命周期只会被调用一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Interceptor&quot;&gt;&lt;a href=&quot;#Interceptor&quot; class=&quot;headerlink&quot; title=&quot;Interceptor&quot;&gt;&lt;/a&gt;Interceptor&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Interceptor&lt;/code&gt; 是 &lt;code&gt;Spring&lt;/code&gt; 容器内的，由 &lt;code&gt;Spring&lt;/code&gt; 框架提供支持。接口 &lt;code&gt;HandlerInterceptor&lt;/code&gt; 定义在 &lt;code&gt;org.springframework.web.servlet&lt;/code&gt; 包中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interceptor&lt;/code&gt; 是被 &lt;code&gt;Spring&lt;/code&gt; 调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interceptor&lt;/code&gt; 可以深入到方法前后、异常抛出前后等，比起 &lt;code&gt;Filter&lt;/code&gt; 有更大的弹性。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interceptor&lt;/code&gt; 还允许用户介入请求的生命周期，可以在请求过程中获取信息，通常与请求更加耦合。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interceptor&lt;/code&gt; 的执行顺序是：&lt;ul&gt;
&lt;li&gt;请求到达 &lt;code&gt;DispatcherServlet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt; 将请求发送至 &lt;code&gt;Interceptor&lt;/code&gt;，&lt;code&gt;Interceptor&lt;/code&gt; 执行 &lt;code&gt;preHandle()&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;请求到达 &lt;code&gt;Controller&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;请求结束后，&lt;code&gt;Interceptor&lt;/code&gt; 执行 &lt;code&gt;postHandle()&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><ul><li><code>Filter</code> 是 <code>Servlet</code> 规范制定的，受 <code>Servlet</code> 容器支持，接口定义在 <code>javax.servlet</code> 包中。</li><li><code>Filter</code> 是被 Web Server（如 <code>Tomcat</code>）调用。</li><li><code>Filter</code> 需要在 <code>web.xml</code> 中定义之后才会起作用。</li><li><code>Filter</code> 只在请求的前后起作用，<code>Servlet</code> 对于 <code>Filter</code> 来说是一个黑盒。</li><li><code>Filter</code> 的执行顺序是：<ul><li><code>void init(FilterConfig)</code> - 容器在初始化 <code>Filter</code> 时调用，在 <code>Filter</code> 生命周期内仅会被调用一次。方法可以抛出 <code>ServletException</code>。</li><li><code>doFilter(ServletRequest, ServletResponse, FilterChain)</code> - Web 容器每一次请求都会调用该方法。该方法将容器的请求和响应作为参数传递进来， <code>FilterChain</code> 用来调用下一个 <code>Filter</code>。</li><li><code>void destroy()</code> - 当容器销毁 Filter 实例时调用该方法，可以在方法中销毁资源，该方法在 Filter 的生命周期只会被调用一次。</li></ul></li></ul><h2 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h2><ul><li><code>Interceptor</code> 是 <code>Spring</code> 容器内的，由 <code>Spring</code> 框架提供支持。接口 <code>HandlerInterceptor</code> 定义在 <code>org.springframework.web.servlet</code> 包中。</li><li><code>Interceptor</code> 是被 <code>Spring</code> 调用。</li><li><code>Interceptor</code> 可以深入到方法前后、异常抛出前后等，比起 <code>Filter</code> 有更大的弹性。</li><li><code>Interceptor</code> 还允许用户介入请求的生命周期，可以在请求过程中获取信息，通常与请求更加耦合。</li><li><code>Interceptor</code> 的执行顺序是：<ul><li>请求到达 <code>DispatcherServlet</code></li><li><code>DispatcherServlet</code> 将请求发送至 <code>Interceptor</code>，<code>Interceptor</code> 执行 <code>preHandle()</code> 方法</li><li>请求到达 <code>Controller</code></li><li>请求结束后，<code>Interceptor</code> 执行 <code>postHandle()</code> 方法</li></ul></li></ul><span id="more"></span><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9laW52ZXJuZS5naXRodWIuaW8vcG9zdC8yMDE3LzA4L3NwcmluZy1pbnRlcmNlcHRvci12cy1maWx0ZXIuaHRtbA==">Spring Interceptor vs Filter 拦截器和过滤器区别<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODI4OTcwNTUzMzU4">Spring Interceptor vs Filter - 掘金<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9lY2xpcHNlLWVlNGouZ2l0aHViLmlvL2plcnNleS5naXRodWIuaW8vZG9jdW1lbnRhdGlvbi9sYXRlc3QvZmlsdGVycy1hbmQtaW50ZXJjZXB0b3JzLmh0bWw=">Chapter 10. Filters and Interceptors - Jersey 2.37 User Guide<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/Servlet/">Servlet</category>
      
      <category domain="https://www.boris1993.com/tags/Spring-MVC/">Spring MVC</category>
      
      <category domain="https://www.boris1993.com/tags/Filter/">Filter</category>
      
      <category domain="https://www.boris1993.com/tags/Interceptor/">Interceptor</category>
      
      
      <comments>https://www.boris1993.com/filter-vs-interceptor.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 Tailscale 部署虚拟局域网</title>
      <link>https://www.boris1993.com/setting-up-tailscale.html</link>
      <guid>https://www.boris1993.com/setting-up-tailscale.html</guid>
      <pubDate>Mon, 24 Oct 2022 02:16:39 GMT</pubDate>
      
      <description>&lt;p&gt;最近折腾了下用 Tailscale 搭建虚拟局域网，在这里记录一下折腾的过程和一些心得。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>最近折腾了下用 Tailscale 搭建虚拟局域网，在这里记录一下折腾的过程和一些心得。</p><span id="more"></span><h2 id="什么是Tailscale"><a href="#什么是Tailscale" class="headerlink" title="什么是Tailscale"></a>什么是 Tailscale</h2><p>说起 Tailscale，就不得不提到最近很火的 Mesh VPN 这个概念。</p><p>经典的 VPN 是作为一个网关，让外网用户通过它来访问内网。比如传统的 L2TP VPN：</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mxJygAC6Sf_ZWFDW3UiiiskgVx8HPV3QiysgnQssDo1l1_XTHo2BtHl_RKywA_UXTQ0GIFQBfovfRfXxkB1goh5G_cFGOA_rCNT4IcuzOquY_W-YgXGg_HIr5YHiK9y8E-BtowMJX6nYI64PnziVU7NQJMHvbCNb6VM2T1l_lLazjTnUYsM0rKXmyBj1t8B02?width=6794&amp;height=4674&amp;cropmode=none"></p><p>但是 Mesh VPN 提出了一种全新的拓扑结构，这种结构中每个节点之间都相互连接，不再存在中心的 VPN 服务器。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mn-qliUcavLgr7DxNbuFPvtqBbJX7b69vg4pWQZABjx2BobJrAaeHnqaB1KgQh2U6Ao7cdlAc6PPXiccAS6nXt4JesKlRsiwDm_Lsh8-8esUD-wJ0P-31TyEuyyK7pXApOwBSRIm4AMPUrLz0GAJE5F9tGaeST3qgP2C-H1QBsiYprq2ngXsocdFsPsXY6zjK?width=722&amp;height=574&amp;cropmode=none"></p><p>上图提到的 <code>Wireguard</code> 就是一个 Mesh VPN 的实现，但是 <code>Wireguard</code> 配置比较繁琐，维护成本也比较高，所以 <code>Tailscale</code> 在基于 <code>Wireguard</code> 的基础上做了一些优化，比如用于 NAT 穿透的 <code>DERP</code> 协议、建立了公网 coordinator 服务器用于下发配置，以及集成了第三方 SSO 用于认证和权限管理。</p><h2 id="如何安装和使用Tailscale"><a href="#如何安装和使用Tailscale" class="headerlink" title="如何安装和使用Tailscale"></a>如何安装和使用 Tailscale</h2><p>安装 Tailscale 很简单（除了国内群晖），跟着官网的<span class="exturl" data-url="aHR0cHM6Ly90YWlsc2NhbGUuY29tL2tiLzEwMTcvaW5zdGFsbC8="> Quickstart<i class="fa fa-external-link-alt"></i></span>走就行了。简单来说就是先在官网注册账号，然后在电脑上安装 Tailscale 并使用相同账号登陆，然后这些机器就处于同一个虚拟局域网上了。</p><p>登陆的时候注意，千万不要用 GitHub 或者 Google 认证，原因我不用说，你懂的。就算电脑上你有办法，手机上也会很闹心。</p><p>在机器成功加入 Tailscale 虚拟局域网后，就可以在 Tailscale 控制面板里面看到这些机器的 IP 地址了。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mDsMbIzsWb7WKzxkchzQLwbYWG8xi3VMfczRAZxw5h9NuVJ6b2mz-HQoM_oZxaEmkLpvHBkw9yggccgQgb52LfIoIn6k5XcyALA37xWoduHO_FwPoTqyAFJ31IEAADm5jMSj7vmFjc0ngh6_-01nx-rRH6FXhBrAeMqXa3YJppU57qcs5J2aB-1JHiShWm74k?width=2880&amp;height=1380&amp;cropmode=none"></p><p>这时候，就可以直接使用这些 IP 地址访问到对应的机器了。</p><h3 id="国内群晖安装Tailscale"><a href="#国内群晖安装Tailscale" class="headerlink" title="国内群晖安装Tailscale"></a>国内群晖安装 Tailscale</h3><p>因为国内群晖的套件商店下架了所有 VPN 相关的套件，所以只能到官网的<span class="exturl" data-url="aHR0cHM6Ly9wa2dzLnRhaWxzY2FsZS5jb20vc3RhYmxlLyNzcGtz"> Tailscale Packages - stable track<i class="fa fa-external-link-alt"></i></span>手动下载对应 DSM 版本的 spk，然后到套件中心手动安装。安装成功后就可以在主菜单中看到 Tailscale 的图标，点击启动并在新页面中使用相同账号登陆，然后就能用了。</p><h2 id="Tailnet和Magic-DNS"><a href="#Tailnet和Magic-DNS" class="headerlink" title="Tailnet和Magic DNS"></a>Tailnet 和 Magic DNS</h2><p>当然 Tailscale 并不仅支持通过 IP 地址访问机器，还可以通过域名访问。这里请放心，Tailnet 的域名解析是通过你本机的 Tailnet 客户端解析的。</p><p>要启用这个功能，首先你需要选择一个 Tailnet 域名。Tailscale 会给你一系列域名让你选，选好之后就会在控制面板的 DNS 页面出现。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4muIwoFgIgoYzIi8VyX1n_y-0n2Jm7JT3Sr_bPU_Km8-RAcJf6YGCnkyh9P8OSgxMEOEoTERVWZUh7nZJhgMBNsg9DWCjTr8o6s_81J7OZzb6X1YkQMhq88oqJZ5BCGOcqhRJWuevar6MIBQvPO8hA7ZS06AwJ1W9Sx5qmC8p2OfGJhjiYq2XDOgs5nOk_6y1v?width=1294&amp;height=456&amp;cropmode=none"></p><p>然后，在 <code>Magic DNS</code> 栏目下面点 <code>Enable Magic DNS</code> 就可以了。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4m_Ae_E3bg9Wo3Sh_b1HC-nzLtWeyDQEAdMIndc0yRc0qdvvLxN3zHZzz7MyFqECdg0q10qZ5SkfV8DDntimVjjYVs07TJEt-a39cD7jqn--8sWrLBrYQoSnnSslRrznSegrjjMLnDBYlruYeOzH4UdLgEAdKKtcLYToVL5NrIlvSeKovm7kfBovubvh6jBHPk?width=1394&amp;height=303&amp;cropmode=none"></p><p>在这之后，就可以直接用控制面板中的设备名，或者<code>设备名.Tailnet域名</code>的方式访问你的设备了。比如我要 SSH 到 <code>ds218plus</code> 这台机器上，我就可以 <code>ssh ds218plus</code> 或 <code>ssh ds218plus.tailnet-a8cf.ts.net</code>。</p><h2 id="访问内网机器很慢"><a href="#访问内网机器很慢" class="headerlink" title="访问内网机器很慢"></a>访问内网机器很慢</h2><p>在我试用了几天之后，我发现了一个问题，如果节点双方都有 IPv6 的话，互联速度很快，但是如果节点一方没有 IPv6 的话，速度就出奇的慢。遂用 <code>tailscale status</code> 命令看了下连接情况，不出意外，看到了这样的返回：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tailscale status</span><br><span class="line">100.98.89.5     macbook-pro          boris1993@   macOS   -</span><br><span class="line">100.88.234.12   boris-iphone         boris1993@   iOS     offline</span><br><span class="line">100.105.198.123 ds218plus            boris1993@   linux   active; relay "sfo", tx 1778904 rx 63968652</span><br></pre></td></tr></tbody></table></figure><p>划重点，<code>relay "sfo"</code>，这说明我连接到 <code>ds218plus</code> 的通信，是经过位于旧金山的 <code>DERP</code> 服务器中转的，所以会慢。</p><p>虽然在<span class="exturl" data-url="aHR0cHM6Ly90YWlsc2NhbGUuY29tL2tiLzEwODIvZmlyZXdhbGwtcG9ydHMv"> What firewall ports should I open to use Tailscale?<i class="fa fa-external-link-alt"></i></span>里面说，</p><blockquote><p>Nearly all of the time, you don’t need to open any firewall ports for Tailscale. Tailscale uses various NAT traversal techniques to safely connect to other Tailscale nodes without manual intervention—it “just works.”</p></blockquote><p>也没错，它确实 work，但是我真的没法说它 work 的 well。好在，文章下面提到，除了 <code>443/tcp</code> 之外，Tailscale 还用到 <code>41641/udp</code> 来让 Wireguard 节点互联，以及 <code>3478/udp</code> 用于 STUN 协议。</p><p>在我的这个使用场景中，<code>ds218plus</code> 作为服务器，那么我就在 <code>ds218plus</code> 所在的网络中做了两件事，给 <code>41641/udp</code> 配置端口转发，并在防火墙上放行这个端口。然后我在作为客户端的 <code>macbook-pro</code> 上执行 <code>tailscale down</code> 和 <code>tailscale up</code> 来重启 Tailscale 连接。这时候再用 <code>tailscale status</code> 命令检查连接情况，发现输出变成了这样：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tailscale status</span><br><span class="line">100.98.89.5     macbook-pro          boris1993@   macOS   -</span><br><span class="line">100.88.234.12   boris-iphone         boris1993@   iOS     offline</span><br><span class="line">100.105.198.123 ds218plus            boris1993@   linux   active; direct 121.70.200.131:41641, tx 5884 rx 8500</span><br></pre></td></tr></tbody></table></figure><p>接着划重点，<code>direct</code>，说明现在节点之间已经是直连了，随便做点什么测试一下，果然快了很多。</p><p>不过端口转发只是权宜之计，毕竟没法同时让 <code>41641/udp</code> 转发给多个机器，只能解决一台机器不能直连的问题。要想彻底解决，还是得用 IPv6。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/Tailscale/">Tailscale</category>
      
      <category domain="https://www.boris1993.com/tags/VPN/">VPN</category>
      
      <category domain="https://www.boris1993.com/tags/Virtual-LAN/">Virtual LAN</category>
      
      <category domain="https://www.boris1993.com/tags/%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/">虚拟局域网</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/">内网穿透</category>
      
      
      <comments>https://www.boris1993.com/setting-up-tailscale.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>记一次抢救被 force push 的 GitHub 仓库</title>
      <link>https://www.boris1993.com/rescuing-my-github-repo-from-force-push.html</link>
      <guid>https://www.boris1993.com/rescuing-my-github-repo-from-force-push.html</guid>
      <pubDate>Mon, 17 Oct 2022 06:06:33 GMT</pubDate>
      
      <description>&lt;p&gt;就在刚刚，我一个误操作，在没有本地备份的前提下，force push 了一个 GitHub 上的仓库。万幸最后恢复成功，数据拿回来了。惊魂未定之余，在此记录我的抢救过程以供参考。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>就在刚刚，我一个误操作，在没有本地备份的前提下，force push 了一个 GitHub 上的仓库。万幸最后恢复成功，数据拿回来了。惊魂未定之余，在此记录我的抢救过程以供参考。</p><span id="more"></span><h2 id="前景提要"><a href="#前景提要" class="headerlink" title="前景提要"></a>前景提要</h2><p>在闲逛 GitHub 的时候，发现了一个叫<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BsYXRhbmUvc25r"> snk<i class="fa fa-external-link-alt"></i></span>的项目，可以在我的 profile readme 里面放个贪吃蛇，遂照着它的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BsYXRhbmUvUGxhdGFuZS9ibG9iL21hc3Rlci8uZ2l0aHViL3dvcmtmbG93cy9tYWluLnltbA=="> example with cron job<i class="fa fa-external-link-alt"></i></span>抄了一个 workflow 过来。但是这里我自作聪明地想着把东西全放在 <code>master</code> 上，就把 38 行的 <code>target_branch</code> 改成了 <code>master</code>。结果一运行吓一跳，我的 <code>README.md</code> 没了，仓库只剩下 <code>snk</code> 生成的 svg 文件。这不行啊，我花了好久的时间才整出来的东西，不能说没就没啊！于是赶紧开始网上冲浪，看怎么抢救被 force push 的 repo。</p><h2 id="恢复过程"><a href="#恢复过程" class="headerlink" title="恢复过程"></a>恢复过程</h2><p>首先我要大力感谢<span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vYWdhcndhbHBhcmFzL2QzNTVhOTUwMTQ4NzAyY2M3YmE4MmFiYzRkMTk0M2Jm">这个 Gist<i class="fa fa-external-link-alt"></i></span>，我就是参考这里的做法成功恢复了这个 repo 的。</p><h3 id="找到上一次commit的记录"><a href="#找到上一次commit的记录" class="headerlink" title="找到上一次commit的记录"></a>找到上一次 commit 的记录</h3><p>首先，要通过 <code>https://api.github.com/repos/:owner/:repo/events</code> 这个 API 找到上次提交的 sha。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">-&gt; % curl -u boris1993 https://api.github.com/repos/boris1993/boris1993/events</span><br><span class="line">Enter host password <span class="keyword">for</span> user <span class="string">'boris1993'</span>:</span><br><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"24633558565"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"PushEvent"</span>,</span><br><span class="line">    <span class="string">"actor"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 4367313,</span><br><span class="line">      <span class="string">"login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"display_login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"gravatar_id"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/users/boris1993"</span>,</span><br><span class="line">      <span class="string">"avatar_url"</span>: <span class="string">"https://avatars.githubusercontent.com/u/4367313?"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"repo"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 297097347,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"boris1993/boris1993"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"payload"</span>: {</span><br><span class="line">      <span class="string">"push_id"</span>: 11349267173,</span><br><span class="line">      <span class="string">"size"</span>: 1,</span><br><span class="line">      <span class="string">"distinct_size"</span>: 1,</span><br><span class="line">      <span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br><span class="line">      <span class="string">"head"</span>: <span class="string">"98364ce80ec5bbcdb6dc6f8d2239de2256ede487"</span>,</span><br><span class="line">      <span class="string">"before"</span>: <span class="string">"32276fc643c6b34fee48f46363cfb6a44327cbe4"</span>,</span><br><span class="line">      <span class="string">"commits"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"sha"</span>: <span class="string">"98364ce80ec5bbcdb6dc6f8d2239de2256ede487"</span>,</span><br><span class="line">          <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"41898282+github-actions[bot]@users.noreply.github.com"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"github-actions[bot]"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"message"</span>: <span class="string">"Deploy to GitHub pages"</span>,</span><br><span class="line">          <span class="string">"distinct"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993/commits/98364ce80ec5bbcdb6dc6f8d2239de2256ede487"</span></span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"public"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"created_at"</span>: <span class="string">"2022-10-17T05:44:11Z"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"24633554175"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"PushEvent"</span>,</span><br><span class="line">    <span class="string">"actor"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 4367313,</span><br><span class="line">      <span class="string">"login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"display_login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"gravatar_id"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/users/boris1993"</span>,</span><br><span class="line">      <span class="string">"avatar_url"</span>: <span class="string">"https://avatars.githubusercontent.com/u/4367313?"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"repo"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 297097347,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"boris1993/boris1993"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"payload"</span>: {</span><br><span class="line">      <span class="string">"push_id"</span>: 11349264873,</span><br><span class="line">      <span class="string">"size"</span>: 1,</span><br><span class="line">      <span class="string">"distinct_size"</span>: 1,</span><br><span class="line">      <span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br><span class="line">      <span class="string">"head"</span>: <span class="string">"32276fc643c6b34fee48f46363cfb6a44327cbe4"</span>,</span><br><span class="line">      <span class="string">"before"</span>: <span class="string">"b0ab0263c0693122ae8069c95526e13b7336483f"</span>,</span><br><span class="line">      <span class="string">"commits"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"sha"</span>: <span class="string">"32276fc643c6b34fee48f46363cfb6a44327cbe4"</span>,</span><br><span class="line">          <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"boris1993@live.cn"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Boris Zhao"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"message"</span>: <span class="string">"Create generate_snake_animation.yml"</span>,</span><br><span class="line">          <span class="string">"distinct"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993/commits/32276fc643c6b34fee48f46363cfb6a44327cbe4"</span></span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"public"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"created_at"</span>: <span class="string">"2022-10-17T05:43:50Z"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"23024411036"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"PushEvent"</span>,</span><br><span class="line">    <span class="string">"actor"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 4367313,</span><br><span class="line">      <span class="string">"login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"display_login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"gravatar_id"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/users/boris1993"</span>,</span><br><span class="line">      <span class="string">"avatar_url"</span>: <span class="string">"https://avatars.githubusercontent.com/u/4367313?"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"repo"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 297097347,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"boris1993/boris1993"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"payload"</span>: {</span><br><span class="line">      <span class="string">"push_id"</span>: 10514884570,</span><br><span class="line">      <span class="string">"size"</span>: 1,</span><br><span class="line">      <span class="string">"distinct_size"</span>: 1,</span><br><span class="line">      <span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br><span class="line">      <span class="string">"head"</span>: <span class="string">"b0ab0263c0693122ae8069c95526e13b7336483f"</span>,</span><br><span class="line">      <span class="string">"before"</span>: <span class="string">"660e4d3896eb523d703464f89112a2eea07ee309"</span>,</span><br><span class="line">      <span class="string">"commits"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"sha"</span>: <span class="string">"b0ab0263c0693122ae8069c95526e13b7336483f"</span>,</span><br><span class="line">          <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"boris1993@live.cn"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Boris Zhao"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"message"</span>: <span class="string">"Update README.md"</span>,</span><br><span class="line">          <span class="string">"distinct"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993/commits/b0ab0263c0693122ae8069c95526e13b7336483f"</span></span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"public"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"created_at"</span>: <span class="string">"2022-07-22T08:05:06Z"</span></span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>从接口的返回可以看到，截至现在一共有三次 push，仓库被覆盖就是发生在最上面的一次 push 中，而接下来的一个就是我添加 workflow 的那一次 push。</p><h3 id="从上一次的push记录中找回数据"><a href="#从上一次的push记录中找回数据" class="headerlink" title="从上一次的push记录中找回数据"></a>从上一次的 push 记录中找回数据</h3><p>找到 push 记录，那么就好办了。点击添加 workflow 那次 push 中的 <code>url</code>，在浏览器中会打开一个新页面，返回的 JSON 中是这次 push 的详细信息。这里我们要找的是 <code>html_url</code> 这个字段。点开这个字段里面的链接，会进入 GitHub 里面，看到这次 commit 的 diff。然后点击 <code>Browse files</code> 按钮，就能看到当时的文件了。这时候还等什么？赶紧下载啊！文件少的话复制内容回来就行，文件多的话，点开 <code>Code</code> 按钮，<code>Download ZIP</code> 就好啦。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mUHGqsZS-DOY7n369khEGH2agbXnq0bx3w6Oz2YoZHweZ9ptM3bMWltDg7MfPv3Vrip1E2M2YfZjdRhuhO5ESrz7pr94z2QXUrFwC7utxDki_4axu4pdUSv-RxroJJ_pUxjZ3nfa4yTFw5g0jHoJTX87TiqAp6eceM7qOLZ6O2UIJ89mEWLFs7lkcQHaykotn?width=1704&amp;height=412&amp;cropmode=none" alt="Files at that commit"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>一定要做备份啊！</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/GitHub/">GitHub</category>
      
      <category domain="https://www.boris1993.com/tags/git/">git</category>
      
      <category domain="https://www.boris1993.com/tags/force-push/">force push</category>
      
      <category domain="https://www.boris1993.com/tags/%E6%81%A2%E5%A4%8DGitHub%E4%BB%93%E5%BA%93/">恢复GitHub仓库</category>
      
      
      <comments>https://www.boris1993.com/rescuing-my-github-repo-from-force-push.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>简单理解 NTP v3 协议</title>
      <link>https://www.boris1993.com/understanding-ntp-protocol.html</link>
      <guid>https://www.boris1993.com/understanding-ntp-protocol.html</guid>
      <pubDate>Wed, 07 Sep 2022 07:40:00 GMT</pubDate>
      
      <description>&lt;p&gt;前段时间瞎折腾，给自己的黑莓 Bold 9900 写了个通过 NTP 同步时间的小工具，顺便在这里记录一下我在实现一个 NTP 客户端时对这个协议的理解。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前段时间瞎折腾，给自己的黑莓 Bold 9900 写了个通过 NTP 同步时间的小工具，顺便在这里记录一下我在实现一个 NTP 客户端时对这个协议的理解。</p><span id="more"></span><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>NTP 协议使用 UDP 作为传输层协议，服务器监听 UDP 端口 123，在收到有效的报文后，服务器会发送响应报文，否则服务器将直接忽略不做响应。</p><h2 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h2><p>NTP 协议使用三种时间格式。</p><h3 id="NTP短时间格式"><a href="#NTP短时间格式" class="headerlink" title="NTP短时间格式"></a>NTP 短时间格式</h3><p>短时间格式长度为 32 位，其中高 16 位代表从 NTP 时间戳 0 秒至现在的秒数，低 16 位代表 1 秒以内的分数部分。<br>这个格式只会在 NTP 报文的 delay 和 dispersion 字段中用到。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|          Seconds              |           Fraction            |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></tbody></table></figure><h3 id="NTP时间戳"><a href="#NTP时间戳" class="headerlink" title="NTP时间戳"></a>NTP 时间戳</h3><p>NTP 时间戳格式长度为 64 位，其中高 32 位代表从 NTP 时间戳 0 秒至现在的秒数，低 32 位代表 1 秒以内的分数部分。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                            Seconds                            |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                            Fraction                           |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></tbody></table></figure><h3 id="NTP日期格式"><a href="#NTP日期格式" class="headerlink" title="NTP日期格式"></a>NTP 日期格式</h3><p>NTP 日期格式长度为 128 位，其中高 32 位用来表示 NTP 时间纪元，然后用 32 位表示从当前纪元开始经过的秒数，最后用 64 位表示 1 秒以内的分数部分。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                           Era Number                          |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                           Era Offset                          |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                                                               |</span><br><span class="line">|                           Fraction                            |</span><br><span class="line">|                                                               |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></tbody></table></figure><h2 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h2><p>一个 NTP v3 的报文必须包含如下字段：</p><ul><li><code>LI</code> - Leap Indicator，2 bit 整型数，指示当月最后一分钟是否包含闰秒</li><li><code>VN</code> - Version Number，3 bit 整型数，指示 NTP 协议的版本号。如 NTP v3 就是 3。</li><li><code>MODE</code> - 3 bit 整型数，指示发包方的工作模式。通常来说客户端使用 3 (client) 请求时间，服务端使用 4 (server) 返回时间。</li><li><code>STRATUM</code> - 8 bit 整型数，代表 NTP 层数。0 代表时钟源，如装备有 GPS 接收机的主服务器；1-15 逐层作为下游服务器，16 被定义为 “无法同步”。</li><li><code>POLL</code> - 8 bit 有符号整型数，代表在间隔多少秒后再进行下一次同步。值由 <code>log2(second)</code> 计算得出。</li><li><code>PRECISION</code> - 8 bit 有符号整型数，代表系统时钟的精确度。</li><li><code>ROOT DELAY</code> - NTP 短时间格式，指示从客户端到根服务器 (stratum 1 的服务器) 的延迟。</li><li><code>ROOT DISPERSION</code> - NTP 短时间格式，指示数据从根服务器到客户端之间可能引入的误差。</li><li><code>REFERENCE ID</code> - 32 bit 代码，用于标识一个特定的服务器，或一个参考时钟。<ul><li>对于 stratum 0 的数据包，该字段为 4 个 ASCII 字符，称作 “kiss code”，用于调试和监控。</li><li>对于 stratum 1 的数据包，该字段为参考时钟的标识符。标识符由 IANA 维护，此外以 “X” 开头的标识符都被预留给未注册的试验和开发用途。</li><li>对于 stratum 2~15 的数据包，该字段为服务器的标识符。当服务器使用 IPv4 时，该字段为服务器的 IP 地址；当服务器使用 IPv6 时，该字段为 IPv6 地址的前四段。</li></ul></li><li><code>REFERENCE TIMESTAMP</code> - NTP 时间戳格式，内容为客户端最后同步的时间。</li><li><code>ORIGIN TIMESTAMP</code> - NTP 时间格式，内容为数据包离开客户端的时间。</li><li><code>RECEIVE TIMESTAMP</code> - NTP 时间格式，内容为数据包抵达服务器的时间。</li><li><code>TRANSMIT TIMESTAMP</code> - NTP 时间格式，内容为数据包离开服务器的时间。</li><li><code>DESTINATION TIMESTAMP</code> - NTP 时间格式，内容为数据包抵达客户端的时间。<ul><li>注：DESTINATION TIMESTAMP 并不会包含在数据包中，而是在客户端收到数据包之后，它的数值才会被确定。</li></ul></li></ul><p>那么全部组合起来，就是这个样子的：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> 0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|LI | VN  |Mode |    Stratum     |     Poll      |  Precision   |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                         Root Delay                            |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                         Root Dispersion                       |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                          Reference ID                         |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                                                               |</span><br><span class="line">+                     Reference Timestamp (64)                  +</span><br><span class="line">|                                                               |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                                                               |</span><br><span class="line">+                      Origin Timestamp (64)                    +</span><br><span class="line">|                                                               |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                                                               |</span><br><span class="line">+                      Receive Timestamp (64)                   +</span><br><span class="line">|                                                               |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                                                               |</span><br><span class="line">+                      Transmit Timestamp (64)                  +</span><br><span class="line">|                                                               |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></tbody></table></figure><p>然而上述字段并不需要全部填写数据，实际上除了 LI、VN、MODE、STRATUM 之外，剩下的所有字段都可以填零。如下就是一个我用来测试的数据包：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HEX:</span><br><span class="line">DB 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></tbody></table></figure><p>拆开来看的话：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BIN:</span><br><span class="line">LI = 0b11 = 3 unknown (clock unsyncronized)</span><br><span class="line">VN = 0b011 = 3</span><br><span class="line">MODE = 0b011 = 3 client</span><br><span class="line">STRATUM = 0b00010000 = 16</span><br><span class="line">POLL = 0b00000000 = 0</span><br><span class="line">PRECISION = 0b00000000 = 0</span><br><span class="line">ROOT DELAY = 0b00000000000000000000000000000000</span><br><span class="line">ROOT DISPERSION = 0b00000000000000000000000000000000</span><br><span class="line">REFERENCE ID = 00000000000000000000000000000000</span><br><span class="line">REFERENCE TIMESTAMP = 00000000000000000000000000000000 00000000000000000000000000000000</span><br><span class="line">ORIGIN TIMESTAMP = 00000000000000000000000000000000 00000000000000000000000000000000</span><br><span class="line">RECEIVE TIMESTAMP = 00000000000000000000000000000000 00000000000000000000000000000000</span><br><span class="line">TRANSMIT TIMESTAMP = 00000000000000000000000000000000 00000000000000000000000000000000</span><br></pre></td></tr></tbody></table></figure><h2 id="计算second和fraction"><a href="#计算second和fraction" class="headerlink" title="计算second和fraction"></a>计算 second 和 fraction</h2><p>计算 second 很简单，取出 timestamp 的高 32 位就可以了；但是从 fraction 计算毫秒数比较麻烦，需要通过 <code>fraction * 10^6 / 2^32</code> 计算得到毫秒数。</p><p>这里我给出一个 Java 的代码片段：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">seconds</span> <span class="operator">=</span> (ntpTimestamp &gt;&gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFFL</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">secondsInMilliseconds</span> <span class="operator">=</span> seconds * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">fractionInTimestamp</span> <span class="operator">=</span> (ntpTimestamp &amp; <span class="number">0xFFFFFFFFL</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">milliseconds</span> <span class="operator">=</span> fractionInTimestamp * Math.pow(<span class="number">10</span>, <span class="number">6</span>) / Math.pow(<span class="number">2</span>, <span class="number">32</span>);</span><br></pre></td></tr></tbody></table></figure><p>然后计算 1900 年 1 月 1 日 00:00:00 的 UNIX 时间戳作为基准 UNIX 时间戳，再加上 <code>secondsInMilliseconds</code> 和 <code>milliseconds</code>，就可以得到 NTP 返回的当前时间了。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzU5MDU=">Network Time Protocol Version 4: Protocol and Algorithms Specification - RFC<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamFubmV0LmhrL25ldHdvcmstdGltZS1wcm90b2NvbC1udHAtemgtaGFucy8=">Network Time Protocol (NTP) 网络时间协定 - Jan Ho 的网络世界<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm1laW5iZXJnZ2xvYmFsLmNvbS8yMDIxLzAyLzI1L3RoZS1yb290LW9mLWFsbC10aW1pbmctdW5kZXJzdGFuZGluZy1yb290LWRlbGF5LWFuZC1yb290LWRpc3BlcnNpb24taW4tbnRwLw==">The Root of All Timing: Understanding root delay and root dispersion in NTP<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3Rob21wc29ubmcuYmxvZ3Nwb3QuY29tLzIwMTAvMDQvbnRwLXRpbWVzdGFtcF8yMS5odG1s">NTP Timestamp - Thompson’s Technological Insight<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly90aWNrZWx0b24uZ2l0bGFiLmlvL2FydGljbGVzL250cC10aW1lc3RhbXBzLw==">A Very Short Introduction to NTP Timestamps<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9ibGFja2JlcnJ5X3RpbWVfc3luY19udHAvYmxvYi9lYmMyMTE2YmM4ZGEzMDkwZTlhZGI2OGZlOTEzMmRjNDdmMzc1ODkzL3NyYy9jb20vYm9yaXMxOTkzL3RpbWVzeW5jbnRwL3V0aWxzL050cFBhY2tldFV0aWxzLmphdmEjTDMyLUw1Ng==">NtpPacketUtils#getNtpTimestampMilliseconds - blackberry_time_sync_ntp - GitHub<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/NTP/">NTP</category>
      
      
      <comments>https://www.boris1993.com/understanding-ntp-protocol.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关闭 IPv6 或调整 IPv6 优先级以解决微软模拟飞行更新下载过慢的问题</title>
      <link>https://www.boris1993.com/fixing-downloading-too-slow-msfs-2020.html</link>
      <guid>https://www.boris1993.com/fixing-downloading-too-slow-msfs-2020.html</guid>
      <pubDate>Sun, 05 Dec 2021 13:26:12 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;太长不看：关闭 IPv6 或许可以解决。如果你平时要用到 IPv6，那就在更新之前先禁用 IPv6，更新完了再打开；如果开不开 IPv6 对你来说没区别的话，那永久关闭也不是不可以。当然如果你愿意，下文提到的改注册表的方案也是可用的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;这两天在给微软模拟飞行下载更新的时候，就算挂着网易 UU，速度也一直很慢，时常在 0.5MB/s~5MB/s 之间波动，不论怎么换节点也不能跑出正常的速度。今天经过一顿上网冲浪，发现这个问题的根源，在 IPv6。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;其实网上针对这个问题已经有一些解决方案了，但内容看下来都一样，不外乎教你怎么关掉 IPv6。但我一方面要用到 IPv6，另一方面也不想那么粗暴的解决问题，所以又稍微做了点研究，顺便写了个小工具方便其他有这个问题的玩家。&lt;/del&gt; 经过一段时间的试用后发现，临时 / 永久关闭 IPv6 实际上是最优雅的方案……&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>太长不看：关闭 IPv6 或许可以解决。如果你平时要用到 IPv6，那就在更新之前先禁用 IPv6，更新完了再打开；如果开不开 IPv6 对你来说没区别的话，那永久关闭也不是不可以。当然如果你愿意，下文提到的改注册表的方案也是可用的。</p></blockquote><hr><p>这两天在给微软模拟飞行下载更新的时候，就算挂着网易 UU，速度也一直很慢，时常在 0.5MB/s~5MB/s 之间波动，不论怎么换节点也不能跑出正常的速度。今天经过一顿上网冲浪，发现这个问题的根源，在 IPv6。</p><p><del>其实网上针对这个问题已经有一些解决方案了，但内容看下来都一样，不外乎教你怎么关掉 IPv6。但我一方面要用到 IPv6，另一方面也不想那么粗暴的解决问题，所以又稍微做了点研究，顺便写了个小工具方便其他有这个问题的玩家。</del> 经过一段时间的试用后发现，临时 / 永久关闭 IPv6 实际上是最优雅的方案……</p><span id="more"></span><p>起先为了测试，我先禁用了 IPv6，然后开启网易 UU 并开始更新微软模拟飞行，结果很符合预期，下载速度达到了 150MB/s，那么可以确定，IPv6 就是这个问题的元凶。</p><p>解决这个问题的突破点，在微软的这篇文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vdHJvdWJsZXNob290L3dpbmRvd3Mtc2VydmVyL25ldHdvcmtpbmcvY29uZmlndXJlLWlwdjYtaW4td2luZG93cw==">为高级用户配置 Windows IPv6 的指南<i class="fa fa-external-link-alt"></i></span>，里面提到我可以设定首选 IPv4 还是 IPv6，于是我就在保留 IPv6 启动的同时，看了眼注册表里 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters</code> 路径下的 <code>DisabledComponents</code> 这个键，它的值转换成二进制是 <code>0000 1000</code>，也就是说，目前我是首选使用 IPv6 进行连接的。</p><p>那么，根据文档中的计算方法，我把第 5 个位改成了 1，也就是改成了 <code>0010 1000</code>，然后重启电脑，再挂上加速器并开始更新，这次果然速度也提升到了 150MB/s，说明这个修改有效了。</p><p>顺便我又到<span class="exturl" data-url="aHR0cHM6Ly90ZXN0LWlwdjYuY29tLw=="> https://test-ipv6.com/<i class="fa fa-external-link-alt"></i></span>测试了一下，结果是<code>你已经有 IPv6 地址了，但你的浏览器不太愿意用</code>，那么可以确定，我现在仍然可以使用 IPv6，但默认情况下系统将优先使用 IPv4。</p><p>考虑到其他玩家可能也有类似的困扰，我顺手写了一个小工具来做这件事，代码开源在 GitHub。你们可以到<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9pcHY2X3ByZWZlcmVuY2VfdG9nZ2xlci9yZWxlYXNlcy9sYXRlc3Q="> Releases<i class="fa fa-external-link-alt"></i></span>下载我编译好的版本。如果你访问 GitHub 有困难，也可以到<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vYm9yaXMxOTkzL2lwdjZfcHJlZmVyZW5jZV90b2dnbGVyL3JlbGVhc2Vz"> GitEE 的发行版<i class="fa fa-external-link-alt"></i></span>中下载，它们是一样的。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/%E5%BE%AE%E8%BD%AF%E6%A8%A1%E6%8B%9F%E9%A3%9E%E8%A1%8C/">微软模拟飞行</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%BE%AE%E8%BD%AF%E6%A8%A1%E6%8B%9F%E9%A3%9E%E8%A1%8C%E6%9B%B4%E6%96%B0%E6%85%A2/">微软模拟飞行更新慢</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%BE%AE%E8%BD%AF%E6%A8%A1%E6%8B%9F%E9%A3%9E%E8%A1%8C%E4%B8%8B%E8%BD%BD%E6%85%A2/">微软模拟飞行下载慢</category>
      
      
      <comments>https://www.boris1993.com/fixing-downloading-too-slow-msfs-2020.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java 8 的一个 SNI 的 bug</title>
      <link>https://www.boris1993.com/java-8-sni-bug.html</link>
      <guid>https://www.boris1993.com/java-8-sni-bug.html</guid>
      <pubDate>Wed, 24 Nov 2021 09:17:22 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;联动&lt;a href=&quot;/tools/nginx/resolving-nginx-sni-issue.html&quot;&gt;上一篇博文&lt;/a&gt;，在解决了 OpenResty 上那个 SNI 的问题之后，我们发现有一个 Java 应用也有类似的问题。而最后发现，这是因为我们当前版本的 J</description>
        
      
      
      
      <content:encoded><![CDATA[<p>联动<a href="/tools/nginx/resolving-nginx-sni-issue.html">上一篇博文</a>，在解决了 OpenResty 上那个 SNI 的问题之后，我们发现有一个 Java 应用也有类似的问题。而最后发现，这是因为我们当前版本的 Java 中有一个 bug……</p><p>简单来说，就是在 <code>Java 1.8u141</code> 之前，<code>HttpsURLConnection#setDefaultHostnameVerifier()</code> 方法会破坏 SNI，而正好我们的代码里有这么一行：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -&gt; <span class="literal">true</span>);</span><br></pre></td></tr></tbody></table></figure><p>翻了下框架的代码，发现如果我不设定这个值，框架也调用这个方法来指定它默认的 hostname verifier；而如果我传个 null，那么它会抛个异常给我。所以，代码层面没有很方便的解决方案。</p><p>无奈，最后决定，先临时换了个没开启 SNI 的域名，暂时解决掉问题，然后升级 Java 到 <code>1.8u181</code>，一劳永逸。</p><hr><p>终于，我也有机会理直气壮地喊出 “这是 Java 的 bug” 了！（笑</p><p>[^1]: <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzA4MTc5MzQvZXh0ZW5kZWQtc2VydmVyLW5hbWUtc25pLWV4dGVuc2lvbi1ub3Qtc2VudC13aXRoLWpkazEtOC0wLWJ1dC1zZW5kLXdpdGgtamRrMS03">Extended server_name (SNI Extension) not sent with jdk1.8.0 but send with jdk1.7.0<i class="fa fa-external-link-alt"></i></span><br>[^2]: <span class="exturl" data-url="aHR0cHM6Ly9idWdzLm9wZW5qZGsuamF2YS5uZXQvYnJvd3NlL0pESy04MDcyNDY0">Custom HostnameVerifier disables SNI support on client in Java 8<i class="fa fa-external-link-alt"></i></span></p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java-8/">Java 8</category>
      
      <category domain="https://www.boris1993.com/tags/bug/">bug</category>
      
      <category domain="https://www.boris1993.com/tags/SNI/">SNI</category>
      
      
      <comments>https://www.boris1993.com/java-8-sni-bug.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>记一次修复生产环境中 nginx 出现的 SNI 相关的问题</title>
      <link>https://www.boris1993.com/resolving-nginx-sni-issue.html</link>
      <guid>https://www.boris1993.com/resolving-nginx-sni-issue.html</guid>
      <pubDate>Sun, 21 Nov 2021 15:41:56 GMT</pubDate>
      
      <description>&lt;p&gt;前段时间，我司出现了一次生产事故，调查后发现是当时的 OpenResty 配置不兼容 SNI 导致的。在这里我也记录一下整件事的排查过程，以及解决方法，供遇到类似问题的同志们参考。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前段时间，我司出现了一次生产事故，调查后发现是当时的 OpenResty 配置不兼容 SNI 导致的。在这里我也记录一下整件事的排查过程，以及解决方法，供遇到类似问题的同志们参考。</p><span id="more"></span><h1 id="事故症状"><a href="#事故症状" class="headerlink" title="事故症状"></a>事故症状</h1><p>某天开始，我司的 OpenResty 日志中大量出现 SSL 握手失败的错误，并影响了正常的业务。查看 OpenResty 日志，看到有大量这样子的报错：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2021/10/19 20:51:30 [warn] 16776#16776: *1110324 upstream server temporarily disabled while SSL handshaking to upstream, client: [MASKED], server: localhost, request: "GET /endpoint/to/the/api?query=param HTTP/1.1", upstream: "https://MASKED:443/endpoint/to/the/api?query=param", host: "MASKED"</span><br><span class="line"></span><br><span class="line">2021/10/19 20:51:30 [error] 16776#16776: *1110324 SSL_do_handshake() failed (SSL: error:14094438:SSL routines:ssl3_read_bytes:tlsv1 alert internal error:SSL alert number 80) while SSL handshaking to upstream, client: MASKED, server: localhost, request: "GET /endpoint/to/the/api?query=param HTTP/1.1", upstream: "https://MASKED:443/endpoint/to/the/api?query=param", host: "MASKED"</span><br></pre></td></tr></tbody></table></figure><h1 id="调查中的弯路"><a href="#调查中的弯路" class="headerlink" title="调查中的弯路"></a>调查中的弯路</h1><p>知道了是 SSL 握手失败导致的问题，那么当然接下来就开始调查为什么会握手失败。是解析配置出错？还是证书出现问题？</p><p>按照一直的经验，我决定先用 <code>nslookup</code> 检查一下 DNS 解析。因为保密和时间问题，我就不把 <code>nslookup</code> 的输出放在这里了。简而言之，再出现问题之前，我司的域名都是通过 <code>CNAME</code> 记录解析到 Akamai 的 Edge 节点上的，但现在，却直接用 <code>A</code> 记录解析到了一个 IP 上，这让我感觉很奇怪。同时，我为了确认，又用 <code>openssl</code> 命令连接了一下解析出来的 IP，看它会返回什么证书信息，可出乎意料，啥也没有。</p><p>我感觉不对劲，于是联系了 NetOps 组。这时候，NetOps 点出了这篇博文的主题，SNI。</p><p>他说，给 <code>openssl</code> 命令加一个 <code>-servername</code> 参数，把目标服务器的域名放上去。我一试，好使了，Akamai 返回了正确的证书信息。</p><p>那么问题来了，解析没问题，那就是我有问题了。但问题出在哪呢？</p><h1 id="SNI是什么"><a href="#SNI是什么" class="headerlink" title="SNI是什么"></a>SNI 是什么</h1><p>在继续之前，我想先简单介绍一下，什么是 SNI。</p><p>根据维基百科 <a href="%5B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8D%E7%A7%B0%E6%8C%87%E7%A4%BA%5D(https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8D%E7%A7%B0%E6%8C%87%E7%A4%BA)">^1</a> 中的说法：</p><blockquote><p>基于名称的虚拟主机允许多个 DNS 主机名由同一 IP 地址上的单个服务器（通常为 Web 服务器）托管。为了实现这一点，服务器使用客户端提供的主机名作为协议的一部分（对于 HTTP，名称显示在主机头中）。但是，当使用 HTTPS 时，TLS 握手发生在服务器看到任何 HTTP 头之前。因此，服务器不可能使用 HTTP 主机头中的信息来决定呈现哪个证书，并且因此只有由同一证书覆盖的名称才能由同一 IP 地址提供。<br>……<br>实际上，这意味着对于安全浏览来说，HTTPS 服务器只能是每个 IP 地址服务一个域名（或一组域名）。为每个站点分配单独的 IP 地址会增加托管成本，因为对 IP 地址的请求必须为区域互联网注册机构提供证据而且现在 IPv4 地址已用尽。<br>……<br>客户端在 SNI 扩展中发送要连接的主机名称，作为 TLS 协商的一部分。这使服务器能够提前选择正确的主机名称，并向浏览器提供相应 TLS 证书。从而，具有单个 IP 地址的服务器可以在获取公共证书不现实的情况下提供一组域名的 TLS 连接。</p></blockquote><p>也就是说，在握手的时候，我需要预先提供我要访问的网站的域名，这样服务器才会把正确的证书返回给我。而上面说的 <code>openssl</code> 命令中的 <code>-servername</code> 参数就是做了这件事。</p><h1 id="无心插柳，柳暗花明"><a href="#无心插柳，柳暗花明" class="headerlink" title="无心插柳，柳暗花明"></a>无心插柳，柳暗花明</h1><p>就在我拿着各种关键词 Google 的时候，一篇文章 [^2] 引起了我的注意。</p><p>文章里描述的问题也是在 OpenResty 中出现了 SSL 握手失败，同样作者也在 <code>proxy_pass</code> 中用了 <code>upstream</code>。作者做了一个测试，如果在 <code>proxy_pass</code> 中直接写上游的域名，就没有问题，但是一旦用 <code>upstream</code>，就会出现握手失败。那么问题一定出现在 <code>upstream</code> 导致的某种行为变化。</p><p>然后作者发现，在用域名的时候，OpenResty 的变量 <code>$proxy_host</code> 存放的就是域名，可在用 <code>upstream</code> 的时候，这里面就变成了那个 <code>upstream</code> 的名字。</p><p>看到这，我知道了，这应该就是我这个问题的解决方案。</p><h1 id="动手解决问题"><a href="#动手解决问题" class="headerlink" title="动手解决问题"></a>动手解决问题</h1><p>首先我先展示一下修复前的 OpenResty 的一部分配置：</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /path/to/endpoint {</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/proxy.common;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host api.<span class="variable">$DOMAIN_FOR_GCP</span>.com;</span><br><span class="line">    <span class="attribute">proxy_pass</span> https://gcp-https/path/to/the/endpoint/on/server;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可见，如果按照这个配置，那么我发给 Akamai 的域名就是 <code>gcp-https</code>，而不是正确的 <code>api.mycompany.com</code>。</p><p>所以，根据那篇文章，以及参照 OpenResty 的手册 [^3]，我在配置中增加了一条 <code>proxy_ssl_name</code> 指令，并将其配置为实际的后端服务的域名。</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /path/to/endpoint {</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/proxy.common;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host api.<span class="variable">$DOMAIN_FOR_GCP</span>.com;</span><br><span class="line">    <span class="comment"># THIS ONE</span></span><br><span class="line">    <span class="attribute">proxy_ssl_name</span> api.<span class="variable">$DOMAIN_FOR_GCP</span>.com;</span><br><span class="line">    <span class="attribute">proxy_pass</span> https://gcp-https/path/to/the/endpoint/on/server;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可部署新配置之后，问题并未解决，SSL 握手失败的问题依旧存在。</p><p>然后我注意到，那篇文章中还出现了一个指令 <code>proxy_ssl_server_name on;</code>。莫非，我们的 OpenResty 里面干脆没启用 SNI 支持？</p><p>在终端里 dump 了一下当前的配置，果然没有显式指定 <code>proxy_ssl_server_name</code> 的值，而默认情况下这个是被关闭的 [^4]。那好办，我在 OpenResty 的全局配置中把它打开就好了。</p><p>然后再次部署测试，发现再没有 SSL 握手失败的问题，测试环境中业务也恢复了正常。火速打包上线生产环境，事故解决。</p><p>[^2]: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGFpbHl0YXNrLmNvL3Rhc2svc3NsLWVycm9yMTQwOTQ0Mzhzc2wtcm91dGluZXNzc2wzcmVhZGJ5dGVzdGxzdjEtYWxlcnQtaW50ZXJuYWwtZXJyb3Jzc2wtYWxlcnQtbnVtYmVyLTgwLWFobWVkLXppZGFu">SSL: error:14094438:SSL routines:ssl3_read_bytes:tlsv1 alert internal error:SSL alert number 80<i class="fa fa-external-link-alt"></i></span><br>[^3]: <span class="exturl" data-url="aHR0cDovL25naW54Lm9yZy9lbi9kb2NzL2h0dHAvbmd4X2h0dHBfcHJveHlfbW9kdWxlLmh0bWwjcHJveHlfc3NsX25hbWU=">proxy_ssl_name - Module ngx_http_proxy_module<i class="fa fa-external-link-alt"></i></span><br>[^4]: <span class="exturl" data-url="aHR0cDovL25naW54Lm9yZy9lbi9kb2NzL2h0dHAvbmd4X2h0dHBfcHJveHlfbW9kdWxlLmh0bWwjcHJveHlfc3NsX3NlcnZlcl9uYW1l">proxy_ssl_server_name - Module ngx_http_proxy_module<i class="fa fa-external-link-alt"></i></span></p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/SNI/">SNI</category>
      
      <category domain="https://www.boris1993.com/tags/nginx/">nginx</category>
      
      <category domain="https://www.boris1993.com/tags/OpenResty/">OpenResty</category>
      
      
      <comments>https://www.boris1993.com/resolving-nginx-sni-issue.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>在群晖的 Docker 环境中运行甜糖星愿服务</title>
      <link>https://www.boris1993.com/run-tiantang-on-synology-docker.html</link>
      <guid>https://www.boris1993.com/run-tiantang-on-synology-docker.html</guid>
      <pubDate>Mon, 04 Jan 2021 14:14:48 GMT</pubDate>
      
      <description>&lt;p&gt;前段时间在网上看到了一个叫 “甜糖星愿计划” 的东西，声称可以通过贡献闲置带宽来获得积分。正好我有个 NAS，正好我的宽带一天从白天闲到黑夜，不如利用起来，少少挣一些零花钱。&lt;/p&gt;
&lt;p&gt;需要注意的一点是，本文提到的镜像仅在我的&lt;code&gt;群晖DS218+&lt;/code&gt; 上测试过，虽然镜像中未使用任何群晖限定的依赖，理论上适用于任何 x86 架构的平台，但并不保证运行效果。而且本文目标平台是 x86，如果你拥有 ARM 平台的机器，那根本不需要废这个劲，你可以直接运行甜糖星愿的可执行程序。&lt;/p&gt;
&lt;p&gt;本文提到的操作全部基于 Docker，故在按照本文操作前，请先确保你已经拥有足够的知识来使用 &lt;code&gt;Docker&lt;/code&gt; 和 &lt;code&gt;docker-compose&lt;/code&gt;。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前段时间在网上看到了一个叫 “甜糖星愿计划” 的东西，声称可以通过贡献闲置带宽来获得积分。正好我有个 NAS，正好我的宽带一天从白天闲到黑夜，不如利用起来，少少挣一些零花钱。</p><p>需要注意的一点是，本文提到的镜像仅在我的<code>群晖DS218+</code> 上测试过，虽然镜像中未使用任何群晖限定的依赖，理论上适用于任何 x86 架构的平台，但并不保证运行效果。而且本文目标平台是 x86，如果你拥有 ARM 平台的机器，那根本不需要废这个劲，你可以直接运行甜糖星愿的可执行程序。</p><p>本文提到的操作全部基于 Docker，故在按照本文操作前，请先确保你已经拥有足够的知识来使用 <code>Docker</code> 和 <code>docker-compose</code>。</p><span id="more"></span><h2 id="我的网络环境"><a href="#我的网络环境" class="headerlink" title="我的网络环境"></a>我的网络环境</h2><p>因为这个镜像相关的一些配置是以我的网络结构为基础的，所以我觉得有必要简单说一下我的网络结构是什么样的。</p><p>简单来说，我的网络就是这样子的。虽然网络里还有别的设备，但是因为与本文无关，我就略掉了。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[公网] -- [光猫] -- [群晖]</span><br></pre></td></tr></tbody></table></figure><p>其中光猫负责拨号，所以它也是最外层的一个路由器，光猫的 IP 地址是 <code>192.168.1.1</code>，它下面有一个 <code>192.168.1.0/24</code> 的子网，群晖与光猫直连，有一个 <code>192.168.1.0/24</code> 子网下的 IP 地址。在群晖的 Docker 中，会有一个 <code>macvlan</code> 驱动的网络，与物理网卡共享同一个子网。甜糖星愿的容器将会接入到这个 <code>macvlan</code> 网络，在接入时我会手动为其分配一个 IP 地址。</p><h2 id="安装Docker及配置网络"><a href="#安装Docker及配置网络" class="headerlink" title="安装Docker及配置网络"></a>安装 Docker 及配置网络</h2><p>因为本文是通过 Docker 来实现的，所以第一步当然是安装 Docker。群晖嘛就从套件商店安装，其他平台就用自己平台的方法安装，总之装上 Docker 就行。安装好 Docker 之后，进入<code>控制面板 -- 网络 -- 网络界面</code>，选择连接公网的接口，如<code>局域网1</code>，点击<code>管理 -- Open vSwitch设置</code>，勾选<code>启用 Open vSwitch</code>。</p><p>然后我们需要在 Docker 里面创建一个 <code>macvlan</code> 驱动的网络，命令如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo docker network create \</span><br><span class="line">    -d macvlan \</span><br><span class="line">    --subnet=192.168.1.0/24 \</span><br><span class="line">    --gateway=192.168.1.1 \</span><br><span class="line">    -o parent=ovs_eth0 \</span><br><span class="line">    macvlan</span><br></pre></td></tr></tbody></table></figure><p>上面命令中 <code>subnet</code> 的值替换成群晖所在网络的子网，<code>gateway</code> 指向该子网的网关，<code>parent</code> 指向要绑定的物理网卡，最后面的 <code>macvlan</code> 是网络名，可以按需修改。</p><h2 id="准备二进制翻译器"><a href="#准备二进制翻译器" class="headerlink" title="准备二进制翻译器"></a>准备二进制翻译器</h2><p>接下来，我们要借助 QEMU 的力量，放一个幻术。毕竟，甜糖星愿只给了 ARM 平台的可执行程序，直接在 x86 平台跑肯定是跑不起来的，所以我们要向内核注册一个翻译器，这样 Docker 在执行其他平台的机器码时就可以通过这个翻译器将其翻译成 x86 指令来执行了。是的，我知道这玩意效率不高，我已经体验过了。</p><p>首先，克隆这个镜像的源码仓库 [^2]，找到 <code>resources/qemu-aarch64-static</code>，或者你直接<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL211bHRpYXJjaC9xZW11LXVzZXItc3RhdGljL3JlbGVhc2VzL2Rvd25sb2FkL3Y1LjIuMC0yL3FlbXUtYWFyY2g2NC1zdGF0aWM=">从 GitHub 下载 qemu-aarch64-static<i class="fa fa-external-link-alt"></i></span>也行，把这个文件放到 <code>$PATH</code> 指定的目录，赋予执行权限。</p><p>然后施法吟唱，很简单，就一句话：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --<span class="built_in">rm</span> --privileged multiarch/qemu-user-static:register</span><br></pre></td></tr></tbody></table></figure><p>但是，这个幻术在群晖重启之后就会消失，幻术没了，甜糖星愿就起不来。所以我们还得配一个开机后的自启动任务，让群晖帮我们自动吟唱。操作也很简单，首先将本仓库的 <code>set_qemu_user_static.sh</code> 放到一个合适的位置，比如我放到了 <code>/var/services/homes/boris1993/scripts</code>，然后前往<code>控制面板 -- 任务计划</code>，然后按照如下说明新增一个任务计划：</p><ul><li>任务名称：可自选</li><li>用户账号：root</li><li> 事件：开机</li><li>任务设置页面的运行命令：<br><code>/var/services/homes/boris1993/scripts/set_qemu_user_static.sh</code></li></ul><p>如果要看这个脚本的日志的话，在<code>运行命令</code>里面把脚本输出重定向到一个文件就可以了。</p><h2 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h2><p>进入本仓库所在目录，或者下载<span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2JvcmlzMTk5My90aWFudGFuZy14ODYtZG9ja2VyL21hc3Rlci9kb2NrZXItY29tcG9zZS55bWw="> docker-compose.yml<i class="fa fa-external-link-alt"></i></span>到一个合适的目录下，然后稍微编辑一下，以符合你的网络状况。主要要检查的就是 <code>networks.macvlan.ipv4_address</code> 的值，要确保它处在上面创建的那个 <code>macvlan</code> 网络的子网中。</p><p>确认无误后，执行 <code>sudo docker-compose up -d</code>，Docker 就会自动拉取镜像，并启动一个名为 <code>tiantang</code> 的容器。</p><p>容器内的甜糖星愿在首次启动时会自动退出，这是因为它在自我更新（我就不说这个操作一开始给了我多大的困扰了）。不要怕，容器里面有一个每分钟执行一次的定时任务，在没有发现甜糖星愿的进程时会自动将它启动。</p><p>除此之外，我会在容器启动两分钟后，检测甜糖星愿监听了哪些端口，然后通过脚本自动设置路由器上的 UPnP 规则，这样你就不需要将甜糖星愿容器的 IP 放到 DMZ 里，也不需要手动配置端口转发了。当然这个操作的前提是，你的路由器支持 UPnP，并且你启用了 UPnP，如果没有的话，那你只能手动操作了。或者，如果你不想让脚本自动配置 UPnP，或者客观条件下不允许你这么做，那么你可以把 <code>docker-compose.yml</code> 中 <code>SKIP_UPNP_AUTOCONFIG</code> 这一环境变量置为 <code>true</code>，这样脚本就不会执行了。</p><p>在甜糖星愿稳定运行，且端口转发规则也配置成功后，就可以通过手机客户端绑定这个节点了。但是这里有个问题，就是手机与甜糖星愿必须处在同一个子网里才能自动发现，如果因为各种原因没能自动发现，那么你可以在 <code>tiantang</code> 这个容器中打开一个 <code>bash</code> 终端，执行 <code>ttnode_168 -p /data</code>，在输出中会打印出这个节点的 UID，将其复制到任意二维码生成工具中生成一个二维码，然后用手机端扫描这个二维码，即可完成绑定。</p><p>在这之后，就没什么我们能做的了。我们就慢慢等着甜糖星愿给你分配任务吧。我是等了大概有两三天才开始跑流量的。如果在配置好 UPnP 后，手机端仍提示 “未配置网络”，那有可能是在配置 UPnP 的脚本启动时，甜糖星愿尚未打开所有端口，导致 UPnP 规则不完整。你可以前往路由器的 UPnP 页面，将页面显示结果与 <code>netstat -nlp | grep qemu</code> 命令的输出做对比，如果不一致的话，重新手动运行 <code>set-port-forwarding.sh</code> 脚本即可。</p><h2 id="深入了解"><a href="#深入了解" class="headerlink" title="深入了解"></a>深入了解</h2><p>如果你不止满足于把它跑起来，还想要了解这个镜像背后的运作方式，那么你可以前往这个镜像的 GitHub 仓库 [^3] 阅读该镜像相关的源码。在源码中我也写了注释，可以方便你理解我的想法。</p><h2 id="我的邀请码"><a href="#我的邀请码" class="headerlink" title="我的邀请码"></a>我的邀请码</h2><p>如果我的镜像帮到了你，或者我的这篇文章帮到了你，那么如果你愿意的话，你可以在手机客户端的<code>填写邀请码</code>处，填上我的邀请码 **<code>804744</code>**，这样你可以获得 15 张加成卡，当然我也会得到一些加成。反正互利互惠，我的加成不会从你的身上扣掉，何乐而不为呢？</p><p>[^2]: <span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yZXBvc2l0b3J5L2RvY2tlci9ib3JpczE5OTMvdGlhbnRhbmcteDg2LWRvY2tlcg==">tiantang-x86-docker - Docker Hub<i class="fa fa-external-link-alt"></i></span><br>[^3]: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My90aWFudGFuZy14ODYtZG9ja2Vy">tiantang-x86-docker - GitHub<i class="fa fa-external-link-alt"></i></span></p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/%E7%94%9C%E7%B3%96%E6%98%9F%E6%84%BF/">甜糖星愿</category>
      
      <category domain="https://www.boris1993.com/tags/%E7%94%9C%E7%B3%96/">甜糖</category>
      
      
      <comments>https://www.boris1993.com/run-tiantang-on-synology-docker.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>在 Google Cloud Logging 的日志输出中增加类名、方法名和行数</title>
      <link>https://www.boris1993.com/gcp-logging-show-class-and-method-name.html</link>
      <guid>https://www.boris1993.com/gcp-logging-show-class-and-method-name.html</guid>
      <pubDate>Sun, 30 Aug 2020 06:09:23 GMT</pubDate>
      
      <description>&lt;p&gt;由于我司目前的项目都运行在 Google Cloud Platform (以下简称 GCP) 上，那么自然而然的，我们选择了使用 GCP 的 Logging 来查看日志。在使用过程中，我们发现了一个问题，那就是我们无法直观的看到日志是从什么地方打印出来的，经常需要通过日志内容，在代码里面通过全文搜索来定位。这样就产生了一个需求：可不可以把这条日志所在的类、方法，和行数一起打印在日志中？&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>由于我司目前的项目都运行在 Google Cloud Platform (以下简称 GCP) 上，那么自然而然的，我们选择了使用 GCP 的 Logging 来查看日志。在使用过程中，我们发现了一个问题，那就是我们无法直观的看到日志是从什么地方打印出来的，经常需要通过日志内容，在代码里面通过全文搜索来定位。这样就产生了一个需求：可不可以把这条日志所在的类、方法，和行数一起打印在日志中？</p><span id="more"></span><h2 id="日志是怎么生成的"><a href="#日志是怎么生成的" class="headerlink" title="日志是怎么生成的"></a>日志是怎么生成的</h2><p>既然要实现自动化地修改日志的内容，那么我们首先得要知道，日志的内容是怎么产生的。根据我们的 <code>logback-spring.xml</code> 中的配置，我们可以定位到，日志是从 <code>StackdriverJsonLayout</code> 这个类中生成出来的。</p><p>打开这个文件，阅读源码，发现有一个名为 <code>toJsonMap</code> 的方法很像我们这次的目标，为了大家省事，我从 GitHub 上把这段源码拿到了这里。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convert a logging event into a Map.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> event the logging event</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the map which should get rendered as JSON</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title function_">toJsonMap</span><span class="params">(ILoggingEvent event)</span> {</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.includeMDC) {</span><br><span class="line">        event.getMDCPropertyMap().forEach((key, value) -&gt; {</span><br><span class="line">            <span class="keyword">if</span> (!FILTERED_MDC_FIELDS.contains(key)) {</span><br><span class="line">                map.put(key, value);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.includeTimestamp) {</span><br><span class="line">        map.put(StackdriverTraceConstants.TIMESTAMP_SECONDS_ATTRIBUTE,</span><br><span class="line">                TimeUnit.MILLISECONDS.toSeconds(event.getTimeStamp()));</span><br><span class="line">        map.put(StackdriverTraceConstants.TIMESTAMP_NANOS_ATTRIBUTE,</span><br><span class="line">                TimeUnit.MILLISECONDS.toNanos(event.getTimeStamp() % <span class="number">1_000</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    add(StackdriverTraceConstants.SEVERITY_ATTRIBUTE, <span class="built_in">this</span>.includeLevel,</span><br><span class="line">            String.valueOf(event.getLevel()), map);</span><br><span class="line">    add(JsonLayout.THREAD_ATTR_NAME, <span class="built_in">this</span>.includeThreadName, event.getThreadName(), map);</span><br><span class="line">    add(JsonLayout.LOGGER_ATTR_NAME, <span class="built_in">this</span>.includeLoggerName, event.getLoggerName(), map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意看这个if块，我们的日志语句就是在这里被处理的</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.includeFormattedMessage) {</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> event.getFormattedMessage();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.includeExceptionInMessage) {</span><br><span class="line">            <span class="type">IThrowableProxy</span> <span class="variable">throwableProxy</span> <span class="operator">=</span> event.getThrowableProxy();</span><br><span class="line">            <span class="keyword">if</span> (throwableProxy != <span class="literal">null</span>) {</span><br><span class="line">                <span class="type">String</span> <span class="variable">stackTrace</span> <span class="operator">=</span> getThrowableProxyConverter().convert(event);</span><br><span class="line">                <span class="keyword">if</span> (stackTrace != <span class="literal">null</span> &amp;&amp; !stackTrace.equals(<span class="string">""</span>)) {</span><br><span class="line">                    message += <span class="string">"\n"</span> + stackTrace;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        map.put(JsonLayout.FORMATTED_MESSAGE_ATTR_NAME, message);</span><br><span class="line">    }</span><br><span class="line">    add(JsonLayout.MESSAGE_ATTR_NAME, <span class="built_in">this</span>.includeMessage, event.getMessage(), map);</span><br><span class="line">    add(JsonLayout.CONTEXT_ATTR_NAME, <span class="built_in">this</span>.includeContextName, event.getLoggerContextVO().getName(), map);</span><br><span class="line">    addThrowableInfo(JsonLayout.EXCEPTION_ATTR_NAME, <span class="built_in">this</span>.includeException, event, map);</span><br><span class="line">    addTraceId(event, map);</span><br><span class="line">    add(StackdriverTraceConstants.SPAN_ID_ATTRIBUTE, <span class="built_in">this</span>.includeSpanId,</span><br><span class="line">            event.getMDCPropertyMap().get(StackdriverTraceConstants.MDC_FIELD_SPAN_ID), map);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.serviceContext != <span class="literal">null</span>) {</span><br><span class="line">        map.put(StackdriverTraceConstants.SERVICE_CONTEXT_ATTRIBUTE, <span class="built_in">this</span>.serviceContext);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.customJson != <span class="literal">null</span> &amp;&amp; !<span class="built_in">this</span>.customJson.isEmpty()) {</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : <span class="built_in">this</span>.customJson.entrySet()) {</span><br><span class="line">            map.putIfAbsent(entry.getKey(), entry.getValue());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    addCustomDataToJsonMap(map, event);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看起来篇幅好像很大，但是仔细一看，不难明白，它就是生成了一个 <code>Map</code>，而这个 <code>Map</code> 里面放的，就是最后我们在 GCP Logging 里面将要看到的日志。好了，目标找到了，那就准备动手吧。</p><h2 id="修改日志内容"><a href="#修改日志内容" class="headerlink" title="修改日志内容"></a>修改日志内容</h2><p>要修改的方法找到了，但是我们仍不知道应该怎么取得类名、方法和行号。经过又一顿网上冲浪，加上在源码里面一刨一刨的翻，和一点小小的灵感，最后得知这些信息全部可以通过 <code>ILoggingEvent#getCallerData()</code> 方法取得。请原谅因为时间过去的有点久，我已经找不到当时给我指路的文章，所以也就不能放在下面的参考中了。</p><p>那么我们就开始着手实现这个需求吧。首先在项目里面新建一个类，因为我们的目的是重写 <code>toJsonMap</code> 这个方法，所以要让它继承 <code>StackdriverJsonLayout</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GcpLoggingLayout</span> <span class="keyword">extends</span> <span class="title class_">StackdriverJsonLayout</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">toJsonMap</span><span class="params">(ILoggingEvent event)</span> {</span><br><span class="line">        <span class="comment">// 先调用原本的方法，把日志的信息全部生成好</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="built_in">super</span>.toJsonMap(event);</span><br><span class="line"></span><br><span class="line">        StackTraceElement[] callerData = event.getCallerData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有callerData，那后面也没法操作了</span></span><br><span class="line">        <span class="keyword">if</span> (callerData == <span class="literal">null</span> || callerData.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个元素就是这个日志所在位置的信息</span></span><br><span class="line">        <span class="type">StackTraceElement</span> <span class="variable">stackTraceElement</span> <span class="operator">=</span> callerData[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 我只需要类名，不需要前面的包名</span></span><br><span class="line">        <span class="comment">// 而 getClassName() 会返回类的全限定名</span></span><br><span class="line">        <span class="comment">// 所以我把它拆了，取最后一个元素，也就是类名</span></span><br><span class="line">        String[] classNameParts = stackTraceElement.getClassName().split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">callerClass</span> <span class="operator">=</span> classNameParts[classNameParts.size - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> stackTraceElement.getMethodName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">lineNumber</span> <span class="operator">=</span> stackTraceElement.getLineNumber().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个是原本的日志信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalMessage</span> <span class="operator">=</span> map.get(JsonLayout.FORMATTED_MESSAGE_ATTR_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把类名、方法名、行数附加在原本的信息前面</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">enhancedMessage</span> <span class="operator">=</span> <span class="string">"class="</span> + callerClass + <span class="string">" "</span></span><br><span class="line">                                + <span class="string">"method="</span> + methodName + <span class="string">" "</span></span><br><span class="line">                                + <span class="string">"line="</span> + lineNumber + <span class="string">" "</span></span><br><span class="line">                                + originalMessage;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把改好的日志放回去</span></span><br><span class="line">        map.put(JsonLayout.FORMATTED_MESSAGE_ATTR_NAME, enhancedMessage);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样我们的日志里就带上了类名、方法名，和行号了。但是到了这里并没有结束，因为上面的代码有一个问题：框架打出来的日志也带上了这些信息。虽然不影响使用，但是它不好看，我不想要。所以我决定继续优化一下。</p><h2 id="继续优化"><a href="#继续优化" class="headerlink" title="继续优化"></a>继续优化</h2><p>稍加思索，我提出了两个新的需求：</p><ul><li>要根据包名过滤，只给指定的包里面的类加上这些信息。这样，我就可以排除掉所有无关的包。</li><li>还要根据类名过滤，遇到被指定的类，我就不加上这些信息。因为对于启动类 (就是放 <code>main</code> 方法那个)，和一些用于健康检查的类，它们打出的日志也没必要加上这些信息。</li></ul><p>但是很明显，原厂的功能并不足以实现这两个需求。我为了这两个需求，新增了两个参数：<code>appPackage</code> 用来指定应用的包名，<code>excludedClassNames</code> 用来指定要被排除的类。</p><p>增加了参数，那必然也要修改代码。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GcpLoggingLayout</span> <span class="keyword">extends</span> <span class="title class_">StackdriverJsonLayout</span> {</span><br><span class="line">    <span class="keyword">private</span> String appPackage;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; excludedClassNames;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAppPackage</span><span class="params">(String appPackage)</span> {</span><br><span class="line">        <span class="built_in">this</span>.appPackage = appPackage;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAppPackage</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.appPackage;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里需要注意</span></span><br><span class="line">    <span class="comment">// 我为了 logback-spring.xml 写起来方便，所以在XML中这个属性是一个逗号分隔的字符串</span></span><br><span class="line">    <span class="comment">// 但是在代码里面，我为了用 contains 方法，所以用了一个List来存放</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExcludedClassNames</span><span class="params">(String excludedClassNames)</span> {</span><br><span class="line">        <span class="built_in">this</span>.excludedClassNames =</span><br><span class="line">            Arrays.stream(excludedClassNames.split(<span class="string">","</span>))</span><br><span class="line">                .map(String::trim)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter就没啥讲究了</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getExcludedClassNames</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.excludedClassNames;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">toJsonMap</span><span class="params">(ILoggingEvent event)</span> {</span><br><span class="line">        <span class="comment">// 先调用原本的方法，把日志的信息全部生成好</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="built_in">super</span>。toJsonMap(event);</span><br><span class="line"></span><br><span class="line">        StackTraceElement[] callerData = event.getCallerData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有callerData，那后面也没法操作了</span></span><br><span class="line">        <span class="keyword">if</span> (callerData == <span class="literal">null</span> || callerData.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个元素就是这个日志所在位置的信息</span></span><br><span class="line">        <span class="type">StackTraceElement</span> <span class="variable">stackTraceElement</span> <span class="operator">=</span> callerData[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了通过包名匹配，所以先拿出来全限定名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">callerClassFullName</span> <span class="operator">=</span> stackTraceElement.getClassName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果不是应用所在的包打出来的日志，那么不处理</span></span><br><span class="line">        <span class="keyword">if</span> (!callerClassFullName.contains(appPackage)) {</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        String[] classNameParts = stackTraceElement.getClassName().split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">callerClass</span> <span class="operator">=</span> classNameParts[classNameParts.size - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果这个类是被排除的，那就不处理</span></span><br><span class="line">        <span class="keyword">if</span> (excludedClassNames.contains(callerClass)) {</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> stackTraceElement.getMethodName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">lineNumber</span> <span class="operator">=</span> String.valueOf(stackTraceElement.getLineNumber());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个是原本的日志信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalMessage</span> <span class="operator">=</span> map.get(JsonLayout.FORMATTED_MESSAGE_ATTR_NAME).toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把类名、方法名、行数附加在原本的信息前面</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">enhancedMessage</span> <span class="operator">=</span> <span class="string">"class="</span> + callerClass + <span class="string">" "</span></span><br><span class="line">                                + <span class="string">"method="</span> + methodName + <span class="string">" "</span></span><br><span class="line">                                + <span class="string">"line="</span> + lineNumber + <span class="string">" "</span></span><br><span class="line">                                + originalMessage;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把改好的日志放回去</span></span><br><span class="line">        map.put(JsonLayout.FORMATTED_MESSAGE_ATTR_NAME, enhancedMessage);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>除了修改代码，日志配置文件 <code>logback-spring.xml</code> 也要针对我们新增的两个属性作出修改。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/cloud/gcp/autoconfigure/logging/logback-appender.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/cloud/gcp/logging/logback-json-appender.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- CONSOLE输出部分略 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE_JSON"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.encoder.LayoutWrappingEncoder"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 指向我们上面写的GcpLoggingLayout --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"com.boris1993.myapplication.config.GcpLoggingLayout"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 应用的包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appPackage</span>&gt;</span>com.boris1993.myapplication<span class="tag">&lt;/<span class="name">appPackage</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要排除的类名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逗号后面的空格可有可无，为了好看我选择加上，反正最后会被trim掉 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludedClassNames</span>&gt;</span>APP, HealthCheck<span class="tag">&lt;/<span class="name">excludedClassNames</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 其他GCP Logging配置略 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- springProfile配置略 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后就可以部署到 GCP 上面看效果了，或者在本机使用对应的 profile 启动，然后检查控制台里面打印出来的 JSON。</p><p>[^1]: <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5zcHJpbmcuaW8vc3ByaW5nLWNsb3VkLWdjcC9tdWx0aS9tdWx0aV9fc3RhY2tkcml2ZXJfbG9nZ2luZy5odG1s">Stackdriver Logging<i class="fa fa-external-link-alt"></i></span><br>[^2]: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1jbG91ZC9zcHJpbmctY2xvdWQtZ2NwL2Jsb2IvMTRhNzQ3YTVkOGZkMzYyYWI3NzNlNDNhY2FmYWU1ZWNhZWJiZDcyZC9zcHJpbmctY2xvdWQtZ2NwLWxvZ2dpbmcvc3JjL21haW4vamF2YS9vcmcvc3ByaW5nZnJhbWV3b3JrL2Nsb3VkL2djcC9sb2dnaW5nL1N0YWNrZHJpdmVySnNvbkxheW91dC5qYXZhI0w0NQ==">StackdriverJsonLayout.java - GitHub<i class="fa fa-external-link-alt"></i></span></p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/tips/">小技巧</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/Spring-Boot/">Spring Boot</category>
      
      <category domain="https://www.boris1993.com/tags/Google-Cloud-Logging/">Google Cloud Logging</category>
      
      <category domain="https://www.boris1993.com/tags/Stackdriver/">Stackdriver</category>
      
      
      <comments>https://www.boris1993.com/gcp-logging-show-class-and-method-name.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>在 Spring 中通过配置类注入配置文件的值</title>
      <link>https://www.boris1993.com/spring-injecting-property-value-with-configuration-bean.html</link>
      <guid>https://www.boris1993.com/spring-injecting-property-value-with-configuration-bean.html</guid>
      <pubDate>Sun, 03 May 2020 10:44:14 GMT</pubDate>
      
      <description>&lt;p&gt;我们在开发过程中，为了保证项目的灵活性，经常会选择将一些值放在配置文件中，并在代码中将它注入并使用。将值注入代码最常见的一种方法，则是使用 &lt;code&gt;@Value()&lt;/code&gt; 注解搭配 SpEL 直接注入我们需要的属性。但是鲁迅先生有云：从来如此，便对吗？这里，我想介绍一个我个人认为更好的实践：通过配置类来注入属性的值。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>我们在开发过程中，为了保证项目的灵活性，经常会选择将一些值放在配置文件中，并在代码中将它注入并使用。将值注入代码最常见的一种方法，则是使用 <code>@Value()</code> 注解搭配 SpEL 直接注入我们需要的属性。但是鲁迅先生有云：从来如此，便对吗？这里，我想介绍一个我个人认为更好的实践：通过配置类来注入属性的值。</p><span id="more"></span><h2 id="旧的做法有什么问题"><a href="#旧的做法有什么问题" class="headerlink" title="旧的做法有什么问题"></a>旧的做法有什么问题</h2><p>假设我们现在有这样一个 <code>application.yml</code>，其中 <code>credentials</code> 部分是我自定义的一个属性：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="attr">credentials:</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">A_VERY_SECRET_TOKEN</span></span><br></pre></td></tr></tbody></table></figure><p>然后，我们会在用到它的地方，直接通过 <code>@Value</code> 注解把它注入进来，就像这样：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeService</span> {</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value("${credientials.token}")</span></span><br><span class="line">  <span class="keyword">private</span> String token;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>好像没什么问题对吧，直接用表达式把值拿进来，然后该怎么用就怎么用。但是我不知道你们有没有注意过，这种做法其实既不利于后期重构，也不利于为代码生成好的文档。</p><p>比如说，这个值在多个类中都有被引用，但某一天，我们觉得这个名字不够直观，我们想改成 <code>contactServiceAppToken</code>，那么我们就只能先改掉属性的名字，然后在代码里面全文替换，把 <code>credentials.token</code> 批量替换成 <code>credentials.contactServiceAppToken</code>。我不知道你们是怎么想的，我每次做这种文本批量替换都很慌，生怕一个没看见而改掉了不应该改的东西。</p><p>而对于生成文档，我们都知道，在 Java 代码上面我们可以使用 JavaDoc 来编写文档，阐明这个类的作用等等。而对于 YAML 文件，则没有类似的东西，我们只能在属性上面写普通的注释。可是，大篇幅的注释又有可能会影响 YAML 文件的可读性，更不用说有谁会在看代码的时候专程去看 YAML 文件？</p><p>所以，我会建议团队使用配置类，也就是本文下面要讲的这个东西，来管理和注入这些自定义的属性。</p><h2 id="来个示例"><a href="#来个示例" class="headerlink" title="来个示例"></a>来个示例</h2><p>首先，我们需要创建一个配置类，来给这些属性找一个家。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个注解是重点，说明我们要把配置文件的 credentials 部分映射到这里</span></span><br><span class="line"><span class="meta">@ConfigurationProperties("credentials")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Credentials</span> {</span><br><span class="line">  <span class="comment">// 属性名与变量名保持一致即可，Spring会自动处理两者的绑定关系</span></span><br><span class="line">  <span class="comment">// 同时，Spring会自动完成不同命名方式的转换，比如 kebab-case 变成 camelCase</span></span><br><span class="line">  <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//getters and setters</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来，在要使用这些属性的地方，把这个配置类注入，然后直接 get 属性的值，就可以了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeService</span> {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Credentials credentials;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">SomeService</span><span class="params">(Credentials credentials)</span> {</span><br><span class="line">    <span class="built_in">this</span>.credentials = credentials;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> credentials.getToken();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>与直接取值的方法比较起来，使用配置类有这么几个优点：</p><ul><li>如果在重构的时候要改变属性名，那么我们只需要修改配置文件里面的属性名，和配置类里面的属性名。当然要记得使用 IDE 里面的重构功能改名，这样 IDE 会自动分析这个属性的引用，并自动改正过来。</li><li>使用配置类还可以方便我们生成文档。如果直接在配置文件里面写文档，一方面是不一定易读，另一方面，也不是所有人都会想到在配置文件里面还有文档。而使用配置类的话，我们只需要在类上面加上 JavaDoc 就好了。</li><li>而且，我们还不需要担心打错字，导致 <code>@Value</code> 注入失败而使得应用起不来。虽然这不是什么大问题，改正就行了，但毕竟还是麻烦。</li></ul><h2 id="多层属性怎么办"><a href="#多层属性怎么办" class="headerlink" title="多层属性怎么办"></a>多层属性怎么办</h2><p>上面只是演示了只有一级子属性的情况，如果下面包含了多层属性，那配置类应该怎么写呢？</p><p>假设现在配置文件变成了这样：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">credentials:</span></span><br><span class="line">  <span class="attr">token:</span></span><br><span class="line">    <span class="attr">contact:</span> <span class="string">TOKEN_FOR_CONTACT_API</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">TOKEN_FOR_USER_API</span></span><br><span class="line">  <span class="attr">oauth:</span></span><br><span class="line">    <span class="attr">client-id:</span> <span class="string">CLIENT_ID</span></span><br><span class="line">    <span class="attr">client-secret:</span> <span class="string">CLIENT_SECRET</span></span><br><span class="line"></span><br><span class="line"><span class="attr">endpoint:</span></span><br><span class="line">  <span class="attr">contact:</span></span><br><span class="line">    <span class="attr">v1:</span> <span class="string">URL_FOR_CONTACT_API_VERSION_1</span></span><br><span class="line">    <span class="attr">v2:</span> <span class="string">URL_FOR_CONTACT_API_VERSION_2</span></span><br></pre></td></tr></tbody></table></figure><p>对于 <code>credentials</code> 部分，因为里面子属性的名字大致是确定的，我们用一个内部类就可以搞定（其实写在单独的类里面也可以，只是我不喜欢那么做）。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties("credentials")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Credentials</span> {</span><br><span class="line">  <span class="keyword">private</span> Token token;</span><br><span class="line">  <span class="keyword">private</span> Oauth oauth;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//getters and setters</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Token</span> {</span><br><span class="line">    <span class="keyword">private</span> String contact;</span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getters and setters</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Oauth</span> {</span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="keyword">private</span> String clientSecret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getters and setters</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>取值的时候呢，逐层取到就好了：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeService</span> {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Credentials credentials;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">SomeService</span><span class="params">(Credentials credentials)</span> {</span><br><span class="line">    <span class="built_in">this</span>.credentials = credentials;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">contactApiToken</span> <span class="operator">=</span> credentials.getToken().getContact();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但是对于 <code>endpoint</code> 部分，因为里面的值是某个 API 各个版本的 URL，考虑到 API 还有可能会有新版本，每加一个版本都要再改配置类有点麻烦，所以我们可以直接用一个 Map 来存放。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties("endpoint")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Endpoint</span> {</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, String&gt; contact;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//getters and setters</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在取值的时候，就还是一样的套路，注入这个配置类，然后从 Map 中取值就行了。Map 的 key 就是属性名，比如 <code>v1</code>，值就是属性的值。当然这样做的话，就要处理一下取到 null 的情况。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeService</span> {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Endpoint endpoint;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">SomeService</span><span class="params">(Endpoint endpoint)</span> {</span><br><span class="line">    <span class="built_in">this</span>.endpoint = endpoint;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">contactV1Url</span> <span class="operator">=</span> endpoint.getContact().get(<span class="string">"v1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (contactV1Url == <span class="literal">null</span>) {</span><br><span class="line">      <span class="comment">// handle it here</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="给配置文件加上自动提示"><a href="#给配置文件加上自动提示" class="headerlink" title="给配置文件加上自动提示"></a>给配置文件加上自动提示</h2><p>其实，<code>Configuration properties</code> 配置类除了可以方便我们管理属性之外，他还可以搭配 <code>spring-boot-configuration-processor</code> 来实现配置文件的自动提示，当然这也需要 IDE 的支持。</p><p>在 <code>pom.xml</code> 中加入如下依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后在编写完配置类之后，执行一下 build 操作，或者 <code>mvn compile</code>，来让它帮我们生成一个 <code>additional-spring-configuration-metadata.json</code> 文件。有了这个文件之后，IDE 就会参照它在配置文件里面给我们提供自动提示。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/tips/">小技巧</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/Spring-Boot/">Spring Boot</category>
      
      <category domain="https://www.boris1993.com/tags/ConfigurationProperties/">ConfigurationProperties</category>
      
      
      <comments>https://www.boris1993.com/spring-injecting-property-value-with-configuration-bean.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
