<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Code Life</title>
    <link>https://www.boris1993.com/</link>
    
    <atom:link href="https://www.boris1993.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Boris has arrived!</description>
    <pubDate>Mon, 01 Apr 2024 14:17:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>使用 Homebrew Bundle 管理电脑上安装的软件</title>
      <link>https://www.boris1993.com/macos-manage-softwares-with-homebrew-bundle.html</link>
      <guid>https://www.boris1993.com/macos-manage-softwares-with-homebrew-bundle.html</guid>
      <pubDate>Mon, 18 Mar 2024 14:30:37 GMT</pubDate>
      
      <description>&lt;p&gt;今天看到&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly94LmNvbS92aWtpbmdtdXRlL3N0YXR1cy8xNzY5MTc0MzM3NzU0NjczMzI0&quot;&gt;一篇推文&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;说 Homebrew 也支持类似 &lt;code&gt;package.json&lt;/code&gt; 的方式来管理电脑上安装的应用，感觉这玩意挺实用的，像我上回换电脑还是照着 &lt;code&gt;brew list&lt;/code&gt; 的输出再一个个装，有了它的话就可以一键安装了。而且除了 Homebrew 之外，它还可以导出通过 App Store 安装的软件和 VS Code 插件。那么，就小小折腾一下。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>今天看到<span class="exturl" data-url="aHR0cHM6Ly94LmNvbS92aWtpbmdtdXRlL3N0YXR1cy8xNzY5MTc0MzM3NzU0NjczMzI0">一篇推文<i class="fa fa-external-link-alt"></i></span>说 Homebrew 也支持类似 <code>package.json</code> 的方式来管理电脑上安装的应用，感觉这玩意挺实用的，像我上回换电脑还是照着 <code>brew list</code> 的输出再一个个装，有了它的话就可以一键安装了。而且除了 Homebrew 之外，它还可以导出通过 App Store 安装的软件和 VS Code 插件。那么，就小小折腾一下。</p><span id="more"></span><p>首次运行 <code>brew bundle</code> 的时候它就会自动安装了。如果要导出 App Store 安装的程序的话，那么还需要安装 <code>mas</code> 这个 Formula。</p><p>然后就可以执行 <code>brew bundle dump</code>，它会在当前目录下生成一个 <code>Brewfile</code> 文件，里面就是你电脑上目前装的软件，内容就像这样：</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 各个Homebrew仓库</span></span><br><span class="line">tap <span class="string">"beeftornado/rmtree"</span></span><br><span class="line">tap <span class="string">"bell-sw/liberica"</span></span><br><span class="line">tap <span class="string">"homebrew/autoupdate"</span></span><br><span class="line">tap <span class="string">"homebrew/bundle"</span></span><br><span class="line">tap <span class="string">"homebrew/cask-fonts"</span></span><br><span class="line">tap <span class="string">"homebrew/cask-versions"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过Homebrew安装的Formula</span></span><br><span class="line">brew <span class="string">"cloudflared"</span></span><br><span class="line">brew <span class="string">"curl"</span></span><br><span class="line">brew <span class="string">"git"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过Homebrew安装的Cask</span></span><br><span class="line">cask <span class="string">"1password"</span></span><br><span class="line">cask <span class="string">"alfred"</span></span><br><span class="line">cask <span class="string">"altserver"</span></span><br><span class="line">cask <span class="string">"arc"</span></span><br><span class="line">cask <span class="string">"bartender"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过App Store安装的软件</span></span><br><span class="line">mas <span class="string">"DaVinci Resolve"</span>, <span class="symbol">id:</span> <span class="number">571213070</span></span><br><span class="line">mas <span class="string">"Eul"</span>, <span class="symbol">id:</span> <span class="number">1541991958</span></span><br><span class="line">mas <span class="string">"Termius"</span>, <span class="symbol">id:</span> <span class="number">1176074088</span></span><br><span class="line">mas <span class="string">"WireGuard"</span>, <span class="symbol">id:</span> <span class="number">1451685025</span></span><br><span class="line">mas <span class="string">"Xnip"</span>, <span class="symbol">id:</span> <span class="number">1221250572</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># VS Code插件</span></span><br><span class="line">vscode <span class="string">"ms-python.debugpy"</span></span><br><span class="line">vscode <span class="string">"ms-python.python"</span></span><br><span class="line">vscode <span class="string">"redhat.vscode-yaml"</span></span><br></pre></td></tr></tbody></table></figure><p>我的这个 Brewfile 算是简单的，它还支持配置安装参数等，具体可以参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0hvbWVicmV3L2hvbWVicmV3LWJ1bmRsZS8/dGFiPXJlYWRtZS1vdi1maWxlI3VzYWdl"> Homebrew Bundle 的实例<i class="fa fa-external-link-alt"></i></span>。</p><p>如果在导出的时候在当前目录已经存在一个 <code>Brewfile</code>，那么它会报错说文件已存在。这时候可以加 <code>--force</code> 参数强制导出，要在 cron 里定时导出的话这个参数会很有用。此外如果你想要每个软件的简介，那么还可以加上 <code>--describe</code> 参数，出来的 <code>Brewfile</code> 就会是这样的：</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac App Store command-line interface</span></span><br><span class="line">brew <span class="string">"mas"</span></span><br><span class="line"><span class="comment"># Java-based project management</span></span><br><span class="line">brew <span class="string">"maven"</span></span><br><span class="line"><span class="comment"># Menu bar icon organiser</span></span><br><span class="line">cask <span class="string">"bartender"</span></span><br></pre></td></tr></tbody></table></figure><p>不过 <code>--describe</code> 参数只对 <code>brew</code> 和 <code>cask</code> 条目生效，<code>tap</code>、<code>mas</code> 和 <code>vscode</code> 条目都是没有描述的。</p><p>我试用后发现，似乎 <code>mas</code> 这部分会把你已经卸载的软件也列出来，而第二次再 dump 的时候又另外发现了一个之前没列出来而已经通过 App Store 安装的程序，所以这部分可能需要在导出之后自己再人工校验一下。</p><p>要按照 <code>Brewfile</code> 安装软件的话，只需要 cd 到 <code>Brewfile</code> 所在位置然后执行 <code>brew bundle</code> 就会自动开始安装。</p><p>如果要把不在 <code>Brewfile</code> 中的软件删除，那么可以运行 <code>brew bundle cleanup</code> 命令。</p><p>此外，运行 <code>brew bundle check</code> 可以检查哪些软件在 <code>Brewfile</code> 里列出来了，但是还没安装。但是我用刚刚导出的 <code>Brewfile</code> 检查却报了 <code>brew bundle can't satisfy your Brewfile's dependencies.Satisfy missing dependencies with ``brew bundle install``.</code> 这样的消息，我就有点怀疑这个检查到底准不准……</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/macOS/">macOS</category>
      
      <category domain="https://www.boris1993.com/tags/Homebrew/">Homebrew</category>
      
      
      <comments>https://www.boris1993.com/macos-manage-softwares-with-homebrew-bundle.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>理解 Java 中的抽象队列同步器（AQS）</title>
      <link>https://www.boris1993.com/java-understand-aqs.html</link>
      <guid>https://www.boris1993.com/java-understand-aqs.html</guid>
      <pubDate>Wed, 17 Jan 2024 06:46:53 GMT</pubDate>
      
      <description>&lt;p&gt;最近项目里用到了些 Lock，爬了些文了解到它们是基于 &lt;code&gt;AbstractQueuedSynchronizer&lt;/code&gt;（即 &lt;code&gt;AQS&lt;/code&gt;）实现的。那么，不如趁热打铁，看看里面是怎么工作的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>最近项目里用到了些 Lock，爬了些文了解到它们是基于 <code>AbstractQueuedSynchronizer</code>（即 <code>AQS</code>）实现的。那么，不如趁热打铁，看看里面是怎么工作的。</p><span id="more"></span><h2 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是 AQS</h2><p><code>AbstractQueuedSynchronizer</code>，抽象队列同步器，是很多同步器（如 <code>ReentrantLock</code>、<code>CountDownLatch</code>、<code>Semaphore</code>）等都是基于它实现的。</p><p>在 AQS 内部，它维护了一个 FIFO 队列，和一个 <code>volatile</code> 类型的变量 <code>state</code>。FIFO 队列用来实现多线程的排队工作，线程加锁失败时，这个线程就会被封装成一个 <code>Node</code> 节点放到队尾，然后当锁被释放后，队列头部的线程就会被唤醒并让它重新尝试获取锁；<code>state</code> 变量用来记录锁的状态，如 <code>Semaphore</code> 的 <code>permit</code> 就是存在 <code>state</code> 里面的。</p><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><p>上面说到，AQS 使用一个 <code>volatile</code> 的 <code>int</code> 变量 <code>state</code> 来管理锁的状态，<code>state</code> 为 0 时说明锁被释放，反之锁被持有。</p><p>AQS 提供了三个方法来同步锁的状态：<code>getState()</code>，<code>setState(int newState)</code> 和 <code>compareAndSetState(int expect, int update)</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The synchronization state.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the current value of synchronization state.</span></span><br><span class="line"><span class="comment"> * This operation has memory semantics of a {<span class="doctag">@code</span> volatile} read.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> current state value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the value of synchronization state.</span></span><br><span class="line"><span class="comment"> * This operation has memory semantics of a {<span class="doctag">@code</span> volatile} write.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newState the new state value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> newState)</span> {</span><br><span class="line">    state = newState;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically sets synchronization state to the given updated</span></span><br><span class="line"><span class="comment"> * value if the current state value equals the expected value.</span></span><br><span class="line"><span class="comment"> * This operation has memory semantics of a {<span class="doctag">@code</span> volatile} read</span></span><br><span class="line"><span class="comment"> * and write.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expect the expected value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> update the new value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> {<span class="doctag">@code</span> true} if successful. False return indicates that the actual</span></span><br><span class="line"><span class="comment"> *         value was not equal to the expected value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSetState</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span> {</span><br><span class="line">    <span class="keyword">return</span> U.compareAndSetInt(<span class="built_in">this</span>, STATE, expect, update);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查看 <code>setState</code> 方法的引用，不难发现像 <code>CountDownLatch</code> 和 <code>Semaphore</code> 这些熟悉的身影。</p><p><img data-src="https://blog-static.boris1993.com/java-understand-aqs/usage-of-set-state.png"></p><h2 id="FIFO队列-线程排队等待锁的地方"><a href="#FIFO队列-线程排队等待锁的地方" class="headerlink" title="FIFO队列 - 线程排队等待锁的地方"></a>FIFO 队列 - 线程排队等待锁的地方</h2><p>在 AQS 内部，未能成功获取锁的线程都会被包装成一个 <code>Node</code> 节点，然后放到 FIFO 队列尾部让它等待。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node status bits, also used as argument and return values</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WAITING</span>   <span class="operator">=</span> <span class="number">1</span>;          <span class="comment">// must be 1</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CANCELLED</span> <span class="operator">=</span> <span class="number">0x80000000</span>; <span class="comment">// must be negative</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COND</span>      <span class="operator">=</span> <span class="number">2</span>;          <span class="comment">// in a condition wait</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">    <span class="keyword">volatile</span> Node prev;       <span class="comment">// initially attached via casTail</span></span><br><span class="line">    <span class="keyword">volatile</span> Node next;       <span class="comment">// visibly nonnull when signallable</span></span><br><span class="line">    Thread waiter;            <span class="comment">// visibly nonnull when enqueued</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> status;      <span class="comment">// written by owner, atomic bit ops by others</span></span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Head of the wait queue, lazily initialized.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tail of the wait queue. After initialization, modified only via casTail.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enqueues the node unless null. (Currently used only for</span></span><br><span class="line"><span class="comment"> * ConditionNodes; other cases are interleaved with acquires.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(Node node)</span> {</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (;;) {</span><br><span class="line">            <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail;</span><br><span class="line">            node.setPrevRelaxed(t);        <span class="comment">// avoid unnecessary fence</span></span><br><span class="line">            <span class="keyword">if</span> (t == <span class="literal">null</span>)                 <span class="comment">// initialize</span></span><br><span class="line">                tryInitializeHead();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (casTail(t, node)) {</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">if</span> (t.status &lt; <span class="number">0</span>)          <span class="comment">// wake up to clean link</span></span><br><span class="line">                    LockSupport.unpark(node.waiter);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p><code>Semaphore</code> 就是 AQS 的一个实现，从它的源码就能很容易看出来，它内部就是通过 AQS 的 <code>state</code> 来管理 <code>permits</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Semaphore</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable {</span><br><span class="line">    <span class="comment">/** All mechanics via AbstractQueuedSynchronizer subclass */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Synchronization implementation for semaphore.  Uses AQS state</span></span><br><span class="line"><span class="comment">     * to represent permits. Subclassed into fair and nonfair</span></span><br><span class="line"><span class="comment">     * versions.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> {</span><br><span class="line">        Sync(<span class="type">int</span> <span class="keyword">permits</span>) {</span><br><span class="line">            setState(<span class="keyword">permits</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getPermits</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">return</span> getState();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">nonfairTryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> {</span><br><span class="line">            <span class="keyword">for</span> (;;) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">available</span> <span class="operator">=</span> getState();</span><br><span class="line">                <span class="type">int</span> <span class="variable">remaining</span> <span class="operator">=</span> available - acquires;</span><br><span class="line">                <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">                    compareAndSetState(available, remaining))</span><br><span class="line">                    <span class="keyword">return</span> remaining;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span> releases)</span> {</span><br><span class="line">            <span class="keyword">for</span> (;;) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> getState();</span><br><span class="line">                <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> current + releases;</span><br><span class="line">                <span class="keyword">if</span> (next &lt; current) <span class="comment">// overflow</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">"Maximum permit count exceeded"</span>);</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(current, next))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">reducePermits</span><span class="params">(<span class="type">int</span> reductions)</span> {</span><br><span class="line">            <span class="keyword">for</span> (;;) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> getState();</span><br><span class="line">                <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> current - reductions;</span><br><span class="line">                <span class="keyword">if</span> (next &gt; current) <span class="comment">// underflow</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">"Permit count underflow"</span>);</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(current, next))</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">drainPermits</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">for</span> (;;) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> getState();</span><br><span class="line">                <span class="keyword">if</span> (current == <span class="number">0</span> || compareAndSetState(current, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">return</span> current;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NonFair version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NonfairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2694183684443567898L</span>;</span><br><span class="line"></span><br><span class="line">        NonfairSync(<span class="type">int</span> <span class="keyword">permits</span>) {</span><br><span class="line">            <span class="built_in">super</span>(<span class="keyword">permits</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> {</span><br><span class="line">            <span class="keyword">return</span> nonfairTryAcquireShared(acquires);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fair version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2014338818796000944L</span>;</span><br><span class="line"></span><br><span class="line">        FairSync(<span class="type">int</span> <span class="keyword">permits</span>) {</span><br><span class="line">            <span class="built_in">super</span>(<span class="keyword">permits</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> {</span><br><span class="line">            <span class="keyword">for</span> (;;) {</span><br><span class="line">                <span class="keyword">if</span> (hasQueuedPredecessors())</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">available</span> <span class="operator">=</span> getState();</span><br><span class="line">                <span class="type">int</span> <span class="variable">remaining</span> <span class="operator">=</span> available - acquires;</span><br><span class="line">                <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">                    compareAndSetState(available, remaining))</span><br><span class="line">                    <span class="keyword">return</span> remaining;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a {<span class="doctag">@code</span> Semaphore} with the given number of</span></span><br><span class="line"><span class="comment">     * permits and nonfair fairness setting.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permits the initial number of permits available.</span></span><br><span class="line"><span class="comment">     *        This value may be negative, in which case releases</span></span><br><span class="line"><span class="comment">     *        must occur before any acquires will be granted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> <span class="keyword">permits</span>)</span> {</span><br><span class="line">        sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(<span class="keyword">permits</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a {<span class="doctag">@code</span> Semaphore} with the given number of</span></span><br><span class="line"><span class="comment">     * permits and the given fairness setting.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permits the initial number of permits available.</span></span><br><span class="line"><span class="comment">     *        This value may be negative, in which case releases</span></span><br><span class="line"><span class="comment">     *        must occur before any acquires will be granted.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fair {<span class="doctag">@code</span> true} if this semaphore will guarantee</span></span><br><span class="line"><span class="comment">     *        first-in first-out granting of permits under contention,</span></span><br><span class="line"><span class="comment">     *        else {<span class="doctag">@code</span> false}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> <span class="keyword">permits</span>, <span class="type">boolean</span> fair)</span> {</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>(<span class="keyword">permits</span>) : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(<span class="keyword">permits</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="与synchronized的区别"><a href="#与synchronized的区别" class="headerlink" title="与synchronized的区别"></a>与 synchronized 的区别</h2><ul><li><code>synchronized</code> 是一个 Java 内置的关键字，<code>AQS</code> 扩展的各种锁则是通过 Java 代码实现的</li><li><code>synchronzed</code> 锁是自动获取和释放的，而 <code>AQS</code> 的锁需要手动获取和释放</li><li>像 <code>ReentrantLock</code> 还可以设置超时等特性，但 <code>synchronized</code> 不行</li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/Lock/">Lock</category>
      
      <category domain="https://www.boris1993.com/tags/AQS/">AQS</category>
      
      <category domain="https://www.boris1993.com/tags/%E9%94%81/">锁</category>
      
      
      <comments>https://www.boris1993.com/java-understand-aqs.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Spring Boot 启动过程中的后置处理</title>
      <link>https://www.boris1993.com/spring-boot-application-start-up-post-processing.html</link>
      <guid>https://www.boris1993.com/spring-boot-application-start-up-post-processing.html</guid>
      <pubDate>Sun, 14 Jan 2024 08:02:28 GMT</pubDate>
      
      <description>&lt;p&gt;在前一篇博文 &lt;a href=&quot;/spring-boot-application-starts-up.html&quot;&gt;Spring Boot 启动流程分析&lt;/a&gt;的&lt;code&gt;调用 beanFactory 的后置处理&lt;/code&gt;小节中提到了 beanFactory 的后置处理。这部分是 Spring IoC 的重点，但是因为内容很长，所以在这里单独开一篇博文来分析。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>在前一篇博文 <a href="/spring-boot-application-starts-up.html">Spring Boot 启动流程分析</a>的<code>调用 beanFactory 的后置处理</code>小节中提到了 beanFactory 的后置处理。这部分是 Spring IoC 的重点，但是因为内容很长，所以在这里单独开一篇博文来分析。</p><span id="more"></span><h2 id="调用beanFactoryPostProcessors"><a href="#调用beanFactoryPostProcessors" class="headerlink" title="调用beanFactoryPostProcessors"></a>调用 beanFactoryPostProcessors</h2><p>话不多说，继续从 <code>AbstractApplicationContext#refresh</code> 调用 <code>invokeBeanFactoryPostProcessors</code> 方法这里开始。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> {</span><br><span class="line">    <span class="comment">// 重点</span></span><br><span class="line">    PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></span><br><span class="line">    <span class="comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></span><br><span class="line">    <span class="keyword">if</span> (!NativeDetector.inNativeImage() &amp;&amp; beanFactory.getTempClassLoader() == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {</span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">LoadTimeWeaverAwareProcessor</span>(beanFactory));</span><br><span class="line">        beanFactory.setTempClassLoader(<span class="keyword">new</span> <span class="title class_">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostProcessorRegistrationDelegate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span><br><span class="line"><span class="params">        ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// WARNING: Although it may appear that the body of this method can be easily</span></span><br><span class="line">    <span class="comment">// refactored to avoid the use of multiple loops and multiple lists, the use</span></span><br><span class="line">    <span class="comment">// of multiple lists and multiple passes over the names of processors is</span></span><br><span class="line">    <span class="comment">// intentional. We must ensure that we honor the contracts for PriorityOrdered</span></span><br><span class="line">    <span class="comment">// and Ordered processors. Specifically, we must NOT cause processors to be</span></span><br><span class="line">    <span class="comment">// instantiated (via getBean() invocations) or registered in the ApplicationContext</span></span><br><span class="line">    <span class="comment">// in the wrong order.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Before submitting a pull request (PR) to change this method, please review the</span></span><br><span class="line">    <span class="comment">// list of all declined PRs involving changes to PostProcessorRegistrationDelegate</span></span><br><span class="line">    <span class="comment">// to ensure that your proposal does not result in a breaking change:</span></span><br><span class="line">    <span class="comment">// https://github.com/spring-projects/spring-framework/issues?q=PostProcessorRegistrationDelegate+is%3Aclosed+label%3A%22status%3A+declined%22</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></span><br><span class="line">    Set&lt;String&gt; processedBeans = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry registry) {</span><br><span class="line">        List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) {</span><br><span class="line">            <span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor registryProcessor) {</span><br><span class="line">                registryProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">                registryProcessors.add(registryProcessor);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                regularPostProcessors.add(postProcessor);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">        <span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></span><br><span class="line">        <span class="comment">// Separate between BeanDefinitionRegistryPostProcessors that implement</span></span><br><span class="line">        <span class="comment">// PriorityOrdered, Ordered, and the rest.</span></span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; currentRegistryProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">        String[] postProcessorNames =</span><br><span class="line">                beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (String ppName : postProcessorNames) {</span><br><span class="line">            <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {</span><br><span class="line">                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">        registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">        <span class="comment">// 这里是重点</span></span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup());</span><br><span class="line">        currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span></span><br><span class="line">        postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (String ppName : postProcessorNames) {</span><br><span class="line">            <span class="keyword">if</span> (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) {</span><br><span class="line">                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">        registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup());</span><br><span class="line">        currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">reiterate</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (reiterate) {</span><br><span class="line">            reiterate = <span class="literal">false</span>;</span><br><span class="line">            postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">for</span> (String ppName : postProcessorNames) {</span><br><span class="line">                <span class="keyword">if</span> (!processedBeans.contains(ppName)) {</span><br><span class="line">                    currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                    processedBeans.add(ppName);</span><br><span class="line">                    reiterate = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">            registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">            invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup());</span><br><span class="line">            currentRegistryProcessors.clear();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);</span><br><span class="line">        invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// Invoke factory processors registered with the context instance.</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">    <span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></span><br><span class="line">    String[] postProcessorNames =</span><br><span class="line">            beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span></span><br><span class="line">    <span class="comment">// Ordered, and the rest.</span></span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String ppName : postProcessorNames) {</span><br><span class="line">        <span class="keyword">if</span> (processedBeans.contains(ppName)) {</span><br><span class="line">            <span class="comment">// skip - already processed in first phase above</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {</span><br><span class="line">            priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) {</span><br><span class="line">            orderedPostProcessorNames.add(ppName);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">    invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span></span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(orderedPostProcessorNames.size());</span><br><span class="line">    <span class="keyword">for</span> (String postProcessorName : orderedPostProcessorNames) {</span><br><span class="line">        orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    }</span><br><span class="line">    sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">    invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finally, invoke all other BeanFactoryPostProcessors.</span></span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(nonOrderedPostProcessorNames.size());</span><br><span class="line">    <span class="keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) {</span><br><span class="line">        nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    }</span><br><span class="line">    invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clear cached merged bean definitions since the post-processors might have</span></span><br><span class="line">    <span class="comment">// modified the original metadata, e.g. replacing placeholders in values...</span></span><br><span class="line">    beanFactory.clearMetadataCache();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这一大段代码，实话说看得我云里雾里的，但站在巨人的肩膀上之后，我大概明白 <code>invokeBeanDefinitionRegistryPostProcessors</code> 这个方法调用是里面的重点，那接下来就随着巨人的指引看看这个方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokeBeanDefinitionRegistryPostProcessors</span><span class="params">(</span></span><br><span class="line"><span class="params">        Collection&lt;? extends BeanDefinitionRegistryPostProcessor&gt; postProcessors, BeanDefinitionRegistry registry, ApplicationStartup applicationStartup)</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionRegistryPostProcessor postProcessor : postProcessors) {</span><br><span class="line">        <span class="type">StartupStep</span> <span class="variable">postProcessBeanDefRegistry</span> <span class="operator">=</span> applicationStartup.start(<span class="string">"spring.context.beandef-registry.post-process"</span>)</span><br><span class="line">                .tag(<span class="string">"postProcessor"</span>, postProcessor::toString);</span><br><span class="line">        postProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">        postProcessBeanDefRegistry.end();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>debug 到 <code>postProcessBeanDefinitionRegistry</code> 这一行，发现 <code>postProcessors</code> 里面只有 <code>ConfigurationClassPostProcessor</code>，那么就进去看看这个类的 <code>postProcessBeanDefinitionRegistry</code> 在干什么。</p><p>下面代码会大量提到 configuration class 这个概念，而所谓 configuration class，就是带有 <code>@Configuration</code> 或者 <code>@Component</code> 注解的类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">registryId</span> <span class="operator">=</span> System.identityHashCode(registry);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.registriesPostProcessed.contains(registryId)) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                <span class="string">"postProcessBeanDefinitionRegistry already called on this post-processor against "</span> + registry);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.factoriesPostProcessed.contains(registryId)) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                <span class="string">"postProcessBeanFactory already called on this post-processor against "</span> + registry);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">this</span>.registriesPostProcessed.add(registryId);</span><br><span class="line"></span><br><span class="line">    processConfigBeanDefinitions(registry);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processConfigBeanDefinitions</span><span class="params">(BeanDefinitionRegistry registry)</span> {</span><br><span class="line">    List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的bean definition的名字</span></span><br><span class="line">    <span class="keyword">for</span> (String beanName : candidateNames) {</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDef</span> <span class="operator">=</span> registry.getBeanDefinition(beanName);</span><br><span class="line">        <span class="keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) {</span><br><span class="line">                logger.debug(<span class="string">"Bean definition has already been processed as a configuration class: "</span> + beanDef);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 检查这个bean definition是不是一个配置类</span></span><br><span class="line">        <span class="comment">// 1. 取得bean definition的metadata</span></span><br><span class="line">        <span class="comment">// 2. 设定configurationClass这个bean definition attribute的值，full或lite（暂不清楚是干什么用的）</span></span><br><span class="line">        <span class="comment">// 3. 如果指定了这个配置类的生效顺序，那么将其记录到order这个attribute中</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="built_in">this</span>.metadataReaderFactory)) {</span><br><span class="line">            configCandidates.add(<span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(beanDef, beanName));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return immediately if no @Configuration classes were found</span></span><br><span class="line">    <span class="keyword">if</span> (configCandidates.isEmpty()) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sort by previously determined @Order value, if applicable</span></span><br><span class="line">    configCandidates.sort((bd1, bd2) -&gt; {</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(i1, i2);</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Detect any custom bean name generation strategy supplied through the enclosing application context</span></span><br><span class="line">    <span class="type">SingletonBeanRegistry</span> <span class="variable">sbr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (registry <span class="keyword">instanceof</span> SingletonBeanRegistry _sbr) {</span><br><span class="line">        sbr = _sbr;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.localBeanNameGeneratorSet) {</span><br><span class="line">            <span class="type">BeanNameGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> (BeanNameGenerator) sbr.getSingleton(</span><br><span class="line">                    AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);</span><br><span class="line">            <span class="keyword">if</span> (generator != <span class="literal">null</span>) {</span><br><span class="line">                <span class="built_in">this</span>.componentScanBeanNameGenerator = generator;</span><br><span class="line">                <span class="built_in">this</span>.importBeanNameGenerator = generator;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.environment == <span class="literal">null</span>) {</span><br><span class="line">        <span class="built_in">this</span>.environment = <span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parse each @Configuration class</span></span><br><span class="line">    <span class="type">ConfigurationClassParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigurationClassParser</span>(</span><br><span class="line">            <span class="built_in">this</span>.metadataReaderFactory, <span class="built_in">this</span>.problemReporter, <span class="built_in">this</span>.environment,</span><br><span class="line">            <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(configCandidates);</span><br><span class="line">    Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(configCandidates.size());</span><br><span class="line">    <span class="keyword">do</span> {</span><br><span class="line">        <span class="type">StartupStep</span> <span class="variable">processConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationStartup.start(<span class="string">"spring.context.config-classes.parse"</span>);</span><br><span class="line">        parser.parse(candidates);</span><br><span class="line">        parser.validate();</span><br><span class="line"></span><br><span class="line">        Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(parser.getConfigurationClasses());</span><br><span class="line">        configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the model and create bean definitions based on its content</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.reader == <span class="literal">null</span>) {</span><br><span class="line">            <span class="built_in">this</span>.reader = <span class="keyword">new</span> <span class="title class_">ConfigurationClassBeanDefinitionReader</span>(</span><br><span class="line">                    registry, <span class="built_in">this</span>.sourceExtractor, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.environment,</span><br><span class="line">                    <span class="built_in">this</span>.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">        alreadyParsed.addAll(configClasses);</span><br><span class="line">        processConfig.tag(<span class="string">"classCount"</span>, () -&gt; String.valueOf(configClasses.size())).end();</span><br><span class="line"></span><br><span class="line">        candidates.clear();</span><br><span class="line">        <span class="keyword">if</span> (registry.getBeanDefinitionCount() &gt; candidateNames.length) {</span><br><span class="line">            String[] newCandidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">            Set&lt;String&gt; oldCandidateNames = Set.of(candidateNames);</span><br><span class="line">            Set&lt;String&gt; alreadyParsedClasses = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (ConfigurationClass configurationClass : alreadyParsed) {</span><br><span class="line">                alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (String candidateName : newCandidateNames) {</span><br><span class="line">                <span class="keyword">if</span> (!oldCandidateNames.contains(candidateName)) {</span><br><span class="line">                    <span class="type">BeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> registry.getBeanDefinition(candidateName);</span><br><span class="line">                    <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, <span class="built_in">this</span>.metadataReaderFactory) &amp;&amp;</span><br><span class="line">                            !alreadyParsedClasses.contains(bd.getBeanClassName())) {</span><br><span class="line">                        candidates.add(<span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(bd, candidateName));</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            candidateNames = newCandidateNames;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (!candidates.isEmpty());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span></span><br><span class="line">    <span class="keyword">if</span> (sbr != <span class="literal">null</span> &amp;&amp; !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {</span><br><span class="line">        sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Store the PropertySourceDescriptors to contribute them Ahead-of-time if necessary</span></span><br><span class="line">    <span class="built_in">this</span>.propertySourceDescriptors = parser.getPropertySourceDescriptors();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.metadataReaderFactory <span class="keyword">instanceof</span> CachingMetadataReaderFactory cachingMetadataReaderFactory) {</span><br><span class="line">        <span class="comment">// Clear cache in externally provided MetadataReaderFactory; this is a no-op</span></span><br><span class="line">        <span class="comment">// for a shared cache since it'll be cleared by the ApplicationContext.</span></span><br><span class="line">        cachingMetadataReaderFactory.clearCache();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>首先这里会遍历所有的 bean definition，找到其中的配置类，然后调用 <code>parse</code> 方法解析它们。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> {</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder holder : configCandidates) {</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> holder.getBeanDefinition();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 如果是从Spring Boot项目进来的，那么这里的bd就是主类封装成的AnnotatedGenericBeanDefinition</span></span><br><span class="line">            <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AnnotatedBeanDefinition annotatedBeanDef) {</span><br><span class="line">                parse(annotatedBeanDef.getMetadata(), holder.getBeanName());</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AbstractBeanDefinition abstractBeanDef &amp;&amp; abstractBeanDef.hasBeanClass()) {</span><br><span class="line">                parse(abstractBeanDef.getBeanClass(), holder.getBeanName());</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionStoreException ex) {</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">                    <span class="string">"Failed to parse configuration class ["</span> + bd.getBeanClassName() + <span class="string">"]"</span>, ex);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载默认的配置，即自动装配的入口</span></span><br><span class="line">    <span class="built_in">this</span>.deferredImportSelectorHandler.process();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">(AnnotationMetadata metadata, String beanName)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    processConfigurationClass(<span class="keyword">new</span> <span class="title class_">ConfigurationClass</span>(metadata, beanName), DEFAULT_EXCLUSION_FILTER);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processConfigurationClass</span><span class="params">(ConfigurationClass configClass, Predicate&lt;String&gt; filter)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE_CONFIGURATION)) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">ConfigurationClass</span> <span class="variable">existingClass</span> <span class="operator">=</span> <span class="built_in">this</span>.configurationClasses.get(configClass);</span><br><span class="line">    <span class="keyword">if</span> (existingClass != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (configClass.isImported()) {</span><br><span class="line">            <span class="keyword">if</span> (existingClass.isImported()) {</span><br><span class="line">                existingClass.mergeImportedBy(configClass);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// Otherwise ignore new imported config class; existing non-imported class overrides it.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// Explicit bean definition found, probably replacing an import.</span></span><br><span class="line">            <span class="comment">// Let's remove the old one and go with the new one.</span></span><br><span class="line">            <span class="built_in">this</span>.configurationClasses.remove(configClass);</span><br><span class="line">            <span class="built_in">this</span>.knownSuperclasses.values().removeIf(configClass::equals);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Recursively process the configuration class and its superclass hierarchy.</span></span><br><span class="line">    <span class="comment">// 递归处理当前的configuration class及其父类</span></span><br><span class="line">    <span class="type">SourceClass</span> <span class="variable">sourceClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line"></span><br><span class="line">        sourceClass = asSourceClass(configClass, filter);</span><br><span class="line">        <span class="keyword">do</span> {</span><br><span class="line">            sourceClass = doProcessConfigurationClass(configClass, sourceClass, filter);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (sourceClass != <span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">                <span class="string">"I/O failure while processing configuration class ["</span> + sourceClass + <span class="string">"]"</span>, ex);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.configurationClasses.put(configClass, configClass);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConfigurationClassParser</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> SourceClass <span class="title function_">doProcessConfigurationClass</span><span class="params">(</span></span><br><span class="line"><span class="params">        ConfigurationClass configClass, SourceClass sourceClass, Predicate&lt;String&gt; filter)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果这个configuration class带有@Component注解</span></span><br><span class="line">    <span class="comment">// 那么就递归处理其内部类</span></span><br><span class="line">    <span class="keyword">if</span> (configClass.getMetadata().isAnnotated(Component.class.getName())) {</span><br><span class="line">        <span class="comment">// Recursively process any member (nested) classes first</span></span><br><span class="line">        processMemberClasses(configClass, sourceClass, filter);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @PropertySource annotations</span></span><br><span class="line">    <span class="comment">// 针对@PropertySource注解的处理</span></span><br><span class="line">    <span class="keyword">for</span> (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), org.springframework.context.annotation.PropertySource.class,</span><br><span class="line">            PropertySources.class, <span class="literal">true</span>)) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.propertySourceRegistry != <span class="literal">null</span>) {</span><br><span class="line">            <span class="built_in">this</span>.propertySourceRegistry.processPropertySource(propertySource);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            logger.info(<span class="string">"Ignoring @PropertySource annotation on ["</span> + sourceClass.getMetadata().getClassName() +</span><br><span class="line">                    <span class="string">"]. Reason: Environment must implement ConfigurableEnvironment"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Search for locally declared @ComponentScan annotations first.</span></span><br><span class="line">    <span class="comment">// 根据@ComponentScan注解扫描项目中的bean</span></span><br><span class="line">    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), ComponentScan.class, ComponentScans.class,</span><br><span class="line">            MergedAnnotation::isDirectlyPresent);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fall back to searching for @ComponentScan meta-annotations (which indirectly</span></span><br><span class="line">    <span class="comment">// includes locally declared composed annotations).</span></span><br><span class="line">    <span class="comment">// 如果没找到直接使用的@ComponentScan注解，那么就尝试找间接的引用</span></span><br><span class="line">    <span class="comment">// 如 @SpringBootApplication -&gt; @ComponentScan</span></span><br><span class="line">    <span class="keyword">if</span> (componentScans.isEmpty()) {</span><br><span class="line">        componentScans = AnnotationConfigUtils.attributesForRepeatable(sourceClass.getMetadata(),</span><br><span class="line">                ComponentScan.class, ComponentScans.class, MergedAnnotation::isMetaPresent);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">            !<span class="built_in">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {</span><br><span class="line">        <span class="keyword">for</span> (AnnotationAttributes componentScan : componentScans) {</span><br><span class="line">            <span class="comment">// The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span></span><br><span class="line">            <span class="comment">// 在这里立即开始扫描</span></span><br><span class="line">            Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line">                    <span class="built_in">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">            <span class="comment">// Check the set of scanned definitions for any further config classes and parse recursively if needed</span></span><br><span class="line">            <span class="keyword">for</span> (BeanDefinitionHolder holder : scannedBeanDefinitions) {</span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">bdCand</span> <span class="operator">=</span> holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">                <span class="keyword">if</span> (bdCand == <span class="literal">null</span>) {</span><br><span class="line">                    bdCand = holder.getBeanDefinition();</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 检查扫描到的这个bean是不是一个configuration class</span></span><br><span class="line">                <span class="comment">// 如果是，那么递归查找与它关脸的configuration class，如@Bean定义的bean，或带有@Import注解的@Component类</span></span><br><span class="line">                <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, <span class="built_in">this</span>.metadataReaderFactory)) {</span><br><span class="line">                    parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @Import annotations</span></span><br><span class="line">    <span class="comment">// 递归处理@Import注解</span></span><br><span class="line">    processImports(configClass, sourceClass, getImports(sourceClass), filter, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @ImportResource annotations</span></span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">importResource</span> <span class="operator">=</span></span><br><span class="line">            AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);</span><br><span class="line">    <span class="keyword">if</span> (importResource != <span class="literal">null</span>) {</span><br><span class="line">        String[] resources = importResource.getStringArray(<span class="string">"locations"</span>);</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">BeanDefinitionReader</span>&gt; readerClass = importResource.getClass(<span class="string">"reader"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String resource : resources) {</span><br><span class="line">            <span class="type">String</span> <span class="variable">resolvedResource</span> <span class="operator">=</span> <span class="built_in">this</span>.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">            configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process individual @Bean methods</span></span><br><span class="line">    <span class="comment">// 处理带有@Bean的方法</span></span><br><span class="line">    Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line">    <span class="keyword">for</span> (MethodMetadata methodMetadata : beanMethods) {</span><br><span class="line">        configClass.addBeanMethod(<span class="keyword">new</span> <span class="title class_">BeanMethod</span>(methodMetadata, configClass));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process default methods on interfaces</span></span><br><span class="line">    processInterfaces(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process superclass, if any</span></span><br><span class="line">    <span class="keyword">if</span> (sourceClass.getMetadata().hasSuperClass()) {</span><br><span class="line">        <span class="type">String</span> <span class="variable">superclass</span> <span class="operator">=</span> sourceClass.getMetadata().getSuperClassName();</span><br><span class="line">        <span class="keyword">if</span> (superclass != <span class="literal">null</span> &amp;&amp; !superclass.startsWith(<span class="string">"java"</span>) &amp;&amp;</span><br><span class="line">                !<span class="built_in">this</span>.knownSuperclasses.containsKey(superclass)) {</span><br><span class="line">            <span class="built_in">this</span>.knownSuperclasses.put(superclass, configClass);</span><br><span class="line">            <span class="comment">// Superclass found, return its annotation metadata and recurse</span></span><br><span class="line">            <span class="keyword">return</span> sourceClass.getSuperClass();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No superclass -&gt; processing is complete</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Resource定位"><a href="#Resource定位" class="headerlink" title="Resource定位"></a>Resource 定位</h3><p>这里的重点是 <code>Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions = this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</code> 这个方法调用，它负责处理扫描的具体过程，所以点进 <code>parse</code> 方法看它干了什么。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">parse</span><span class="params">(AnnotationAttributes componentScan, String declaringClass)</span> {</span><br><span class="line">    <span class="comment">// 取得扫描器，并设置它的各个属性</span></span><br><span class="line">    <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(<span class="built_in">this</span>.registry,</span><br><span class="line">            componentScan.getBoolean(<span class="string">"useDefaultFilters"</span>), <span class="built_in">this</span>.environment, <span class="built_in">this</span>.resourceLoader);</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">BeanNameGenerator</span>&gt; generatorClass = componentScan.getClass(<span class="string">"nameGenerator"</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">useInheritedGenerator</span> <span class="operator">=</span> (BeanNameGenerator.class == generatorClass);</span><br><span class="line">    scanner.setBeanNameGenerator(useInheritedGenerator ? <span class="built_in">this</span>.beanNameGenerator :</span><br><span class="line">            BeanUtils.instantiateClass(generatorClass));</span><br><span class="line"></span><br><span class="line">    <span class="type">ScopedProxyMode</span> <span class="variable">scopedProxyMode</span> <span class="operator">=</span> componentScan.getEnum(<span class="string">"scopedProxy"</span>);</span><br><span class="line">    <span class="keyword">if</span> (scopedProxyMode != ScopedProxyMode.DEFAULT) {</span><br><span class="line">        scanner.setScopedProxyMode(scopedProxyMode);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">ScopeMetadataResolver</span>&gt; resolverClass = componentScan.getClass(<span class="string">"scopeResolver"</span>);</span><br><span class="line">        scanner.setScopeMetadataResolver(BeanUtils.instantiateClass(resolverClass));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    scanner.setResourcePattern(componentScan.getString(<span class="string">"resourcePattern"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (AnnotationAttributes includeFilterAttributes : componentScan.getAnnotationArray(<span class="string">"includeFilters"</span>)) {</span><br><span class="line">        List&lt;TypeFilter&gt; typeFilters = TypeFilterUtils.createTypeFiltersFor(includeFilterAttributes, <span class="built_in">this</span>.environment,</span><br><span class="line">                <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.registry);</span><br><span class="line">        <span class="keyword">for</span> (TypeFilter typeFilter : typeFilters) {</span><br><span class="line">            scanner.addIncludeFilter(typeFilter);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (AnnotationAttributes excludeFilterAttributes : componentScan.getAnnotationArray(<span class="string">"excludeFilters"</span>)) {</span><br><span class="line">        List&lt;TypeFilter&gt; typeFilters = TypeFilterUtils.createTypeFiltersFor(excludeFilterAttributes, <span class="built_in">this</span>.environment,</span><br><span class="line">            <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.registry);</span><br><span class="line">        <span class="keyword">for</span> (TypeFilter typeFilter : typeFilters) {</span><br><span class="line">            scanner.addExcludeFilter(typeFilter);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">lazyInit</span> <span class="operator">=</span> componentScan.getBoolean(<span class="string">"lazyInit"</span>);</span><br><span class="line">    <span class="keyword">if</span> (lazyInit) {</span><br><span class="line">        scanner.getBeanDefinitionDefaults().setLazyInit(<span class="literal">true</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; basePackages = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 取得basePackages的值，默认情况下为空，因为@SpringBootApplication里面就没给@ComponentScan配置这个值</span></span><br><span class="line">    String[] basePackagesArray = componentScan.getStringArray(<span class="string">"basePackages"</span>);</span><br><span class="line">    <span class="keyword">for</span> (String pkg : basePackagesArray) {</span><br><span class="line">        String[] tokenized = StringUtils.tokenizeToStringArray(<span class="built_in">this</span>.environment.resolvePlaceholders(pkg),</span><br><span class="line">                ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">        Collections.addAll(basePackages, tokenized);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 通过basePackageClasses里面指定的类找到它们所在的包，</span></span><br><span class="line">    <span class="comment">// 并将其加入basePackages</span></span><br><span class="line">    <span class="comment">// 默认情况下这个也是空的</span></span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; clazz : componentScan.getClassArray(<span class="string">"basePackageClasses"</span>)) {</span><br><span class="line">        basePackages.add(ClassUtils.getPackageName(clazz));</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 查到最后basePackages还是空的话</span></span><br><span class="line">    <span class="comment">// 那就把带着@ComponentScan这个注解的类所在的包加到basePackages里面</span></span><br><span class="line">    <span class="comment">// 因为启动类带着这个注解，所以启动类所在的包就会被加进去</span></span><br><span class="line">    <span class="keyword">if</span> (basePackages.isEmpty()) {</span><br><span class="line">        basePackages.add(ClassUtils.getPackageName(declaringClass));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    scanner.addExcludeFilter(<span class="keyword">new</span> <span class="title class_">AbstractTypeHierarchyTraversingFilter</span>(<span class="literal">false</span>, <span class="literal">false</span>) {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">matchClassName</span><span class="params">(String className)</span> {</span><br><span class="line">            <span class="keyword">return</span> declaringClass.equals(className);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据basePackages扫描</span></span><br><span class="line">    <span class="keyword">return</span> scanner.doScan(StringUtils.toStringArray(basePackages));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>走到 <code>scanner.doScan</code> 的时候，就完成了定位这一步。接下来继续走进 <code>ClassPathBeanDefinitionScanner#doScan</code> 看它是怎么载入和注册各个 BeanDefinition 的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">doScan</span><span class="params">(String... basePackages)</span> {</span><br><span class="line">    Assert.notEmpty(basePackages, <span class="string">"At least one base package must be specified"</span>);</span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String basePackage : basePackages) {</span><br><span class="line">        <span class="comment">// 从指定的包中扫描需要装载的Bean</span></span><br><span class="line">        Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">        <span class="keyword">for</span> (BeanDefinition candidate : candidates) {</span><br><span class="line">            <span class="comment">// 得到这个bean的scope，如singleton、prototype等</span></span><br><span class="line">            <span class="type">ScopeMetadata</span> <span class="variable">scopeMetadata</span> <span class="operator">=</span> <span class="built_in">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">            <span class="comment">// 并将其设置到BeanDefinition中</span></span><br><span class="line">            candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">            <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> <span class="built_in">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="built_in">this</span>.registry);</span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition abstractBeanDefinition) {</span><br><span class="line">                postProcessBeanDefinition(abstractBeanDefinition, beanName);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition annotatedBeanDefinition) {</span><br><span class="line">                AnnotationConfigUtils.processCommonDefinitionAnnotations(annotatedBeanDefinition);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 检查与这个bean名字对应的BeanDefinition是否已经被注册过</span></span><br><span class="line">            <span class="keyword">if</span> (checkCandidate(beanName, candidate)) {</span><br><span class="line">                <span class="type">BeanDefinitionHolder</span> <span class="variable">definitionHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(candidate, beanName);</span><br><span class="line">                definitionHolder =</span><br><span class="line">                        AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">                beanDefinitions.add(definitionHolder);</span><br><span class="line">                <span class="comment">// 将这个bean注册到IoC容器</span></span><br><span class="line">                registerBeanDefinition(definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="BeanDefinition载入"><a href="#BeanDefinition载入" class="headerlink" title="BeanDefinition载入"></a>BeanDefinition 载入</h3><p>上面代码的 for 循环里首先会执行 <code>findCandidateComponents</code>，这里就是负责载入这个 basePackage 下的所有 BeanDefinition 的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;BeanDefinition&gt; <span class="title function_">findCandidateComponents</span><span class="params">(String basePackage)</span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.componentsIndex != <span class="literal">null</span> &amp;&amp; indexSupportsIncludeFilters()) {</span><br><span class="line">        <span class="keyword">return</span> addCandidateComponentsFromIndex(<span class="built_in">this</span>.componentsIndex, basePackage);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> scanCandidateComponents(basePackage);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;BeanDefinition&gt; <span class="title function_">scanCandidateComponents</span><span class="params">(String basePackage)</span> {</span><br><span class="line">    Set&lt;BeanDefinition&gt; candidates = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 根据basePackages生成classpath，</span></span><br><span class="line">        <span class="comment">// 如classpath*:com/example/demo/**/*.class</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">packageSearchPath</span> <span class="operator">=</span> ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">                resolveBasePackage(basePackage) + <span class="string">'/'</span> + <span class="built_in">this</span>.resourcePattern;</span><br><span class="line">        <span class="comment">// 从这个classpath下面扫描所有匹配的资源，也就是类</span></span><br><span class="line">        Resource[] resources = getResourcePatternResolver().getResources(packageSearchPath);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">traceEnabled</span> <span class="operator">=</span> logger.isTraceEnabled();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">debugEnabled</span> <span class="operator">=</span> logger.isDebugEnabled();</span><br><span class="line">        <span class="comment">// 循环处理上面找到的类，将符合条件的类包装成ScannedGenericBeanDefinition并加到candidates中</span></span><br><span class="line">        <span class="keyword">for</span> (Resource resource : resources) {</span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> resource.getFilename();</span><br><span class="line">            <span class="keyword">if</span> (filename != <span class="literal">null</span> &amp;&amp; filename.contains(ClassUtils.CGLIB_CLASS_SEPARATOR)) {</span><br><span class="line">                <span class="comment">// Ignore CGLIB-generated classes in the classpath</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (traceEnabled) {</span><br><span class="line">                logger.trace(<span class="string">"Scanning "</span> + resource);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="type">MetadataReader</span> <span class="variable">metadataReader</span> <span class="operator">=</span> getMetadataReaderFactory().getMetadataReader(resource);</span><br><span class="line">                <span class="comment">// 检查这个类是不是既没有命中任何一个exclude filter，并至少命中了一个include filter</span></span><br><span class="line">                <span class="comment">// 其中一个include filter就是根据@Component注解来过滤的</span></span><br><span class="line">                <span class="keyword">if</span> (isCandidateComponent(metadataReader)) {</span><br><span class="line">                    <span class="type">ScannedGenericBeanDefinition</span> <span class="variable">sbd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScannedGenericBeanDefinition</span>(metadataReader);</span><br><span class="line">                    sbd.setSource(resource);</span><br><span class="line">                    <span class="keyword">if</span> (isCandidateComponent(sbd)) {</span><br><span class="line">                        <span class="comment">// 打日志，略</span></span><br><span class="line">                        candidates.add(sbd);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span> {</span><br><span class="line">                        <span class="comment">// 打日志，略</span></span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 打日志，略</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">catch</span> (FileNotFoundException ex) {</span><br><span class="line">                <span class="comment">// 打日志，略</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">catch</span> (ClassFormatException ex) {</span><br><span class="line">                <span class="keyword">if</span> (shouldIgnoreClassFormatException) {</span><br><span class="line">                    <span class="comment">// 打日志，略</span></span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(<span class="string">"Incompatible class format in "</span> + resource +</span><br><span class="line">                            <span class="string">": set system property 'spring.classformat.ignore' to 'true' "</span> +</span><br><span class="line">                            <span class="string">"if you mean to ignore such files during classpath scanning"</span>, ex);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(<span class="string">"Failed to read candidate component class: "</span> + resource, ex);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(<span class="string">"I/O failure during classpath scanning"</span>, ex);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> candidates;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="注册BeanDefinition"><a href="#注册BeanDefinition" class="headerlink" title="注册BeanDefinition"></a>注册 BeanDefinition</h3><p>回到 <code>doScan</code> 方法，在得到所有的 BeanDefinition 之后，就会调用 <code>registerBeanDefinition</code> 方法来完成 BeanDefinition 的注册。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span> {</span><br><span class="line">    BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// BeanDefinitionReaderUtils</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(</span></span><br><span class="line"><span class="params">        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span><br><span class="line">        <span class="keyword">throws</span> BeanDefinitionStoreException {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register bean definition under primary name.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> definitionHolder.getBeanName();</span><br><span class="line">    <span class="comment">// 将这个bean注册到DefaultListableBeanFactory的BeanDefinitionMap</span></span><br><span class="line">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register aliases for bean name, if any.</span></span><br><span class="line">    String[] aliases = definitionHolder.getAliases();</span><br><span class="line">    <span class="keyword">if</span> (aliases != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (String alias : aliases) {</span><br><span class="line">            registry.registerAlias(beanName, alias);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里就是把传进来的 BeanDefinition 注册到 <code>DefaultListableBeanFactory</code> 的 <code>BeanDefinitionMap</code> 中。这部分在上一篇博文中已经提过，就不重复了。</p><p>在 <code>doScan</code> 方法的 for 循环遍历完所有的 BeanDefinition 之后，所有带有 <code>@Component</code> 注解的 bean 就全部注册好了。接下来会回到 <code>doProcessConfigurationClass</code> 方法，继续处理带有 <code>@Import</code> 注解的类和带有 <code>@Bean</code> 注解的方法。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaGVsbG8tc2hmL3AvMTEwNTE0NzYuaHRtbA==">SpringBoot 启动流程分析（四）：IoC 容器的初始化过程<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/Spring-Boot/">Spring Boot</category>
      
      
      <comments>https://www.boris1993.com/spring-boot-application-start-up-post-processing.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Spring Boot 启动流程分析</title>
      <link>https://www.boris1993.com/spring-boot-application-starts-up.html</link>
      <guid>https://www.boris1993.com/spring-boot-application-starts-up.html</guid>
      <pubDate>Sat, 06 Jan 2024 14:54:15 GMT</pubDate>
      
      <description>&lt;p&gt;想来用了这么久的 Spring Boot，但一直没仔细了解它是怎么启动的。那既然想起来了，不如趁热打铁，从它的入口开始，深入看看 Spring Boot 在启动时都做了些什么。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>想来用了这么久的 Spring Boot，但一直没仔细了解它是怎么启动的。那既然想起来了，不如趁热打铁，从它的入口开始，深入看看 Spring Boot 在启动时都做了些什么。</p><span id="more"></span><h2 id="启动入口"><a href="#启动入口" class="headerlink" title="启动入口"></a>启动入口</h2><p>入口这部分就没啥说的，跟个 Hello world 差不多，一个 <code>main</code> 方法执行 <code>SpringApplication#run</code> 来启动整个 Spring Boot 应用。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="SpringBootApplication注解"><a href="#SpringBootApplication注解" class="headerlink" title="@SpringBootApplication注解"></a>@SpringBootApplication 注解</h3><p>进到 <code>@SpringBootApplication</code> 注解的源码可以看出，它实际上是 <code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 的组合。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = { </span></span><br><span class="line"><span class="meta">    @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">    @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) </span></span><br><span class="line"><span class="meta">})</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication {</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="SpringBootConfiguration注解"><a href="#SpringBootConfiguration注解" class="headerlink" title="@SpringBootConfiguration注解"></a>@SpringBootConfiguration 注解</h4><p><code>@SpringBootConfiguration</code> 注解实际上只是 <code>@Configuration</code> 注解的套娃，区别只有两点：</p><ol><li><code>@SpringBootConfiguration</code> 是 Spring Boot 提供的注解，而 <code>@Configuration</code> 是 Spring 提供的注解；</li><li><code>@SpringBootConfiguration</code> 注解在整个应用中只能出现一次，<code>@Configuration</code> 注解则可以需要有多少就用多少次。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration {</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="EnableAutoConfiguration注解"><a href="#EnableAutoConfiguration注解" class="headerlink" title="@EnableAutoConfiguration注解"></a>@EnableAutoConfiguration 注解</h4><p><code>@EnableAutoConfiguration</code> 注解通过引入 <code>AutoConfigurationImportSelector</code> 来开启 Spring Boot 的自动配置功能。这部分内容我在另一篇博文 <a href="/java-spring-autoconfiguration.html">Spring Boot 自动配置的原理</a>中有详细的说明，这里就不再重复了。</p><h4 id="ComponentScan注解"><a href="#ComponentScan注解" class="headerlink" title="@ComponentScan注解"></a>@ComponentScan 注解</h4><p><code>@ComponentScan</code> 注解用来配置 Spring 如何扫描组件。我们可以通过设定 <code>basePackageClasses</code> 或 <code>basePackages</code> 属性来指定从哪些包中扫描，而在不指定的情况下，Spring 就会从带有这个注解的类所在的包开始扫描。</p><p>因为这个注解会在启动类中被引入，而启动类又在项目最顶层的包中（应该没有谁闲的会去挪启动类的位置吧），所以 Spring 就会从顶层包开始往下扫描组件。</p><h2 id="SpringApplication类"><a href="#SpringApplication类" class="headerlink" title="SpringApplication类"></a>SpringApplication 类</h2><p>从启动类对 <code>SpringApplication#run</code> 的调用一路追下去，最后会走到 <code>SpringApplication</code> 类的这个代码块：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(primarySources).run(args);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="SpringApplication的构造方法"><a href="#SpringApplication的构造方法" class="headerlink" title="SpringApplication的构造方法"></a>SpringApplication 的构造方法</h3><p>可以看到这里先实例化了一个 <code>SpringApplication</code> 对象，那么顺着对应的构造方法一路追下去，最后会看到这样一个构造方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> {</span><br><span class="line">    <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line">    <span class="built_in">this</span>.primarySources = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">// 判断应用程序的类型</span></span><br><span class="line">    <span class="built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">// 实例化bootstrap registry initializer</span></span><br><span class="line">    <span class="built_in">this</span>.bootstrapRegistryInitializers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">            getSpringFactoriesInstances(BootstrapRegistryInitializer.class));</span><br><span class="line">    <span class="comment">// 实例化所有可用的initializer</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">// 实例化所有可用的listener</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">// 找到主类</span></span><br><span class="line">    <span class="built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="判断应用程序的类型"><a href="#判断应用程序的类型" class="headerlink" title="判断应用程序的类型"></a>判断应用程序的类型</h4><p>Spring Boot 需要判断应用是哪种类型，来决定要不要启动它内嵌的 web server，以及启动哪种 web server。它会根据这样一个规则来判断当前应用的类型：</p><ul><li>如果能找到 <code>org.springframework.web.reactive.DispatcherHandler</code> 类，同时找不到 <code>org.springframework.web.servlet.DispatcherServlet</code> 和 <code>org.glassfish.jersey.servlet.ServletContainer</code>，那么就判定当前应用是一个 reactive web 应用，并会在将来启动面向 reactive 的 web server；</li><li>如果 <code>org.springframework.web.servlet.DispatcherServlet</code> 和 <code>org.glassfish.jersey.servlet.ServletContainer</code> 都找不到，说明这个应用不是一个 web application，将来也不会启动任何 web server；</li><li>如果以上条件都不符合，那么就判定这个应用是一个 servlet web 应用，将来会启动面向 servlet 的 web server。</li></ul><h4 id="实例化initializer和listener"><a href="#实例化initializer和listener" class="headerlink" title="实例化initializer和listener"></a>实例化 initializer 和 listener</h4><p>点进 <code>getSpringFactoriesInstances</code> 方法的实现并顺着追下去，最终可以看到这样一个代码块：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, ArgumentResolver argumentResolver)</span> {</span><br><span class="line">    <span class="keyword">return</span> SpringFactoriesLoader.forDefaultResourceLocation(getClassLoader()).load(type, argumentResolver);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>再顺着 <code>forDefaultResourceLocation</code> 方法的实现，最终会走到这里：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SpringFactoriesLoader <span class="title function_">forResourceLocation</span><span class="params">(String resourceLocation, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> {</span><br><span class="line">    Assert.hasText(resourceLocation, <span class="string">"'resourceLocation' must not be empty"</span>);</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">resourceClassLoader</span> <span class="operator">=</span> (classLoader != <span class="literal">null</span> ? classLoader :</span><br><span class="line">            SpringFactoriesLoader.class.getClassLoader());</span><br><span class="line">    Map&lt;String, SpringFactoriesLoader&gt; loaders = cache.computeIfAbsent(</span><br><span class="line">            resourceClassLoader, key -&gt; <span class="keyword">new</span> <span class="title class_">ConcurrentReferenceHashMap</span>&lt;&gt;());</span><br><span class="line">    <span class="keyword">return</span> loaders.computeIfAbsent(resourceLocation, key -&gt;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SpringFactoriesLoader</span>(classLoader, loadFactoriesResource(resourceClassLoader, resourceLocation)));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看起来好像云里雾里的，下断点调试一下看出来了，这里就是扫描所有 <code>META-INF</code> 目录下的 <code>spring.factories</code> 文件，并把里面所有的键值对放到一个 Map 里。最后我们可以得到一个包含了这个 Map 的 <code>SpringFactoriesLoader</code> 对象。</p><p><img data-src="https://blog-static.boris1993.com/how-spring-boot-application-starts-up/load-bootstrap-initializers-1.png"></p><p>接着看 <code>load</code> 方法，顺着追下去会走到这个代码块：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">load</span><span class="params">(Class&lt;T&gt; factoryType, <span class="meta">@Nullable</span> ArgumentResolver argumentResolver,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> FailureHandler failureHandler)</span> {</span><br><span class="line"></span><br><span class="line">    Assert.notNull(factoryType, <span class="string">"'factoryType' must not be null"</span>);</span><br><span class="line">    List&lt;String&gt; implementationNames = loadFactoryNames(factoryType);</span><br><span class="line">    logger.trace(LogMessage.format(<span class="string">"Loaded [%s] names: %s"</span>, factoryType.getName(), implementationNames));</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(implementationNames.size());</span><br><span class="line">    <span class="type">FailureHandler</span> <span class="variable">failureHandlerToUse</span> <span class="operator">=</span> (failureHandler != <span class="literal">null</span>) ? failureHandler : THROWING_FAILURE_HANDLER;</span><br><span class="line">    <span class="keyword">for</span> (String implementationName : implementationNames) {</span><br><span class="line">        <span class="type">T</span> <span class="variable">factory</span> <span class="operator">=</span> instantiateFactory(implementationName, factoryType, argumentResolver, failureHandlerToUse);</span><br><span class="line">        <span class="keyword">if</span> (factory != <span class="literal">null</span>) {</span><br><span class="line">            result.add(factory);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    AnnotationAwareOrderComparator.sort(result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里就是从上面得到的 Map 中找到 <code>factoryType</code> 传进来的接口对应的实现类，分别调用它们的构造方法将其实例化，然后把得到的对象放在 List 里面返回，并交给外层的 <code>setInitializers</code> 方法来把这个 List 放在 <code>SpringApplication</code> 类的成员变量 <code>initializers</code> 中。</p><p>实例化 listener 也是一样的流程。至于 <code>ApplicationListener</code> 则是 Spring 的事件监听器，利用观察者模式，通过 <code>ApplicationEvent</code> 和 <code>ApplicationListener</code> 接口实现对 Spring 容器全生命周期的监听，同时也可以监听自定义的事件。</p><h4 id="找到主类"><a href="#找到主类" class="headerlink" title="找到主类"></a>找到主类</h4><p>顺着 <code>deduceMainApplicationClass</code> 的实现，会注意到这么两个方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() {</span><br><span class="line">    <span class="keyword">return</span> StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE)</span><br><span class="line">        .walk(<span class="built_in">this</span>::findMainClass)</span><br><span class="line">        .orElse(<span class="literal">null</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Optional&lt;Class&lt;?&gt;&gt; findMainClass(Stream&lt;StackFrame&gt; stack) {</span><br><span class="line">    <span class="keyword">return</span> stack.filter((frame) -&gt; Objects.equals(frame.getMethodName(), <span class="string">"main"</span>))</span><br><span class="line">        .findFirst()</span><br><span class="line">        .map(StackWalker.StackFrame::getDeclaringClass);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看起来挺简单粗暴的，就是遍历栈帧，找执行了 <code>main</code> 方法的那个栈，然后找到这个栈对应的类。</p><h2 id="run方法"><a href="#run方法" class="headerlink" title="run方法"></a>run 方法</h2><p>经过上面一顿操作，这个 <code>SpringApplication</code> 对象就初始化好了，接下来就会调用它的 <code>run</code> 方法开始启动。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(String... args)</span> {</span><br><span class="line">    <span class="type">Startup</span> <span class="variable">startup</span> <span class="operator">=</span> Startup.create();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.registerShutdownHook) {</span><br><span class="line">        SpringApplication.shutdownHook.enableShutdownHookAddition();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 创建 bootstrap context</span></span><br><span class="line">    <span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> createBootstrapContext();</span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 进入无头模式</span></span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    <span class="comment">// 启动listener</span></span><br><span class="line">    <span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br><span class="line">    listeners.starting(bootstrapContext, <span class="built_in">this</span>.mainApplicationClass);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line">        <span class="comment">// 准备环境</span></span><br><span class="line">        <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line">        <span class="type">Banner</span> <span class="variable">printedBanner</span> <span class="operator">=</span> printBanner(environment);</span><br><span class="line">        <span class="comment">// 创建application context</span></span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        context.setApplicationStartup(<span class="built_in">this</span>.applicationStartup);</span><br><span class="line">        prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">        <span class="comment">// 刷新application context</span></span><br><span class="line">        refreshContext(context);</span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        <span class="comment">// 收尾</span></span><br><span class="line">        startup.started();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) {</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">StartupInfoLogger</span>(<span class="built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), startup);</span><br><span class="line">        }</span><br><span class="line">        listeners.started(context, startup.timeTakenToStarted());</span><br><span class="line">        callRunners(context, applicationArguments);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) {</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">if</span> (context.isRunning()) {</span><br><span class="line">            listeners.ready(context, startup.ready());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) {</span><br><span class="line">        <span class="comment">// 略</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="创建bootstrap-context"><a href="#创建bootstrap-context" class="headerlink" title="创建bootstrap context"></a>创建 bootstrap context</h3><p>点进 <code>createBootstrapContext</code> 方法，可以看到这样一个代码块：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DefaultBootstrapContext <span class="title function_">createBootstrapContext</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBootstrapContext</span>();</span><br><span class="line">    <span class="built_in">this</span>.bootstrapRegistryInitializers.forEach((initializer) -&gt; initializer.initialize(bootstrapContext));</span><br><span class="line">    <span class="keyword">return</span> bootstrapContext;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在构造 <code>SpringApplication</code> 时准备的 <code>this.bootstrapRegistryInitializers</code> 在这用上了。看代码的话就是分别执行每个 initializer 的 <code>initailize</code> 方法。但是我这个应用里面没有 <code>BootstrapRegistryInitializer</code> 的实现类，所以也就没法深入进去看它到底干了什么。</p><p>不过看了眼<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctYm9vdC9ibGFtZS84MzcwNDdhYjc5YTIyNmQ0MTZkZjY2ZDY3ZDJmNzY4NmFiNzI5M2NkL3NwcmluZy1ib290LXByb2plY3Qvc3ByaW5nLWJvb3Qvc3JjL21haW4vamF2YS9vcmcvc3ByaW5nZnJhbWV3b3JrL2Jvb3QvU3ByaW5nQXBwbGljYXRpb24uamF2YSNMMzU3"> Git Blame<i class="fa fa-external-link-alt"></i></span>，发现了这么一段话：</p><blockquote><p>Refactor <code>BootstrapRegistry</code> support following initial prototype work with the Spring Cloud team.</p></blockquote><p>看起来是跟 Spring Cloud 相关的，那暂且就不关注了。</p><h3 id="进入无头模式"><a href="#进入无头模式" class="headerlink" title="进入无头模式"></a>进入无头模式</h3><p>在 Oracle 的文档<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmljYWwtcmVzb3VyY2VzL2FydGljbGVzL2phdmFzZS9oZWFkbGVzcy5odG1s"> Using Headless Mode in the Java SE Platform<i class="fa fa-external-link-alt"></i></span>中提到</p><blockquote><p>Headless mode is a system configuration in which the display device, keyboard, or mouse is lacking. Sounds unexpected, but actually you can perform different operations in this mode, even with graphic data.</p><p>Where it is applicable? Let’s say that your application repeatedly generates a certain image, for example, a graphical authorization code that must be changed every time a user logs in to the system. When creating an image, your application needs neither the display nor the keyboard. Let’s assume now that you have a mainframe or dedicated server on your project that has no display device, keyboard, or mouse. The ideal decision is to use this environment’s substantial computing power for the visual as well as the nonvisual features. An image that was generated in the headless mode system then can be passed to the headful system for further rendering.</p></blockquote><p>其实就是，像 web 服务之类不需要显示界面的应用，就可以让它进入无头模式，让它在没有显示器等输入输出设备时也能启动，还可以提高计算效率。</p><h3 id="启动listener"><a href="#启动listener" class="headerlink" title="启动listener"></a>启动 listener</h3><p>点进 <code>getRunListeners</code> 的实现可以看到如下代码块：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title function_">getRunListeners</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">ArgumentResolver</span> <span class="variable">argumentResolver</span> <span class="operator">=</span> ArgumentResolver.of(SpringApplication.class, <span class="built_in">this</span>);</span><br><span class="line">    argumentResolver = argumentResolver.and(String[].class, args);</span><br><span class="line">    List&lt;SpringApplicationRunListener&gt; listeners = getSpringFactoriesInstances(SpringApplicationRunListener.class,</span><br><span class="line">            argumentResolver);</span><br><span class="line">    <span class="type">SpringApplicationHook</span> <span class="variable">hook</span> <span class="operator">=</span> applicationHook.get();</span><br><span class="line">    <span class="type">SpringApplicationRunListener</span> <span class="variable">hookListener</span> <span class="operator">=</span> (hook != <span class="literal">null</span>) ? hook.getRunListener(<span class="built_in">this</span>) : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (hookListener != <span class="literal">null</span>) {</span><br><span class="line">        listeners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(listeners);</span><br><span class="line">        listeners.add(hookListener);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationRunListeners</span>(logger, listeners, <span class="built_in">this</span>.applicationStartup);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看到 <code>getSpringFactoriesInstances</code> 有没有感觉很熟悉？对，这一步就是尝试从 <code>spring.factories</code> 里尝试找到 <code>SpringApplicationRunListener</code> 的实现类。默认来说这里只能找到 <code>EventPublishingRunListener</code>，它是用来发布各种 <code>SpringBootEvent</code> 的。在 Spring Boot 中，事件是一个很重要的东西，通过事件机制我们可以监听 Spring Boot 容器中正在发生的事件，也可以监听各种自定义的事件。事件机制也为 Bean 之间的消息传递提供支持。</p><p>除了从 <code>spring.factories</code> 尝试获取 listener 之外，Spring Boot 也会尝试从 <code>SpringApplicationHook</code> 中找到 hook 进来的 listener。看了下代码，似乎我们可以在入口的 <code>main</code> 方法里调用 <code>SpringApplication#withHook</code> 来添加我们需要的 hook，但是我的应用里面也没有什么能用的，所以也没法深挖了。</p><p>在得到这些 listener 之后，就会实例化一个 <code>SpringApplicationRunListeners</code> 对象并返回回去，然后在 <code>SpringApplicationRunListeners#starting</code> 方法中调用各个 listener 的 <code>starting</code> 方法。此时，上面得到的 <code>EventPublishingRunListener</code> 就会广播出去一条 <code>ApplicationStartingEvent</code> 事件。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, Class&lt;?&gt; mainApplicationClass)</span> {</span><br><span class="line">    doWithListeners(<span class="string">"spring.boot.application.starting"</span>, (listener) -&gt; listener.starting(bootstrapContext),</span><br><span class="line">            (step) -&gt; {</span><br><span class="line">                <span class="keyword">if</span> (mainApplicationClass != <span class="literal">null</span>) {</span><br><span class="line">                    step.tag(<span class="string">"mainApplicationClass"</span>, mainApplicationClass.getName());</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWithListeners</span><span class="params">(String stepName, Consumer&lt;SpringApplicationRunListener&gt; listenerAction,</span></span><br><span class="line"><span class="params">        Consumer&lt;StartupStep&gt; stepAction)</span> {</span><br><span class="line">    <span class="type">StartupStep</span> <span class="variable">step</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationStartup.start(stepName);</span><br><span class="line">    <span class="built_in">this</span>.listeners.forEach(listenerAction);</span><br><span class="line">    <span class="keyword">if</span> (stepAction != <span class="literal">null</span>) {</span><br><span class="line">        stepAction.accept(step);</span><br><span class="line">    }</span><br><span class="line">    step.end();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>Spring 中的 Environment 负责两件事：</p><ul><li>加载配置好的各种 property 的值</li><li>后续通过各种方法获取 property 的值</li></ul><p>在 Spring Boot 里，property 的值可以通过 YAML 文件或 properties 文件、环境变量，和命令行参数这三种方法配置。此外，Spring Boot 会依照一定的优先级来决定采用哪个 property 值，高优先级的会覆盖低优先级的。常见的几种配置方式会按照如下的优先级排列：</p><ol><li>开发者工具 <code>Devtools</code> 全局配置</li><li>命令行指定的参数（如 <code>--server.port=8080</code>）</li><li>JNDI 参数</li><li> Java 系统参数（通过 <code>-D</code> 指定的参数）</li><li>系统环境变量</li><li>对应不同环境的 <code>application-{profile}.yml</code> 配置文件</li><li><code>application.yml</code> 配置文件</li><li>默认参数</li></ol><p>点进 <code>prepareEvent</code> 方法的实现，可以看到这个代码块（我稍微重新格式化了一下，看起来更舒服一点）：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ConfigurableEnvironment <span class="title function_">prepareEnvironment</span><span class="params">(</span></span><br><span class="line"><span class="params">    SpringApplicationRunListeners listeners,</span></span><br><span class="line"><span class="params">    DefaultBootstrapContext bootstrapContext, </span></span><br><span class="line"><span class="params">    ApplicationArguments applicationArguments</span></span><br><span class="line"><span class="params">)</span> {</span><br><span class="line">    <span class="comment">// Create and configure the environment</span></span><br><span class="line">    <span class="comment">// 获得应用的环境（servlet / reactive）</span></span><br><span class="line">    <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> getOrCreateEnvironment();</span><br><span class="line">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">    ConfigurationPropertySources.attach(environment);</span><br><span class="line">    listeners.environmentPrepared(bootstrapContext, environment);</span><br><span class="line">    DefaultPropertiesPropertySource.moveToEnd(environment);</span><br><span class="line">    Assert.state(!environment.containsProperty(<span class="string">"spring.main.environment-prefix"</span>),</span><br><span class="line">            <span class="string">"Environment prefix cannot be set via properties."</span>);</span><br><span class="line">    bindToSpringApplication(environment);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.isCustomEnvironment) {</span><br><span class="line">        <span class="type">EnvironmentConverter</span> <span class="variable">environmentConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnvironmentConverter</span>(getClassLoader());</span><br><span class="line">        environment = environmentConverter.convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class="line">    }</span><br><span class="line">    ConfigurationPropertySources.attach(environment);</span><br><span class="line">    <span class="keyword">return</span> environment;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConfigurableEnvironment <span class="title function_">getOrCreateEnvironment</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.environment != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.environment;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationContextFactory.createEnvironment(<span class="built_in">this</span>.webApplicationType);</span><br><span class="line">    <span class="keyword">if</span> (environment == <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.applicationContextFactory != ApplicationContextFactory.DEFAULT) {</span><br><span class="line">        environment = ApplicationContextFactory.DEFAULT.createEnvironment(<span class="built_in">this</span>.webApplicationType);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> (environment != <span class="literal">null</span>) ? environment : <span class="keyword">new</span> <span class="title class_">ApplicationEnvironment</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>首先在 <code>getOrCreateEnvironment</code> 中，Spring Boot 会根据应用类型 (reactive、servlet 或 none) 来创建对应的环境。比如我这个是一个 servlet 应用，那么 <code>createEnvironment</code> 方法就会返回一个 <code>ApplicationServletEnvironment</code> 对象，并返回回去。</p><p>接下来到 <code>configureEnvironment</code> 里面：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configureEnvironment</span><span class="params">(ConfigurableEnvironment environment, String[] args)</span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.addConversionService) {</span><br><span class="line">        environment.setConversionService(<span class="keyword">new</span> <span class="title class_">ApplicationConversionService</span>());</span><br><span class="line">    }</span><br><span class="line">    configurePropertySources(environment, args);</span><br><span class="line">    configureProfiles(environment, args);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configurePropertySources</span><span class="params">(ConfigurableEnvironment environment, String[] args)</span> {</span><br><span class="line">    <span class="type">MutablePropertySources</span> <span class="variable">sources</span> <span class="operator">=</span> environment.getPropertySources();</span><br><span class="line">    <span class="comment">// 如果有default properties，那就把它们加到MutablePropertySources里面</span></span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="built_in">this</span>.defaultProperties)) {</span><br><span class="line">        DefaultPropertiesPropertySource.addOrMerge(<span class="built_in">this</span>.defaultProperties, sources);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// addCommandLineProperties默认是true</span></span><br><span class="line">    <span class="comment">// args就是启动时传进来的参数，--server.port=8080之类的</span></span><br><span class="line">    <span class="comment">// 如果有指定参数，那就把这些参数包在SimpleCommandLinePropertySource里面，并添加到MutablePropertySources中</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.addCommandLineProperties &amp;&amp; args.length &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;</span><br><span class="line">        <span class="keyword">if</span> (sources.contains(name)) {</span><br><span class="line">            PropertySource&lt;?&gt; source = sources.get(name);</span><br><span class="line">            <span class="type">CompositePropertySource</span> <span class="variable">composite</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompositePropertySource</span>(name);</span><br><span class="line">            composite.addPropertySource(<span class="keyword">new</span> <span class="title class_">SimpleCommandLinePropertySource</span>(<span class="string">"springApplicationCommandLineArgs"</span>, args));</span><br><span class="line">            composite.addPropertySource(source);</span><br><span class="line">            sources.replace(name, composite);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            sources.addFirst(<span class="keyword">new</span> <span class="title class_">SimpleCommandLinePropertySource</span>(args));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configureProfiles</span><span class="params">(ConfigurableEnvironment environment, String[] args)</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><del>这个 conversion service 是干啥用的暂时还没搞明白，先留个坑，专注于主线。</del>爬了些文大概看明白了，<code>ConversionService</code> 是用来处理各种类型转换的，比如把字符串转换成 <code>Long</code> 或者日期等。</p><p>这里的话就是把各种参数（比如附加在启动命令里面的命令行参数）给填充到 <code>environment</code> 对象里。<code>MutablePropertySources</code> 就是存放 property 的载体，在前面调用 <code>createEnvironment</code> 的时候，<code>ApplicationServletEnvironment</code> 继承的 <code>AbstractEnvironment</code> 类的构造方法就会创建一个新的 <code>MutablePropertySources</code> 实例。</p><p>接下来 <code>ConfigurationPropertySources#attach</code> 方法里面，environment 的 <code>propertySources</code> 会被封装成一个 <code>ConfigurationPropertySource</code> 并添加到 environment 中。</p><p>环境准备完成后，Spring Boot 会发布一个 <code>ApplicationEnvironmentPreparedEvent</code> 事件。顺着 <code>doWithListeners</code> 方法一路追下去，在 <code>SimpleApplicationEventMulticaster#multicastEvent</code> 方法中，查看 <code>getApplicationListeners(event, type)</code> 的返回结果可以看到，这里会调用多个监听器来处理这个事件。</p><p><img data-src="https://blog-static.boris1993.com/how-spring-boot-application-starts-up/get-application-listeners.png"></p><p>其中 <code>EnvironmentPostProcessorApplicationListener</code> 又会调用多个后处理器实现加载系统环境变量（由 <code>SystemEnvironmentPropertySourceEnvironmentPostProcessor</code> 完成）、在环境中设定启用的 profile 并把配置文件加载到环境（由 <code>ConfigDataEnvironmentPostProcessor</code> 完成）等操作。</p><p>其中 <code>ConfigDataEnvironmentPostProcessor</code> 默认会从 <code>classpath:/</code>、<code>classpath:/config/</code>、<code>file:./</code>、<code>file:./config/</code>、<code>file:./config/*/</code> 这几个地方查找配置文件，如果有需要也可以通过 <code>spring.config.location</code>、<code>spring.config.additional-location</code>、<code>spring.config.import</code> 这三个配置来干预它从哪查找配置文件。</p><p><img data-src="https://blog-static.boris1993.com/how-spring-boot-application-starts-up/default-locations-for-searching-config-files.png"></p><p>在查找到配置文件，并得到当前启用的 profile 后，<code>ConfigDataEnvironment#applyToEnvironment</code> 方法就会将配置文件中的值加载到环境中。</p><p><img data-src="https://blog-static.boris1993.com/how-spring-boot-application-starts-up/loading-config-from-properties-with-profile.png"></p><p>然后 Spring Boot 会把这个 environment 对象与 <code>SpringApplication</code> 绑定起来。但是绑定这部分暂时也没看明白，依旧是专注于主线，以后有时间再说。</p><h3 id="创建application-context"><a href="#创建application-context" class="headerlink" title="创建application context"></a>创建 application context</h3><p>这里会根据应用的类型（reactive 或 servlet）来创建对应的 application context 对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title function_">createApplicationContext</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.applicationContextFactory.create(<span class="built_in">this</span>.webApplicationType);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>debug 进去，走到了 <code>DefaultApplicationContextFactory</code> 的这两个方法中：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">create</span><span class="params">(WebApplicationType webApplicationType)</span> {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">return</span> getFromSpringFactories(</span><br><span class="line">            webApplicationType, </span><br><span class="line">            ApplicationContextFactory::create,</span><br><span class="line">            <span class="built_in">this</span>::createDefaultApplicationContext);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">"Unable create a default ApplicationContext instance, "</span></span><br><span class="line">                + <span class="string">"you may need a custom ApplicationContextFactory"</span>, ex);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; T <span class="title function_">getFromSpringFactories</span><span class="params">(</span></span><br><span class="line"><span class="params">    WebApplicationType webApplicationType,</span></span><br><span class="line"><span class="params">    BiFunction&lt;ApplicationContextFactory, WebApplicationType, T&gt; action, </span></span><br><span class="line"><span class="params">    Supplier&lt;T&gt; defaultResult</span></span><br><span class="line"><span class="params">)</span> {</span><br><span class="line">    <span class="keyword">for</span> (ApplicationContextFactory candidate : SpringFactoriesLoader.loadFactories(ApplicationContextFactory.class,getClass().getClassLoader())) {</span><br><span class="line">        <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> action.apply(candidate, webApplicationType);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> (defaultResult != <span class="literal">null</span>) ? defaultResult.get() : <span class="literal">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个循环里它会分别执行 <code>ReactiveWebServerApplicationContextFactory</code> 和 <code>ServletWebServerApplicationContextFactory</code> 里面的 <code>create</code> 方法，而 <code>create</code> 方法里会判断当前应用的类型，来决定要不要创建对应的 application context。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">create</span><span class="params">(WebApplicationType webApplicationType)</span> {</span><br><span class="line">    <span class="keyword">return</span> (webApplicationType != WebApplicationType.SERVLET) ? <span class="literal">null</span> : createContext();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConfigurableApplicationContext <span class="title function_">createContext</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">if</span> (!AotDetector.useGeneratedArtifacts()) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletWebServerApplicationContext</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建好 application context 实例后，Spring Boot 会开始准备 context 的内容。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">prepareContext</span><span class="params">(</span></span><br><span class="line"><span class="params">    DefaultBootstrapContext bootstrapContext, </span></span><br><span class="line"><span class="params">    ConfigurableApplicationContext context,</span></span><br><span class="line"><span class="params">    ConfigurableEnvironment environment, </span></span><br><span class="line"><span class="params">    SpringApplicationRunListeners listeners,</span></span><br><span class="line"><span class="params">    ApplicationArguments applicationArguments, </span></span><br><span class="line"><span class="params">    Banner printedBanner</span></span><br><span class="line"><span class="params">)</span> {</span><br><span class="line">    <span class="comment">// 绑定环境</span></span><br><span class="line">    context.setEnvironment(environment);</span><br><span class="line">    <span class="comment">// 后置处理</span></span><br><span class="line">    postProcessApplicationContext(context);</span><br><span class="line">    addAotGeneratedInitializerIfNecessary(<span class="built_in">this</span>.initializers);</span><br><span class="line">    <span class="comment">// 执行各个initializer的initialize方法</span></span><br><span class="line">    applyInitializers(context);</span><br><span class="line">    <span class="comment">// 发布事件</span></span><br><span class="line">    listeners.contextPrepared(context);</span><br><span class="line">    <span class="comment">// 发布bootstrap context被关闭的事件</span></span><br><span class="line">    bootstrapContext.close(context);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) {</span><br><span class="line">        logStartupInfo(context.getParent() == <span class="literal">null</span>);</span><br><span class="line">        logStartupProfileInfo(context);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 注册启动相关的单例bean</span></span><br><span class="line">    <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getBeanFactory();</span><br><span class="line">    <span class="comment">// 把main方法中的args封装成单例bean注册到容器</span></span><br><span class="line">    beanFactory.registerSingleton(<span class="string">"springApplicationArguments"</span>, applicationArguments);</span><br><span class="line">    <span class="keyword">if</span> (printedBanner != <span class="literal">null</span>) {</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 设置是否允许循环引用，是否允许覆盖注册</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> AbstractAutowireCapableBeanFactory autowireCapableBeanFactory) {</span><br><span class="line">        autowireCapableBeanFactory.setAllowCircularReferences(<span class="built_in">this</span>.allowCircularReferences);</span><br><span class="line">        <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory listableBeanFactory) {</span><br><span class="line">            listableBeanFactory.setAllowBeanDefinitionOverriding(<span class="built_in">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 处理延迟初始化</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.lazyInitialization) {</span><br><span class="line">        context.addBeanFactoryPostProcessor(<span class="keyword">new</span> <span class="title class_">LazyInitializationBeanFactoryPostProcessor</span>());</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 是否要保持JVM持续运行</span></span><br><span class="line">    <span class="comment">// 为了应对Java 21引入的虚拟线程产生的问题</span></span><br><span class="line">    <span class="comment">// 因为虚拟线程都是守护线程，而在只有守护线程运行时，JVM就会退出</span></span><br><span class="line">    <span class="comment">// 所以这里会启动一个非守护线程来保持JVM能持续运行下去</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.keepAlive) {</span><br><span class="line">        context.addApplicationListener(<span class="keyword">new</span> <span class="title class_">KeepAlive</span>());</span><br><span class="line">    }</span><br><span class="line">    context.addBeanFactoryPostProcessor(<span class="keyword">new</span> <span class="title class_">PropertySourceOrderingBeanFactoryPostProcessor</span>(context));</span><br><span class="line">    <span class="comment">// 不考虑AOT优化时，加载primarySources和sources</span></span><br><span class="line">    <span class="keyword">if</span> (!AotDetector.useGeneratedArtifacts()) {</span><br><span class="line">        <span class="comment">// 载入sources</span></span><br><span class="line">        Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">        Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">        <span class="comment">// 加载启动类并注入到容器</span></span><br><span class="line">        load(context, sources.toArray(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]));</span><br><span class="line">    }</span><br><span class="line">    listeners.contextLoaded(context);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="注册启动相关的单例bean"><a href="#注册启动相关的单例bean" class="headerlink" title="注册启动相关的单例bean"></a>注册启动相关的单例 bean</h4><p>我对注册启动相关的单例 bean 很感兴趣，于是逐层点进 <code>registerSingleton</code> 的实现，看到了下列代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultListableBeanFactory</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span> <span class="keyword">throws</span> IllegalStateException {</span><br><span class="line">    <span class="built_in">super</span>.registerSingleton(beanName, singletonObject);</span><br><span class="line">    updateManualSingletonNames(set -&gt; set.add(beanName), set -&gt; !<span class="built_in">this</span>.beanDefinitionMap.containsKey(beanName));</span><br><span class="line">    clearByTypeCache();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultSingletonBeanRegistry</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span> <span class="keyword">throws</span> IllegalStateException {</span><br><span class="line">    Assert.notNull(beanName, <span class="string">"Bean name must not be null"</span>);</span><br><span class="line">    Assert.notNull(singletonObject, <span class="string">"Singleton object must not be null"</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.singletonObjects) {</span><br><span class="line">        <span class="type">Object</span> <span class="variable">oldObject</span> <span class="operator">=</span> <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">        <span class="keyword">if</span> (oldObject != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">"Could not register object ["</span> + singletonObject +</span><br><span class="line">                    <span class="string">"] under bean name '"</span> + beanName + <span class="string">"': there is already object ["</span> + oldObject + <span class="string">"] bound"</span>);</span><br><span class="line">        }</span><br><span class="line">        addSingleton(beanName, singletonObject);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addSingleton</span><span class="params">(String beanName, Object singletonObject)</span> {</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.singletonObjects) {</span><br><span class="line">        <span class="built_in">this</span>.singletonObjects.put(beanName, singletonObject);</span><br><span class="line">        <span class="built_in">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">        <span class="built_in">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class="line">        <span class="built_in">this</span>.registeredSingletons.add(beanName);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看下来就是，在注册一个单例 bean 的时候，会传进来 bean 的名字和实际的对象。在 <code>registerSingleton</code> 中首先检查这个名字是不是已经被注册过了，没有被注册过的话就会调用 <code>addSingleton</code> 来注册。而所谓注册，就是：</p><ul><li>在 <code>singletonObjects</code> 这个 Map 里面增加一个条目，key 是 bean 的名字，value 是 bean 对应的对象；</li><li>从 <code>singletonFactories</code> 和 <code>earlySingletonObjects</code> 中删掉以这个 bean 名字为 key 的条目；</li><li>在 <code>registeredSingletons</code> 这个 Set 里面记录这次注册的 bean 的名字。</li></ul><p>上面提到的这三个 Map 实际上就是 Spring 的三级缓存。</p><ul><li><code>singletonObjects</code> 是一级缓存，存储的是完整创建好的单例 bean 对象。在创建一个单例 bean 时，Spring 会先从这里尝试获取这个 bean 的实例，如果找到则直接返回，否则继续创建这个 bean；</li><li><code>earlySingletonObjects</code> 是二级缓存，存储的是尚未完全创建好的 “半成品” 单例 bean 对象。在创建单例 bean 时，如果发现这个 bean 存在循环依赖，那么 Spring 会先创建这个 bean 的 “半成品” 对象并将其存到这里。当循环依赖的 bean 创建完成后，Spring 再将这里存储的代理对象替换为完整的 bean 对象；</li><li><code>singletonFactories</code> 是三级缓存，存储的是单例 bean 的创建工厂。当一个单例 bean 被创建时，Spring 会先将该 bean 的创建工厂存储到这里，然后再执行工厂的 <code>getObject()</code> 方法生成该 bean 的实例对象。在该 bean 被其他 bean 引用时，Spring 会从这里获取该 bean 的创建工厂来创建出这个 bean 的实例，并将这个实例存储到 <code>singletonObjects</code> 中。</li></ul><p>返回到 <code>registerSingleton</code> 之后，继续执行 <code>updateManualSingletonNames</code> 方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateManualSingletonNames</span><span class="params">(Consumer&lt;Set&lt;String&gt;&gt; action, Predicate&lt;Set&lt;String&gt;&gt; condition)</span> {</span><br><span class="line">    <span class="keyword">if</span> (hasBeanCreationStarted()) {</span><br><span class="line">        <span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.beanDefinitionMap) {</span><br><span class="line">            <span class="keyword">if</span> (condition.test(<span class="built_in">this</span>.manualSingletonNames)) {</span><br><span class="line">                Set&lt;String&gt; updatedSingletons = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(<span class="built_in">this</span>.manualSingletonNames);</span><br><span class="line">                action.accept(updatedSingletons);</span><br><span class="line">                <span class="built_in">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// Still in startup registration phase</span></span><br><span class="line">        <span class="keyword">if</span> (condition.test(<span class="built_in">this</span>.manualSingletonNames)) {</span><br><span class="line">            action.accept(<span class="built_in">this</span>.manualSingletonNames);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在应用启动的时候，方法会走到 <code>else</code> 这部分，也就是直接向 <code>manualSingletonNames</code> 这个 Set 添加这次注册的 bean 的名字。<code>manualSingletonNames</code> 这个 Set 存放的就是手动注册的各个 bean 的名字。</p><p>然后执行 <code>clearByTypeCache</code> 方法，把这两个 cache 清除。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">clearByTypeCache</span><span class="params">()</span> {</span><br><span class="line">    <span class="built_in">this</span>.allBeanNamesByType.clear();</span><br><span class="line">    <span class="built_in">this</span>.singletonBeanNamesByType.clear();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="加载primarySources和sources"><a href="#加载primarySources和sources" class="headerlink" title="加载primarySources和sources"></a>加载 primarySources 和 sources</h4><p><code>getAllSources</code> 会把 <code>primarySources</code> 和 <code>sources</code> 放进一个 Set 里面返回。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">getAllSources</span><span class="params">()</span> {</span><br><span class="line">    Set&lt;Object&gt; allSources = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="built_in">this</span>.primarySources)) {</span><br><span class="line">        <span class="comment">// 把启动类添加到allSources</span></span><br><span class="line">        allSources.addAll(<span class="built_in">this</span>.primarySources);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="built_in">this</span>.sources)) {</span><br><span class="line">        allSources.addAll(<span class="built_in">this</span>.sources);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableSet(allSources);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后走到 <code>load</code> 方法，把 bean 加载到 application context：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(ApplicationContext context, Object[] sources)</span> {</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) {</span><br><span class="line">        logger.debug(<span class="string">"Loading source "</span> + StringUtils.arrayToCommaDelimitedString(sources));</span><br><span class="line">    }</span><br><span class="line">    <span class="type">BeanDefinitionLoader</span> <span class="variable">loader</span> <span class="operator">=</span> createBeanDefinitionLoader(getBeanDefinitionRegistry(context), sources);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.beanNameGenerator != <span class="literal">null</span>) {</span><br><span class="line">        loader.setBeanNameGenerator(<span class="built_in">this</span>.beanNameGenerator);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.resourceLoader != <span class="literal">null</span>) {</span><br><span class="line">        loader.setResourceLoader(<span class="built_in">this</span>.resourceLoader);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.environment != <span class="literal">null</span>) {</span><br><span class="line">        loader.setEnvironment(<span class="built_in">this</span>.environment);</span><br><span class="line">    }</span><br><span class="line">    loader.load();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BeanDefinitionRegistry <span class="title function_">getBeanDefinitionRegistry</span><span class="params">(ApplicationContext context)</span> {</span><br><span class="line">    <span class="keyword">if</span> (context <span class="keyword">instanceof</span> BeanDefinitionRegistry registry) {</span><br><span class="line">        <span class="keyword">return</span> registry;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (context <span class="keyword">instanceof</span> AbstractApplicationContext abstractApplicationContext) {</span><br><span class="line">        <span class="keyword">return</span> (BeanDefinitionRegistry) abstractApplicationContext.getBeanFactory();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">"Could not locate BeanDefinitionRegistry"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> BeanDefinitionLoader <span class="title function_">createBeanDefinitionLoader</span><span class="params">(BeanDefinitionRegistry registry, Object[] sources)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionLoader</span>(registry, sources);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// BeanDefinitionLoader</span></span><br><span class="line">BeanDefinitionLoader(BeanDefinitionRegistry registry, Object... sources) {</span><br><span class="line">    Assert.notNull(registry, <span class="string">"Registry must not be null"</span>);</span><br><span class="line">    Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">    <span class="built_in">this</span>.sources = sources;</span><br><span class="line">    <span class="comment">// 初始化注解形式的Bean定义读取器</span></span><br><span class="line">    <span class="built_in">this</span>.annotatedReader = <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(registry);</span><br><span class="line">    <span class="comment">// 初始化XML形式的Bean定义读取器</span></span><br><span class="line">    <span class="built_in">this</span>.xmlReader = <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(registry);</span><br><span class="line">    <span class="built_in">this</span>.groovyReader = (isGroovyPresent() ? <span class="keyword">new</span> <span class="title class_">GroovyBeanDefinitionReader</span>(registry) : <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 初始化classpath扫描器</span></span><br><span class="line">    <span class="built_in">this</span>.scanner = <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(registry);</span><br><span class="line">    <span class="comment">// 给classpath扫描器添加排除过滤器</span></span><br><span class="line">    <span class="built_in">this</span>.scanner.addExcludeFilter(<span class="keyword">new</span> <span class="title class_">ClassExcludeFilter</span>(sources));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>首先这里会执行 <code>getBeanDefinitionRegistry</code> 方法。因为这个应用的 application context 是一个 <code>AnnotationConfigServletWebServerApplicationContext</code>，而它又层层继承于 <code>BeanDefinitionRegistry</code>，所以这里返回的就是当前的 application context。得到 bean defininition registry 之后，就会用它来初始化一个 <code>BeanDefinitionLoader</code> 对象。<code>BeanDefinitionLoader</code> 的构造方法里面会初始化各种 reader 和 scanner，来支持从不同的资源（XML、Java Config 等）加载 bean definition。</p><p>得到 <code>BeanDefinitionLoader</code> 后，Spring Boot 会把 bean 名字的生成器等自定义部件绑定上去。不过默认情况下它们都是 <code>null</code>。然后，就会执行 <code>BeanDefinitionLoader</code> 的 <code>load</code> 方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">load</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">for</span> (Object source : <span class="built_in">this</span>.sources) {</span><br><span class="line">        load(source);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(Object source)</span> {</span><br><span class="line">    Assert.notNull(source, <span class="string">"Source must not be null"</span>);</span><br><span class="line">    <span class="keyword">if</span> (source <span class="keyword">instanceof</span> Class&lt;?&gt; clazz) {</span><br><span class="line">        load(clazz);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (source <span class="keyword">instanceof</span> Resource resource) {</span><br><span class="line">        load(resource);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (source <span class="keyword">instanceof</span> Package pack) {</span><br><span class="line">        load(pack);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (source <span class="keyword">instanceof</span> CharSequence sequence) {</span><br><span class="line">        load(sequence);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"Invalid source type "</span> + source.getClass());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(Class&lt;?&gt; source)</span> {</span><br><span class="line">    <span class="keyword">if</span> (isGroovyPresent() &amp;&amp; GroovyBeanDefinitionSource.class.isAssignableFrom(source)) {</span><br><span class="line">        <span class="comment">// Any GroovyLoaders added in beans{} DSL can contribute beans here</span></span><br><span class="line">        <span class="type">GroovyBeanDefinitionSource</span> <span class="variable">loader</span> <span class="operator">=</span> BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource.class);</span><br><span class="line">        ((GroovyBeanDefinitionReader) <span class="built_in">this</span>.groovyReader).beans(loader.getBeans());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (isEligible(source)) {</span><br><span class="line">        <span class="comment">// 将启动类的BeanDefinition注册进beanDefinitionMap</span></span><br><span class="line">        <span class="built_in">this</span>.annotatedReader.register(source);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isEligible</span><span class="params">(Class&lt;?&gt; type)</span> {</span><br><span class="line">    <span class="keyword">return</span> !(type.isAnonymousClass() || isGroovyClosure(type) || hasNoConstructors(type));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>虽然这里会遍历 <code>sources</code>，但是实际上 <code>sources</code> 里面只有应用的主启动类，所以最终会走到 <code>load(Class&lt;?&gt; source)</code> 方法中。因为应用中没有 Groovy，所以第一个判断会被跳过，然后经过 <code>isEligible</code> 中的三个判断之后，走进 <code>register</code> 方法，并最终进入 <code>AnnotatedBeanDefinition#doRegisterBean</code> 方法中。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AnnotatedBeanDefinitionReader</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Class&lt;?&gt;... componentClasses)</span> {</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; componentClass : componentClasses) {</span><br><span class="line">        registerBean(componentClass);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBean</span><span class="params">(Class&lt;?&gt; beanClass)</span> {</span><br><span class="line">    doRegisterBean(beanClass, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">doRegisterBean</span><span class="params">(</span></span><br><span class="line"><span class="params">    Class&lt;T&gt; beanClass, </span></span><br><span class="line"><span class="params">    <span class="meta">@Nullable</span> String name,</span></span><br><span class="line"><span class="params">    <span class="meta">@Nullable</span> Class&lt;? extends Annotation&gt;[] qualifiers, </span></span><br><span class="line"><span class="params">    <span class="meta">@Nullable</span> Supplier&lt;T&gt; supplier,</span></span><br><span class="line"><span class="params">    <span class="meta">@Nullable</span> BeanDefinitionCustomizer[] customizers</span></span><br><span class="line"><span class="params">)</span> {</span><br><span class="line">    <span class="comment">// 将传进来的类封装为AnnotatedGenericBeanDefinition</span></span><br><span class="line">    <span class="type">AnnotatedGenericBeanDefinition</span> <span class="variable">abd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedGenericBeanDefinition</span>(beanClass);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    abd.setAttribute(ConfigurationClassUtils.CANDIDATE_ATTRIBUTE, Boolean.TRUE);</span><br><span class="line">    abd.setInstanceSupplier(supplier);</span><br><span class="line">    <span class="comment">// 获取该类的scope属性</span></span><br><span class="line">    <span class="type">ScopeMetadata</span> <span class="variable">scopeMetadata</span> <span class="operator">=</span> <span class="built_in">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line">    <span class="comment">// 设定这个bean的scope，singleton、prototype等</span></span><br><span class="line">    abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line">    <span class="comment">// 生成bean的名字</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> (name != <span class="literal">null</span> ? name : <span class="built_in">this</span>.beanNameGenerator.generateBeanName(abd, <span class="built_in">this</span>.registry));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据类上的注解设定bean的属性，即处理@Lazy、@Primary等</span></span><br><span class="line">    AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line">    <span class="keyword">if</span> (qualifiers != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; qualifier : qualifiers) {</span><br><span class="line">            <span class="keyword">if</span> (Primary.class == qualifier) {</span><br><span class="line">                abd.setPrimary(<span class="literal">true</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Lazy.class == qualifier) {</span><br><span class="line">                abd.setLazyInit(<span class="literal">true</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                abd.addQualifier(<span class="keyword">new</span> <span class="title class_">AutowireCandidateQualifier</span>(qualifier));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (customizers != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (BeanDefinitionCustomizer customizer : customizers) {</span><br><span class="line">            customizer.customize(abd);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">BeanDefinitionHolder</span> <span class="variable">definitionHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(abd, beanName);</span><br><span class="line">    definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">    <span class="comment">// 将这个BeanDefinition注册到IoC容器的BeanDefinitionMap中</span></span><br><span class="line">    BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">processCommonDefinitionAnnotations</span><span class="params">(AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata)</span> {</span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">lazy</span> <span class="operator">=</span> attributesFor(metadata, Lazy.class);</span><br><span class="line">    <span class="keyword">if</span> (lazy != <span class="literal">null</span>) {</span><br><span class="line">        abd.setLazyInit(lazy.getBoolean(<span class="string">"value"</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (abd.getMetadata() != metadata) {</span><br><span class="line">        lazy = attributesFor(abd.getMetadata(), Lazy.class);</span><br><span class="line">        <span class="keyword">if</span> (lazy != <span class="literal">null</span>) {</span><br><span class="line">            abd.setLazyInit(lazy.getBoolean(<span class="string">"value"</span>));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (metadata.isAnnotated(Primary.class.getName())) {</span><br><span class="line">        abd.setPrimary(<span class="literal">true</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">dependsOn</span> <span class="operator">=</span> attributesFor(metadata, DependsOn.class);</span><br><span class="line">    <span class="keyword">if</span> (dependsOn != <span class="literal">null</span>) {</span><br><span class="line">        abd.setDependsOn(dependsOn.getStringArray(<span class="string">"value"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">role</span> <span class="operator">=</span> attributesFor(metadata, Role.class);</span><br><span class="line">    <span class="keyword">if</span> (role != <span class="literal">null</span>) {</span><br><span class="line">        abd.setRole(role.getNumber(<span class="string">"value"</span>).intValue());</span><br><span class="line">    }</span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">description</span> <span class="operator">=</span> attributesFor(metadata, Description.class);</span><br><span class="line">    <span class="keyword">if</span> (description != <span class="literal">null</span>) {</span><br><span class="line">        abd.setDescription(description.getString(<span class="string">"value"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里会处理传进来的类，为它创建一个 <code>BeanDefinition</code> 并设置各种属性，然后调用 <code>BeanDefinitionReaderUtils#registerBeanDefinition</code> 把这个 bean 注册到 application context 中。因为这一步传进来的只有主启动类，所以只会注册一个由主启动类生成的 bean。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(</span></span><br><span class="line"><span class="params">        BeanDefinitionHolder definitionHolder, </span></span><br><span class="line"><span class="params">        BeanDefinitionRegistry registry</span></span><br><span class="line"><span class="params">    )</span> <span class="keyword">throws</span> BeanDefinitionStoreException {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register bean definition under primary name.</span></span><br><span class="line">    <span class="comment">// 以bean的名字作为key将其注册到BeanDefinitionMap</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> definitionHolder.getBeanName();</span><br><span class="line">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register aliases for bean name, if any.</span></span><br><span class="line">    <span class="comment">// 并以这个bean的各个别名再注册一遍</span></span><br><span class="line">    String[] aliases = definitionHolder.getAliases();</span><br><span class="line">    <span class="keyword">if</span> (aliases != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (String alias : aliases) {</span><br><span class="line">            registry.registerAlias(beanName, alias);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// GenericApplicationContext</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> BeanDefinitionStoreException {</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.beanFactory.registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> BeanDefinitionStoreException {</span><br><span class="line"></span><br><span class="line">    Assert.hasText(beanName, <span class="string">"Bean name must not be empty"</span>);</span><br><span class="line">    Assert.notNull(beanDefinition, <span class="string">"BeanDefinition must not be null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (beanDefinition <span class="keyword">instanceof</span> AbstractBeanDefinition abd) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            abd.validate();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionValidationException ex) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                    <span class="string">"Validation of bean definition failed"</span>, ex);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否已有同名的bean被注册过了</span></span><br><span class="line">    <span class="type">BeanDefinition</span> <span class="variable">existingDefinition</span> <span class="operator">=</span> <span class="built_in">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line">    <span class="keyword">if</span> (existingDefinition != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (!isBeanDefinitionOverridable(beanName)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionOverrideException</span>(beanName, beanDefinition, existingDefinition);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (existingDefinition.getRole() &lt; beanDefinition.getRole()) {</span><br><span class="line">            <span class="comment">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span></span><br><span class="line">            <span class="comment">// 如果允许覆盖注册，且当前bean的级别高于已注册的bean（比如已注册的是一个应用自己的bean，但是现在正在注册一个框架提供的bean），</span></span><br><span class="line">            <span class="comment">// 那么就继续</span></span><br><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) {</span><br><span class="line">                logger.info(<span class="string">"Overriding user-defined bean definition for bean '"</span> + beanName +</span><br><span class="line">                        <span class="string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">                        existingDefinition + <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!beanDefinition.equals(existingDefinition)) {</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) {</span><br><span class="line">                logger.debug(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">                        <span class="string">"' with a different definition: replacing ["</span> + existingDefinition +</span><br><span class="line">                        <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) {</span><br><span class="line">                logger.trace(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">                        <span class="string">"' with an equivalent definition: replacing ["</span> + existingDefinition +</span><br><span class="line">                        <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 覆盖beanDefinitionMap中原有的bean</span></span><br><span class="line">        <span class="built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> (isAlias(beanName)) {</span><br><span class="line">            <span class="type">String</span> <span class="variable">aliasedName</span> <span class="operator">=</span> canonicalName(beanName);</span><br><span class="line">            <span class="keyword">if</span> (!isBeanDefinitionOverridable(aliasedName)) {</span><br><span class="line">                <span class="keyword">if</span> (containsBeanDefinition(aliasedName)) {  <span class="comment">// alias for existing bean definition</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionOverrideException</span>(</span><br><span class="line">                            beanName, beanDefinition, getBeanDefinition(aliasedName));</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> {  <span class="comment">// alias pointing to non-existing bean definition</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">                            <span class="string">"Cannot register bean definition for bean '"</span> + beanName +</span><br><span class="line">                            <span class="string">"' since there is already an alias for bean '"</span> + aliasedName + <span class="string">"' bound."</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                removeAlias(beanName);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (hasBeanCreationStarted()) {</span><br><span class="line">            <span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>.beanDefinitionMap) {</span><br><span class="line">                <span class="built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">                List&lt;String&gt; updatedDefinitions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="built_in">this</span>.beanDefinitionNames.size() + <span class="number">1</span>);</span><br><span class="line">                updatedDefinitions.addAll(<span class="built_in">this</span>.beanDefinitionNames);</span><br><span class="line">                updatedDefinitions.add(beanName);</span><br><span class="line">                <span class="built_in">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line">                removeManualSingletonName(beanName);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// Still in startup registration phase</span></span><br><span class="line">            <span class="built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">            <span class="built_in">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line">            removeManualSingletonName(beanName);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">this</span>.frozenBeanDefinitionNames = <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (existingDefinition != <span class="literal">null</span> || containsSingleton(beanName)) {</span><br><span class="line">        resetBeanDefinition(beanName);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isConfigurationFrozen()) {</span><br><span class="line">        clearByTypeCache();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在启动的时候，实际会走到 <code>registerBeanDefinition</code> 方法的 <code>// Still in startup registration phase</code> 这部分。这里会把传进来的 <code>BeanDefinition</code> 注册到 <code>beanDefinitionMap</code> 中然后返回。</p><h3 id="刷新application-context"><a href="#刷新application-context" class="headerlink" title="刷新application context"></a>刷新 application context</h3><p>在创建 application context 之后，Spring Boot 会刷新它。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.registerShutdownHook) {</span><br><span class="line">        shutdownHook.registerApplicationContext(context);</span><br><span class="line">    }</span><br><span class="line">    refresh(context);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> {</span><br><span class="line">    applicationContext.refresh();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServletWebServerApplicationContext</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="built_in">super</span>.refresh();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (RuntimeException ex) {</span><br><span class="line">        <span class="type">WebServer</span> <span class="variable">webServer</span> <span class="operator">=</span> <span class="built_in">this</span>.webServer;</span><br><span class="line">        <span class="keyword">if</span> (webServer != <span class="literal">null</span>) {</span><br><span class="line">            webServer.stop();</span><br><span class="line">            webServer.destroy();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// AbstractApplicationContext</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException {</span><br><span class="line">    <span class="built_in">this</span>.startupShutdownLock.lock();</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="built_in">this</span>.startupShutdownThread = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">        <span class="type">StartupStep</span> <span class="variable">contextRefresh</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationStartup.start(<span class="string">"spring.context.refresh"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">        <span class="comment">// 注入listener等组件，激活application context</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">        <span class="comment">// 得到当前application context的bean factory</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">        <span class="comment">// 初始化bean factory，包括设定class loader，注入各种组件等</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">            <span class="comment">// 设置beanFactory的后置处理</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="type">StartupStep</span> <span class="variable">beanPostProcess</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationStartup.start(<span class="string">"spring.context.beans.post-process"</span>);</span><br><span class="line">            <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">            <span class="comment">// 调用beanFactory的后置处理</span></span><br><span class="line">            <span class="comment">// 后置处理器的工作时机是在所有BeanDefinition加载完成之后，bean实例化之前</span></span><br><span class="line">            <span class="comment">// 它可以修改BeanDefinition的属性信息</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">            <span class="comment">// 注册bean的后处理器</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">            beanPostProcess.end();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化上下文中的消息源</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化上下文中的事件机制</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">            <span class="comment">// 初始化其他特殊的bean，如创建web server</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">            <span class="comment">// 把listener beans注入到容器</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">            <span class="comment">// 把剩余尚未实例化的bean实例化</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">            <span class="comment">// 发布application context刷新完成的事件</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (RuntimeException | Error ex ) {</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) {</span><br><span class="line">                logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                        <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> {</span><br><span class="line">            contextRefresh.end();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">finally</span> {</span><br><span class="line">        <span class="built_in">this</span>.startupShutdownThread = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.startupShutdownLock.unlock();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里首先会一路走到 <code>AbstractApplicationContext#refresh</code> 方法，完成初始化 bean factory，实例化剩余的 bean 等操作。</p><h4 id="得到当前application-context的bean-factory"><a href="#得到当前application-context的bean-factory" class="headerlink" title="得到当前application context的bean factory"></a>得到当前 application context 的 bean factory</h4><p>点进 <code>obtainFreshBeanFactory</code> 方法可以看到这样的实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractApplicationContext</span></span><br><span class="line"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title function_">obtainFreshBeanFactory</span><span class="params">()</span> {</span><br><span class="line">    refreshBeanFactory();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// GenericApplicationContext</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicBoolean</span> <span class="variable">refreshed</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException {</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshed.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                <span class="string">"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">this</span>.beanFactory.setSerializationId(getId());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ConfigurableListableBeanFactory <span class="title function_">getBeanFactory</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.beanFactory;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在 <code>refreshBeanFactory</code> 方法中，Spring 会利用 <code>AtomicBoolean</code> 的 <code>compareAndSet</code> 方法来保证这个方法绝对只会被执行一次。</p><h4 id="调用beanFactory的后置处理"><a href="#调用beanFactory的后置处理" class="headerlink" title="调用beanFactory的后置处理"></a>调用 beanFactory 的后置处理</h4><p><code>invokeBeanFactoryPostProcessors</code> 这里会完成 IoC 容器初始化的三个步骤，分别是</p><ul><li>Resource 定位<br>在前面 Spring Boot 已经得到了启动类的 <code>BeanDefinition</code>，那么在这里它会解析启动类的 <code>BeanDefinition</code>，得到启动类所在的包并将其作为 <code>basePackage</code>，这就完成了定位的过程。<br>此外 Spring Boot 的各种 starter 是通过 SPI 机制实现的自动装配，而自动装配也是在这个方法中完成的。<br>还有就是，这个方法中也会处理 <code>@EnableXXX</code> 注解中通过 <code>@Import</code> 指定的配置类。</li><li>BeanDefinition 载入<br>在上一步得到了 <code>basePackage</code> 后，Spring Boot 会把路径拼接成 <code>classpath*:com/example/demo/**/*.class</code> 这样的形式，然后 <code>PathMatchingResourcePatternResolver</code> 类会把这个路径下所有的 class 都加载进来，然后遍历判断有没有 <code>@Component</code> 注解。因为 <code>@Controller</code>、<code>@Service</code>、<code>@Configuration</code> 之类的实际上只是把 <code>@Component</code> 又包了一层，所以不用单独扫描它们。</li><li>注册 BeanDefinition<br>在这一步，<code>BeanDefinitionRegister</code> 接口的实现类会把解析到的 BeanDefinition 向 IoC 容器注册。</li></ul><p>这部分实在是太长，而本文又已经够长了，所以我会<a href="/spring-boot-application-start-up-post-processing.html">单开一篇来细说</a>。</p><h4 id="把剩余尚未实例化的bean实例化"><a href="#把剩余尚未实例化的bean实例化" class="headerlink" title="把剩余尚未实例化的bean实例化"></a>把剩余尚未实例化的 bean 实例化</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> {</span><br><span class="line">    <span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">            beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {</span><br><span class="line">        beanFactory.setConversionService(</span><br><span class="line">                beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span></span><br><span class="line">    <span class="comment">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line">    <span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) {</span><br><span class="line">        beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) {</span><br><span class="line">        getBean(weaverAwareName);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">    beanFactory.setTempClassLoader(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">    <span class="comment">// 冻结bean definition，不再允许新的修改</span></span><br><span class="line">    beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">    <span class="comment">// 开始实例化bean</span></span><br><span class="line">    beanFactory.preInstantiateSingletons();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException {</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) {</span><br><span class="line">        logger.trace(<span class="string">"Pre-instantiating singletons in "</span> + <span class="built_in">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line">    <span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">    List&lt;String&gt; beanNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="built_in">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">    <span class="keyword">for</span> (String beanName : beanNames) {</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) {</span><br><span class="line">            <span class="keyword">if</span> (isFactoryBean(beanName)) {</span><br><span class="line">                <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">                <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> SmartFactoryBean&lt;?&gt; smartFactoryBean &amp;&amp; smartFactoryBean.isEagerInit()) {</span><br><span class="line">                    getBean(beanName);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                getBean(beanName);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line">    <span class="keyword">for</span> (String beanName : beanNames) {</span><br><span class="line">        <span class="type">Object</span> <span class="variable">singletonInstance</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton smartSingleton) {</span><br><span class="line">            <span class="type">StartupStep</span> <span class="variable">smartInitialize</span> <span class="operator">=</span> getApplicationStartup().start(<span class="string">"spring.beans.smart-initialize"</span>)</span><br><span class="line">                    .tag(<span class="string">"beanName"</span>, beanName);</span><br><span class="line">            smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">            smartInitialize.end();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第一个 for 循环的重点在于 <code>getBean</code> 方法，逐层点进实现，最终会进入 <code>AbstractBeanFactory#doGetBean</code> 方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">doGetBean</span><span class="params">(</span></span><br><span class="line"><span class="params">    String name, </span></span><br><span class="line"><span class="params">    <span class="meta">@Nullable</span> Class&lt;T&gt; requiredType, </span></span><br><span class="line"><span class="params">    <span class="meta">@Nullable</span> Object[] args, </span></span><br><span class="line"><span class="params">    <span class="type">boolean</span> typeCheckOnly</span></span><br><span class="line"><span class="params">)</span> <span class="keyword">throws</span> BeansException {</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> transformedBeanName(name);</span><br><span class="line">    Object beanInstance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">    <span class="comment">// 先检查这个bean是不是一个已经注册过的singleton，并尝试获取</span></span><br><span class="line">    <span class="comment">// 如果它已经注册过，但是尚未实例化的话，</span></span><br><span class="line">    <span class="comment">// 这个方法会将其实例化并返回。</span></span><br><span class="line">    <span class="comment">// 方法里面是一个复杂的双检锁单例模式。</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">sharedInstance</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line">    <span class="keyword">if</span> (sharedInstance != <span class="literal">null</span> &amp;&amp; args == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) {</span><br><span class="line">            <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) {</span><br><span class="line">                logger.trace(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">                        <span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                logger.trace(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 如果这个bean不是singleton</span></span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line">        <span class="comment">// We're assumably within a circular reference.</span></span><br><span class="line">        <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCurrentlyInCreationException</span>(beanName);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">parentBeanFactory</span> <span class="operator">=</span> getParentBeanFactory();</span><br><span class="line">        <span class="keyword">if</span> (parentBeanFactory != <span class="literal">null</span> &amp;&amp; !containsBeanDefinition(beanName)) {</span><br><span class="line">            <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">nameToLookup</span> <span class="operator">=</span> originalBeanName(name);</span><br><span class="line">            <span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory abf) {</span><br><span class="line">                <span class="keyword">return</span> abf.doGetBean(nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="literal">null</span>) {</span><br><span class="line">                <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">                <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (requiredType != <span class="literal">null</span>) {</span><br><span class="line">                <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">                <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!typeCheckOnly) {</span><br><span class="line">            markBeanAsCreated(beanName);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">StartupStep</span> <span class="variable">beanCreation</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationStartup.start(<span class="string">"spring.beans.instantiate"</span>)</span><br><span class="line">                .tag(<span class="string">"beanName"</span>, name);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">if</span> (requiredType != <span class="literal">null</span>) {</span><br><span class="line">                beanCreation.tag(<span class="string">"beanType"</span>, requiredType::toString);</span><br><span class="line">            }</span><br><span class="line">            <span class="type">RootBeanDefinition</span> <span class="variable">mbd</span> <span class="operator">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">            <span class="comment">// 先把这个bean所依赖的bean初始化好</span></span><br><span class="line">            String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            <span class="keyword">if</span> (dependsOn != <span class="literal">null</span>) {</span><br><span class="line">                <span class="keyword">for</span> (String dep : dependsOn) {</span><br><span class="line">                    <span class="comment">// 如果被依赖的bean也依赖它，那就循环依赖了，没法处理，抛异常</span></span><br><span class="line">                    <span class="keyword">if</span> (isDependent(beanName, dep)) {</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                <span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">                    }</span><br><span class="line">                    registerDependentBean(dep, beanName);</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        getBean(dep);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) {</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                <span class="string">"'"</span> + beanName + <span class="string">"' depends on missing bean '"</span> + dep + <span class="string">"'"</span>, ex);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create bean instance.</span></span><br><span class="line">            <span class="keyword">if</span> (mbd.isSingleton()) {</span><br><span class="line">                sharedInstance = getSingleton(beanName, () -&gt; {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        <span class="comment">// 创建并注册这个singleton bean</span></span><br><span class="line">                        <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">catch</span> (BeansException ex) {</span><br><span class="line">                        <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                        <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                        <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                        destroySingleton(beanName);</span><br><span class="line">                        <span class="keyword">throw</span> ex;</span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line">                beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) {</span><br><span class="line">                <span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">prototypeInstance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">finally</span> {</span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                }</span><br><span class="line">                beanInstance = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                <span class="type">String</span> <span class="variable">scopeName</span> <span class="operator">=</span> mbd.getScope();</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.hasLength(scopeName)) {</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">"No scope name defined for bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="type">Scope</span> <span class="variable">scope</span> <span class="operator">=</span> <span class="built_in">this</span>.scopes.get(scopeName);</span><br><span class="line">                <span class="keyword">if</span> (scope == <span class="literal">null</span>) {</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">scopedInstance</span> <span class="operator">=</span> scope.get(beanName, () -&gt; {</span><br><span class="line">                        beforePrototypeCreation(beanName);</span><br><span class="line">                        <span class="keyword">try</span> {</span><br><span class="line">                            <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">finally</span> {</span><br><span class="line">                            afterPrototypeCreation(beanName);</span><br><span class="line">                        }</span><br><span class="line">                    });</span><br><span class="line">                    beanInstance = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">catch</span> (IllegalStateException ex) {</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ScopeNotActiveException</span>(beanName, scopeName, ex);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) {</span><br><span class="line">            beanCreation.tag(<span class="string">"exception"</span>, ex.getClass().toString());</span><br><span class="line">            beanCreation.tag(<span class="string">"message"</span>, String.valueOf(ex.getMessage()));</span><br><span class="line">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">finally</span> {</span><br><span class="line">            beanCreation.end();</span><br><span class="line">            <span class="keyword">if</span> (!isCacheBeanMetadata()) {</span><br><span class="line">                clearMergedBeanDefinition(beanName);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> adaptBeanInstance(name, beanInstance, requiredType);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="启动部分的收尾工作"><a href="#启动部分的收尾工作" class="headerlink" title="启动部分的收尾工作"></a>启动部分的收尾工作</h3><p>在完成刷新 application context 之后，Spring Boot 会发布 <code>ApplicationStartedEvent</code> 和 <code>ApplicationReadyEvent</code> 事件，调用各个 <code>Runner</code>，然后应用正式启动开始运行</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDM1OTEwNTA1ODEwMTAwMjU1">spring boot 启动流程分析<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83MzY3ZGRkYWIyMGQ=">spring boot 中的 spring factories 机制<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjI5MjcyOTQzMzEyOTYxNTky">应用启动过程 —— 准备应用上下文<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MjI5MjY5MjQ2NjgwODkxNDUx">应用启动过程 ——BootstrapContext<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTM5OTAxL2FydGljbGUvZGV0YWlscy8xMzQ5Njc0OTk=">SpringApplication 中文文档<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83NjQ1Mjk3ZjI2ZGE=">Spring Boot 应用 Main 函数入口 Primary Source<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3Ryb25nbW9yZS9wLzE2MjIwODAwLmh0bWw=">Spring 源码分析之 ConversionService<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmluYXJ5bGVpL3AvMTAyNjM1ODEuaHRtbA==">Spring ConversionService 类型转换（一）Converter<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MDg3NTc0NTQ0Mzk4">走心 Springboot 源码解析： 三、prepareEnvironment () 环境配置 解析配置文件信息<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/Spring-Boot/">Spring Boot</category>
      
      
      <comments>https://www.boris1993.com/spring-boot-application-starts-up.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java 源码阅读 - Timer</title>
      <link>https://www.boris1993.com/java-read-src-timer.html</link>
      <guid>https://www.boris1993.com/java-read-src-timer.html</guid>
      <pubDate>Tue, 19 Dec 2023 13:25:18 GMT</pubDate>
      
      <description>&lt;p&gt;前段时间拿 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; 和 &lt;code&gt;Timer&lt;/code&gt; 简单整了个带过期功能的缓存，那用都用了，顺便就看看 &lt;code&gt;Timer&lt;/code&gt; 这玩意是咋实现的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前段时间拿 <code>ConcurrentHashMap</code> 和 <code>Timer</code> 简单整了个带过期功能的缓存，那用都用了，顺便就看看 <code>Timer</code> 这玩意是咋实现的。</p><span id="more"></span><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>这段代码的背景是，我们想要把已经验证通过的 token 缓存起来，下次遇到同样的 token 就不需要再浪费 CPU 做重复的校验，直接从缓存中返回解析好的 token 对象就行。而因为 token 会过期，所以要每秒检查一次缓存里面是否有 token 过期，并批量从缓存中删除。</p><p>验证和缓存 token 那部份不是本文重点，就不写了。清除过期缓存的 <code>Timer</code> 就是这样实现的：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个Timer</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Timer</span> <span class="variable">purgeCacheTimer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在构造方法里面注册一个定时任务</span></span><br><span class="line">purgeCacheTimer.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; expiredTokenList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Map.Entry&lt;String, Object&gt; token : validatedTokenCache.entrySet()) {</span><br><span class="line">            <span class="keyword">if</span> (isTokenExpired(token.getValue())) {</span><br><span class="line">                expiredTokenList.add(token.getKey());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        expiredTokenList.forEach(validatedTokenCache::remove);</span><br><span class="line">    }</span><br><span class="line">}, <span class="number">1000</span>, <span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="Timer的核心数据结构"><a href="#Timer的核心数据结构" class="headerlink" title="Timer的核心数据结构"></a><code>Timer</code> 的核心数据结构</h2><p>点进 <code>Timer</code> 类就能在开头看到两个属性：<code>queue</code> 和 <code>thread</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The timer task queue.  This data structure is shared with the timer</span></span><br><span class="line"><span class="comment"> * thread.  The timer produces tasks, via its various schedule calls,</span></span><br><span class="line"><span class="comment"> * and the timer thread consumes, executing timer tasks as appropriate,</span></span><br><span class="line"><span class="comment"> * and removing them from the queue when they're obsolete.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">TaskQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskQueue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The timer thread.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">TimerThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimerThread</span>(queue);</span><br></pre></td></tr></tbody></table></figure><p><code>queue</code> 所属的 <code>TaskQueue</code> 就是这个 <code>Timer</code> 用来存储任务的队列，里面是把一个数组处理成了一个优先队列。<code>thread</code> 所属的 <code>TimerThread</code> 类则是 <code>Timer</code> 的核心，负责任务调度。</p><h2 id="任务是怎么添加进队列的"><a href="#任务是怎么添加进队列的" class="headerlink" title="任务是怎么添加进队列的"></a>任务是怎么添加进队列的</h2><p>先看看给 <code>Timer</code> 添加任务会发生什么。点进 <code>scheduleAtFixedRate</code> 可以看到这么一段代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduleAtFixedRate</span><span class="params">(TimerTask task, <span class="type">long</span> delay, <span class="type">long</span> period)</span> {</span><br><span class="line">    <span class="keyword">if</span> (delay &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"Negative delay."</span>);</span><br><span class="line">    <span class="keyword">if</span> (period &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"Non-positive period."</span>);</span><br><span class="line">    sched(task, System.currentTimeMillis()+delay, period);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>跟着点进 <code>sched</code> 可以看到这么一段：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sched</span><span class="params">(TimerTask task, <span class="type">long</span> time, <span class="type">long</span> period)</span> {</span><br><span class="line">    <span class="keyword">if</span> (time &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"Illegal execution time."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constrain value of period sufficiently to prevent numeric</span></span><br><span class="line">    <span class="comment">// overflow while still being effectively infinitely large.</span></span><br><span class="line">    <span class="keyword">if</span> (Math.abs(period) &gt; (Long.MAX_VALUE &gt;&gt; <span class="number">1</span>))</span><br><span class="line">        period &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span>(queue) {</span><br><span class="line">        <span class="keyword">if</span> (!thread.newTasksMayBeScheduled)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">"Timer already cancelled."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(task.lock) {</span><br><span class="line">            <span class="keyword">if</span> (task.state != TimerTask.VIRGIN)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                    <span class="string">"Task already scheduled or cancelled"</span>);</span><br><span class="line">            task.nextExecutionTime = time;</span><br><span class="line">            task.period = period;</span><br><span class="line">            task.state = TimerTask.SCHEDULED;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        queue.add(task);</span><br><span class="line">        <span class="keyword">if</span> (queue.getMin() == task)</span><br><span class="line">            queue.notify();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看下来其实就做了两件事：向 <code>queue</code> 里面增加一个 <code>TimerTask</code> 对象，然后检查队列里面即将执行的 task，如果是刚添加的这个 task 那就唤醒任务。</p><h2 id="任务是怎么被调度的"><a href="#任务是怎么被调度的" class="headerlink" title="任务是怎么被调度的"></a>任务是怎么被调度的</h2><p>点进 <code>TimerThread</code> 首先可以看到它的 <code>run</code> 方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        mainLoop();</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        <span class="comment">// Someone killed this Thread, behave as if Timer cancelled</span></span><br><span class="line">        <span class="keyword">synchronized</span>(queue) {</span><br><span class="line">            newTasksMayBeScheduled = <span class="literal">false</span>;</span><br><span class="line">            queue.clear();  <span class="comment">// Eliminate obsolete references</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>因为 <code>TimerThread</code> 继承自 <code>Thread</code> 类，所以 <code>run</code> 方法就是它的入口点。在 <code>Timer</code> 的构造函数中就会执行 <code>thread.start()</code> 操作，所以这个调度线程在 <code>Timer</code> 被创建后就会开始运行。</p><p>继续看看 <code>mainLoop</code> 里面干了些啥。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The main timer loop.  (See class comment.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mainLoop</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            TimerTask task;</span><br><span class="line">            <span class="type">boolean</span> taskFired;</span><br><span class="line">            <span class="keyword">synchronized</span>(queue) {</span><br><span class="line">                <span class="comment">// Wait for queue to become non-empty</span></span><br><span class="line">                <span class="keyword">while</span> (queue.isEmpty() &amp;&amp; newTasksMayBeScheduled)</span><br><span class="line">                    queue.wait();</span><br><span class="line">                <span class="keyword">if</span> (queue.isEmpty())</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// Queue is empty and will forever remain; die</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Queue nonempty; look at first evt and do the right thing</span></span><br><span class="line">                <span class="type">long</span> currentTime, executionTime;</span><br><span class="line">                task = queue.getMin();</span><br><span class="line">                <span class="keyword">synchronized</span>(task.lock) {</span><br><span class="line">                    <span class="keyword">if</span> (task.state == TimerTask.CANCELLED) {</span><br><span class="line">                        queue.removeMin();</span><br><span class="line">                        <span class="keyword">continue</span>;  <span class="comment">// No action required, poll queue again</span></span><br><span class="line">                    }</span><br><span class="line">                    currentTime = System.currentTimeMillis();</span><br><span class="line">                    executionTime = task.nextExecutionTime;</span><br><span class="line">                    <span class="keyword">if</span> (taskFired = (executionTime&lt;=currentTime)) {</span><br><span class="line">                        <span class="keyword">if</span> (task.period == <span class="number">0</span>) { <span class="comment">// Non-repeating, remove</span></span><br><span class="line">                            queue.removeMin();</span><br><span class="line">                            task.state = TimerTask.EXECUTED;</span><br><span class="line">                        } <span class="keyword">else</span> { <span class="comment">// Repeating task, reschedule</span></span><br><span class="line">                            queue.rescheduleMin(</span><br><span class="line">                                task.period&lt;<span class="number">0</span> ? currentTime   - task.period</span><br><span class="line">                                            : executionTime + task.period);</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (!taskFired) <span class="comment">// Task hasn't yet fired; wait</span></span><br><span class="line">                    queue.wait(executionTime - currentTime);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (taskFired)  <span class="comment">// Task fired; run it, holding no locks</span></span><br><span class="line">                task.run();</span><br><span class="line">        } <span class="keyword">catch</span>(InterruptedException e) {</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>首先它检查队列是否为空，如果是空的，那么这个调度线程就会进入等待状态（这就是在添加任务之后要调用 <code>notify()</code> 方法的原因）；如果不仅队列是空的，而且队列不再接收新的任务，那么就说明这个 <code>Timer</code> 正在被销毁，所以直接退出循环。</p><p>如果队列非空，那么调度线程就从队列中取出最接近下一个执行时机的任务，然后安排下一次任务执行的时间。同时，在取出最近需要执行的任务后，调度线程会比较当前时间与计划执行时间，如果当前时间还没到，那么调度线程会 <code>wait</code> 到计划执行时间。最后，调用 <code>TimerTask</code> 的 <code>run</code> 方法，开始执行我们指定它做的事。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说白了就是俩东西：</p><ul><li>一个保存任务的队列，里面的任务按照执行时间排队</li><li>一个死循环，反复从队列里面取出最接近下一个执行时机的任务，执行它，并安排下一次的时机</li></ul><p>这玩意优点就是简单粗暴而且轻量级，但因为它是单线程的，如果某个任务执行时间过长，那么后续任务有可能会受影响；而且因为系统调度和任务执行时间的不确定性，它不能提供高精度的定时任务服务；此外，如果其中某个任务抛出了未处理的异常，那么整个 <code>Timer</code> 都会挂掉，也会影响到同一个队列里面的其他任务。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/Timer/">Timer</category>
      
      
      <comments>https://www.boris1993.com/java-read-src-timer.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java 源码阅读 - 类加载的双亲委派模型</title>
      <link>https://www.boris1993.com/java-read-src-parent-delegation-model.html</link>
      <guid>https://www.boris1993.com/java-read-src-parent-delegation-model.html</guid>
      <pubDate>Wed, 13 Dec 2023 15:29:52 GMT</pubDate>
      
      <description>&lt;p&gt;关于 Java 的类加载机制，尽管我看过几篇文章，知道个&lt;code&gt;双亲委派模型&lt;/code&gt;，但是从来没钻进源码里看它到底是怎么委派的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>关于 Java 的类加载机制，尽管我看过几篇文章，知道个<code>双亲委派模型</code>，但是从来没钻进源码里看它到底是怎么委派的。</p><span id="more"></span><h2 id="什么双亲？怎么委派？"><a href="#什么双亲？怎么委派？" class="headerlink" title="什么双亲？怎么委派？"></a>什么双亲？怎么委派？</h2><p>我刚一开始听到<code>双亲委派</code>，还纳闷咋还双亲？后来才知道，这纯纯就是 <code>Parent Delegation</code> 这个词的误译。<code>Parent</code> 这里指的并不是双亲，而是指父辈。所以看到有人翻译为 “向上委托模型”，我感觉这个翻译更好一点，至于另一个翻译 “啃老模型”…… 倒也没毛病……</p><p>至于怎么委托，相信各位都背的滚瓜烂熟了。那就是，当类加载器收到类加载请求的时候，它首先会把这个请求委托给上一层的类加载器去尝试加载，直到委托到启动类加载器；只有当上一层类加载器无法完成这个加载请求的时候，次一级类加载器才会尝试自己加载。</p><p><img data-src="https://blog-static.boris1993.com/java-read-src-parent-delegation-model/classloader-relationship.png"></p><h2 id="代码上的实现"><a href="#代码上的实现" class="headerlink" title="代码上的实现"></a>代码上的实现</h2><p>截图里面的代码就是 <code>ClassLoader#loadClass</code> 方法的实现，来自 <code>Liberica JDK 8</code>。</p><p><img data-src="https://blog-static.boris1993.com/java-read-src-parent-delegation-model/load-class-method-implementation.png"></p><p>看得出来，逻辑还是很简单易懂的。一进来先加个锁，防止出现并发问题。然后检查这个类是不是已经被加载了。没被加载的话，就一层层向上委托，直到到达启动类加载器。如果上一层类加载器返回了 <code>null</code> 或者抛出了 <code>ClassNotFoundException</code> 异常，就说明它没找到这个类，那么本层类加载器就会尝试加载这个类，如果找不到的话，它就接着把请求交回下一层的类加载器。</p><p>虽然上面的图和代码已经可以解释双亲委派的工作机制，但我还是喜欢调试进去看看代码具体是咋走的。所以我写了这么几行，用来调试类加载器。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException {</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Main.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader.toString());</span><br><span class="line">        <span class="comment">// 在下面这一行下个断点，走到这一行之后再给 ClassLoader#loadClass 下个断点</span></span><br><span class="line">        classLoader.loadClass(<span class="string">"DaemonThreadDemo"</span>);</span><br><span class="line">        classLoader.loadClass(<span class="string">"java.util.HashMap"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>断点从 <code>classLoader.loadClass("DaemonThreadDemo")</code> 这一行进去并停留在 <code>if (c == null)</code> 之后可以看到，目前类加载的委托请求是交给 <code>AppClassLoader</code>，看得出来，这个就是应用类加载器。</p><p><img data-src="https://blog-static.boris1993.com/java-read-src-parent-delegation-model/debug-classloader-1.png"></p><p>继续往下走到 <code>c = parent.loadClass(name, false)</code> 这一行，然后给 <code>parent</code> 变量添加一个监视，就可以看到接下来 <code>AppClassLoader</code> 要把这个类加载请求委托给 <code>ExtClassLoader</code>，同理可得，这个就是扩展类加载器。</p><p><img data-src="https://blog-static.boris1993.com/java-read-src-parent-delegation-model/debug-classloader-2.png"></p><p>接着往下走，继续调试 <code>ExtClassLoader</code>，这时候可以看到 <code>parent</code> 是 <code>null</code>。没有了 <code>parent</code>，这个类加载器就会将这个类加载请求委托给启动类加载器并尝试加载这个类。</p><p><img data-src="https://blog-static.boris1993.com/java-read-src-parent-delegation-model/debug-classloader-3.png"></p><p>逐层点进去，可以看到如下代码：</p><p><img data-src="https://blog-static.boris1993.com/java-read-src-parent-delegation-model/debug-classloader-4.png"></p><p>emmmm…… 走到了一个 native 方法了呢…… 嘛，里面的代码先不管了，看名字能猜得出来，在这里会调用启动类加载器来尝试加载这个类。</p><p>因为要加载的 <code>DaemonThreadDemo</code> 类并不归启动类加载器管，所以 <code>findBootstrapClassOrNull</code> 返回了 <code>null</code>。<code>ExtClassLoader</code> 得知启动类加载器加载失败，那么它自己就会再尝试加载。然而这个类也不归扩展类加载器管，所以在 <code>ExtClassLoader</code> 里面调用 <code>findClass</code> 方法会抛出 <code>ClassNotFoundException</code> 异常并返回到 <code>AppClassLoader</code>。</p><p>这时候，因为 <code>DaemonThreadDemo</code> 这个类归应用类加载器管，所以这一次调用 <code>findClass</code> 成功的找到了这个类。</p><p><img data-src="https://blog-static.boris1993.com/java-read-src-parent-delegation-model/debug-classloader-5.png"></p><p>所以代码可以成功走到 <code>return c</code> 这一行，来完成一个类的加载。</p><h2 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h2><p>说到双亲委派模型，必会谈到怎么破坏它。看完上面的代码就明白了，我们可以自己创建一个自定义类加载器，并重写 <code>loadClass</code> 方法，不让它向上委派就行了。</p><h2 id="番外：尝试理解findBootstrapClass"><a href="#番外：尝试理解findBootstrapClass" class="headerlink" title="番外：尝试理解findBootstrapClass"></a>番外：尝试理解 <code>findBootstrapClass</code></h2><p>虽然这部分是 C 和 C++ 的实现，但还是想硬着头皮尝试看一下。到 <code>Bellsoft</code> 的官网下载<span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5iZWxsLXN3LmNvbS9qYXZhLzh1MzkyKzkvYmVsbHNvZnQtamRrOHUzOTIrOS1zcmMudGFyLmd6">虚拟机的源码<i class="fa fa-external-link-alt"></i></span>之后，我找到了 <code>FindBootStrapClass</code> 函数的实现：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这部分代码在 java_md.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The implementation for finding classes from the bootstrap</span></span><br><span class="line"><span class="comment"> * class loader, refer to java.h</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> FindClassFromBootLoader_t *findBootClass = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">jclass <span class="title function_">FindBootStrapClass</span><span class="params">(JNIEnv *env, <span class="type">const</span> <span class="type">char</span> *classname)</span></span><br><span class="line">{</span><br><span class="line">   HMODULE hJvm;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (findBootClass == <span class="literal">NULL</span>) {</span><br><span class="line">       hJvm = GetModuleHandle(JVM_DLL);</span><br><span class="line">       <span class="keyword">if</span> (hJvm == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">       <span class="comment">/* need to use the demangled entry point */</span></span><br><span class="line">       findBootClass = (FindClassFromBootLoader_t *)GetProcAddress(hJvm,</span><br><span class="line">            <span class="string">"JVM_FindClassFromBootLoader"</span>);</span><br><span class="line">       <span class="keyword">if</span> (findBootClass == <span class="literal">NULL</span>) {</span><br><span class="line">          JLI_ReportErrorMessage(DLL_ERROR4, <span class="string">"JVM_FindClassFromBootLoader"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">return</span> findBootClass(env, classname);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个 C 语言…… 确实跟我大学学的 C 语言不一样啊…… 爬了些文，大概理解这里是要找 <code>JVM_FindClassFromBootLoader</code> 这个函数的实际地址，然后赋给 <code>findBootClass</code> 指针并执行它的代码。于是我接着挖到了 <code>JVM_FindClassFromBootLoader</code> 函数的实现。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这部分代码在 jvm.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns a class loaded by the bootstrap class loader; or null</span></span><br><span class="line"><span class="comment">// if not found.  ClassNotFoundException is not thrown.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Rationale behind JVM_FindClassFromBootLoader</span></span><br><span class="line"><span class="comment">// a&gt; JVM_FindClassFromClassLoader was never exported in the export tables.</span></span><br><span class="line"><span class="comment">// b&gt; because of (a) java.dll has a direct dependecy on the  unexported</span></span><br><span class="line"><span class="comment">//    private symbol "_JVM_FindClassFromClassLoader@20".</span></span><br><span class="line"><span class="comment">// c&gt; the launcher cannot use the private symbol as it dynamically opens</span></span><br><span class="line"><span class="comment">//    the entry point, so if something changes, the launcher will fail</span></span><br><span class="line"><span class="comment">//    unexpectedly at runtime, it is safest for the launcher to dlopen a</span></span><br><span class="line"><span class="comment">//    stable exported interface.</span></span><br><span class="line"><span class="comment">// d&gt; re-exporting JVM_FindClassFromClassLoader as public, will cause its</span></span><br><span class="line"><span class="comment">//    signature to change from _JVM_FindClassFromClassLoader@20 to</span></span><br><span class="line"><span class="comment">//    JVM_FindClassFromClassLoader and will not be backward compatible</span></span><br><span class="line"><span class="comment">//    with older JDKs.</span></span><br><span class="line"><span class="comment">// Thus a public/stable exported entry point is the right solution,</span></span><br><span class="line"><span class="comment">// public here means public in linker semantics, and is exported only</span></span><br><span class="line"><span class="comment">// to the JDK, and is not intended to be a public API.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JVM_ENTRY</span>(jclass, <span class="built_in">JVM_FindClassFromBootLoader</span>(JNIEnv* env,</span><br><span class="line">                                              <span class="type">const</span> <span class="type">char</span>* name))</span><br><span class="line">  <span class="built_in">JVMWrapper2</span>(<span class="string">"JVM_FindClassFromBootLoader %s"</span>, name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Java libraries should ensure that name is never null...</span></span><br><span class="line">  <span class="keyword">if</span> (name == <span class="literal">NULL</span> || (<span class="type">int</span>)<span class="built_in">strlen</span>(name) &gt; Symbol::<span class="built_in">max_length</span>()) {</span><br><span class="line">    <span class="comment">// It's impossible to create this class;  the name cannot fit</span></span><br><span class="line">    <span class="comment">// into the constant pool.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  TempNewSymbol h_name = SymbolTable::<span class="built_in">new_symbol</span>(name, CHECK_NULL);</span><br><span class="line">  Klass* k = SystemDictionary::<span class="built_in">resolve_or_null</span>(h_name, CHECK_NULL);</span><br><span class="line">  <span class="keyword">if</span> (k == <span class="literal">NULL</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (TraceClassResolution) {</span><br><span class="line">    <span class="built_in">trace_class_resolution</span>(k);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> (jclass) JNIHandles::<span class="built_in">make_local</span>(env, k-&gt;<span class="built_in">java_mirror</span>());</span><br><span class="line">JVM_END</span><br></pre></td></tr></tbody></table></figure><p>好吧，更看不懂了。继续爬了文之后，理解这里大致做了三件事：从常量池中拿到类名的信息；查找类的信息并实例化 <code>Klass</code>；将 <code>Klass</code> 对象转换为 <code>jclass</code> 类型并返回。</p><p>算了，虚拟机源码就看到这吧…… 有兴趣的同志可以看<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veW91Z2V3ZS9wLzE0NDI2OTM2Lmh0bWw="> JVM 系列 (四)：java 方法的查找过程实现<i class="fa fa-external-link-alt"></i></span>这篇博客。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE/">双亲委派</category>
      
      <category domain="https://www.boris1993.com/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD/">类加载</category>
      
      
      <comments>https://www.boris1993.com/java-read-src-parent-delegation-model.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>volatile 修饰符在双检锁单例模式中的作用</title>
      <link>https://www.boris1993.com/java-volatile-in-double-checked-singleton.html</link>
      <guid>https://www.boris1993.com/java-volatile-in-double-checked-singleton.html</guid>
      <pubDate>Sun, 10 Dec 2023 08:08:44 GMT</pubDate>
      
      <description>&lt;p&gt;在实现一个双检锁单例的时候，IDEA 提示我要给 &lt;code&gt;INSTANCE&lt;/code&gt; 实例加上 &lt;code&gt;volatile&lt;/code&gt; 修饰符。当时并不明白为啥，所以选择相信 IDE。但是还是那句话，不能知其然不知其所以然啊，自己写的代码，不能自己心里没底不是。于是乎我一顿网上冲浪，终于整明白了为啥双检单例必须要用 &lt;code&gt;volatile&lt;/code&gt; 修饰符。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>在实现一个双检锁单例的时候，IDEA 提示我要给 <code>INSTANCE</code> 实例加上 <code>volatile</code> 修饰符。当时并不明白为啥，所以选择相信 IDE。但是还是那句话，不能知其然不知其所以然啊，自己写的代码，不能自己心里没底不是。于是乎我一顿网上冲浪，终于整明白了为啥双检单例必须要用 <code>volatile</code> 修饰符。</p><span id="more"></span><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>这个单例类没什么好说的，就是一个平平无奇的双检锁单例实现。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) {</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// Do something here</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>而 IDEA 在外层的 <code>if</code> 上标了一个警告，并且建议我给 <code>INSTANCE</code> 变量加上 <code>volatile</code> 修饰符。</p><p><img data-src="https://blog-static.boris1993.com/java-volatile-in-double-checked-singleton/suggestion-in-idea.png"></p><h2 id="如果不加volatile会有什么问题"><a href="#如果不加volatile会有什么问题" class="headerlink" title="如果不加volatile会有什么问题"></a>如果不加 <code>volatile</code> 会有什么问题</h2><p>上面的代码，乍一看非常严谨，在发现 <code>INSTANCE</code> 是 <code>null</code> 的时候，就对其加锁并再检查一次，还是 <code>null</code> 的话就为它创建一个新的实例，最后返回它。但是看了一些文章之后发现，在多线程场景下，有可能出现虽然成功获取到 <code>INSTANCE</code>，但在调用其中的方法时仍然抛出空指针异常的诡异情况。</p><p>比如有这样一个场景，<code>Thread 1</code> 和 <code>Thread 2</code> 同时请求了 <code>Singleton#getInstance()</code> 方法，<code>Thread 1</code> 执行到了第 8 行，开始实例化这个对象；而 <code>Thread 2</code> 执行到了第 5 行，开始检查 <code>INSTANCE</code> 是否为 <code>null</code>。这个时候，有一定几率，虽然 <code>Thread 2</code> 检查到 <code>INSTANCE</code> 并不是 <code>null</code>，但是调用 <code>Singleton#doSomething()</code> 方法的时候却会抛出空指针异常。</p><p><img data-src="https://blog-static.boris1993.com/java-volatile-in-double-checked-singleton/instance-accessed-by-multi-threads.png"></p><p>造成这个问题的原因就是 Java 的指令重排。</p><p>在搞清楚 <code>Thread 2</code> 看到 <code>INSTANCE</code> 虽然不是 <code>null</code>，却在方法调用的时候会抛空指针异常的原因之前，先要搞清楚实例化对象的时候，JVM 到底干了什么。</p><p>JVM 实例化一个对象的过程，大致可以分为这几步：</p><ol><li>JVM 为这个对象分配一片内存</li><li>在这片内存上初始化这个对象</li><li>将这片内存的地址赋值给 <code>INSTANCE</code> 变量</li></ol><p>因为把内存地址赋值给 <code>INSTANCE</code> 是最后一步，所以 <code>Thread 1</code> 在这一步执行之前，<code>Thread 2</code> 对 <code>INSTANCE == null</code> 的判断一定为 <code>true</code>，进而因为拿不到 <code>Singleton</code> 类的锁而被阻塞，直到 <code>Thread 1</code> 完成对 <code>INSTANCE</code> 变量的实例化。</p><p>但是，上面这三步它不是个原子操作，并且 JVM 可能会进行重排序，也就是说上面这三步可能被重排成</p><ol><li>JVM 为这个对象分配一片内存</li><li>将这片内存的地址赋值给 <code>INSTANCE</code> 变量</li><li>在这片内存上初始化这个对象</li></ol><p>你看，这问题就来了，如果在 <code>Thread 1</code> 做完第二步但没做第三步的时候，<code>Thread 2</code> 开始检查 <code>INSTANCE</code> 是不是 <code>null</code> 就会得到 <code>false</code>，然后就走到 <code>return</code>，得到一个不完整的 <code>INSTANCE</code> 对象。这时候，虽然 <code>INSTANCE</code> 不是 <code>null</code>，但同时它也没有完成初始化，所以 <code>Thread 2</code> 在调用 <code>Singleton#doSomething()</code> 方法的时候，就会抛出空指针异常。</p><p>这个问题的解决方案就是 <code>volatile</code> 修饰符，因为它可以禁止指令重排，所以在给 <code>INSTANCE</code> 加上 <code>volatile</code> 之后，JVM 就会老老实实的先初始化好这个对象，再为 <code>INSTANCE</code> 赋值，这样多线程场景下每个线程得到的 <code>INSTANCE</code> 实例都会是一个初始化好了的 <code>Singleton</code> 对象。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/volatile/">volatile</category>
      
      <category domain="https://www.boris1993.com/tags/singleton/">singleton</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">单例模式</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%8F%8C%E6%A3%80%E9%94%81/">双检锁</category>
      
      
      <comments>https://www.boris1993.com/java-volatile-in-double-checked-singleton.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>梦幻电子宠物 - 雪儿</title>
      <link>https://www.boris1993.com/virtual-pet-xue-er.html</link>
      <guid>https://www.boris1993.com/virtual-pet-xue-er.html</guid>
      <pubDate>Mon, 27 Nov 2023 15:08:32 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;突然想起来小时候玩过的一个电子宠物游戏《梦幻电子宠物》。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主窗口&lt;/th&gt;
&lt;th&gt;宠物状态&lt;/th&gt;
&lt;th&gt;关于&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;img data-src</description>
        
      
      
      
      <content:encoded><![CDATA[<p>突然想起来小时候玩过的一个电子宠物游戏《梦幻电子宠物》。</p><table><thead><tr><th>主窗口</th><th>宠物状态</th><th>关于</th></tr></thead><tbody><tr><td><img data-src="https://blog-static.boris1993.com/virtual-pet-xue-er/main_window.png"></td><td><img data-src="https://blog-static.boris1993.com/virtual-pet-xue-er/statistics.png"></td><td><img data-src="https://blog-static.boris1993.com/virtual-pet-xue-er/about.png"></td></tr></tbody></table><p>这个小游戏的存档机制很有意思，是在 C 盘根目录下创建一个 ini 文件，记录宠物的出生时间和各项指标，然后它会根据这个时间来计算宠物的状态。也就是说，即使你把游戏关掉，宠物也不会停止成长。所以玩家就必须经常打开游戏照顾这个宠物，不然很有可能下次打开的时候，宠物就已经变成一个墓碑了……</p><p>这个小游戏我上传到蓝奏云了，有兴趣的可以去下载来玩。不过因为 64 位的 Windows 已经不支持 16 位应用，所以你需要一个老版本系统的虚拟机，或者用 <a href="https://github.com/otya128/winevdm"><code>otvdm</code></a>来运行。<br>地址：<span class="exturl" data-url="aHR0cHM6Ly9ib3JpczE5OTMubGFuem91ai5jb20vYjAzcXVldTNj">https://boris1993.lanzouj.com/b03queu3c<i class="fa fa-external-link-alt"></i></span><br>密码：15l3</p><p>P.S.：在找原版的时候，我注意到关于页面里 “碧晓拱籍 设计”，以为这是原作者的名字，于是就拿它一顿找啊，但一无所获。突然灵光一现，这会不会是…… 乱码？鬼使神差把这四个字按照 <code>GBK</code> 编码保存，然后再用 <code>SHIFT-JIS</code> 编码打开，得到一串片假名<code>ｱﾌﾏ�ｹｰｼｮ</code>，定睛一看这不就是 <code>application</code> 的日语<code>アプリケション</code>嘛，虽然里面又掺了个乱码……</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/memories/">忆往昔</category>
      
      
      <category domain="https://www.boris1993.com/tags/%E7%94%B5%E5%AD%90%E5%AE%A0%E7%89%A9/">电子宠物</category>
      
      <category domain="https://www.boris1993.com/tags/%E6%A2%A6%E5%B9%BB%E7%94%B5%E5%AD%90%E5%AE%A0%E7%89%A9/">梦幻电子宠物</category>
      
      <category domain="https://www.boris1993.com/tags/%E9%9B%AA%E5%84%BF/">雪儿</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%B0%8F%E6%B8%B8%E6%88%8F/">小游戏</category>
      
      
      <comments>https://www.boris1993.com/virtual-pet-xue-er.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>利用 Grafana 监控 RouterOS 运行状态</title>
      <link>https://www.boris1993.com/monitoring-routeros-with-grafana.html</link>
      <guid>https://www.boris1993.com/monitoring-routeros-with-grafana.html</guid>
      <pubDate>Sat, 18 Nov 2023 15:19:57 GMT</pubDate>
      
      <description>&lt;p&gt;乱翻收藏夹的时候发现我还有个免费的 Grafana Cloud，遂想着把我这些自建的东西都用它监控起来，反正不用白不用。那么第一个就拿我的 RouterOS 软路由开刀吧。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>乱翻收藏夹的时候发现我还有个免费的 Grafana Cloud，遂想着把我这些自建的东西都用它监控起来，反正不用白不用。那么第一个就拿我的 RouterOS 软路由开刀吧。</p><span id="more"></span><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Mikrotik CHR 7.12</li><li>Grafana Cloud - Cloud Free 订阅</li><li> Prometheus 2.37</li><li>mktxp </li><li>CloudFlare Tunnel，如果你像我一样把 Prometheus 部署在家宽的话</li></ul><h2 id="在RouterOS系统创建组和用户"><a href="#在RouterOS系统创建组和用户" class="headerlink" title="在RouterOS系统创建组和用户"></a>在 RouterOS 系统创建组和用户</h2><p>毕竟还是用第三方工具登陆路由器，还是遵循最小权限原则，给 <code>mktxp</code> 创建一个只包含必要的权限的账号比较好。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/user<span class="built_in">/group </span><span class="built_in">add</span> <span class="attribute">name</span>=prometheus <span class="attribute">policy</span>=read,api</span><br><span class="line"><span class="built_in">/user </span><span class="built_in">add</span> <span class="attribute">name</span>=prometheus <span class="attribute">group</span>=prometheus <span class="attribute">password</span>=changeme <span class="attribute">disabled</span>=<span class="literal">no</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置mktxp"><a href="#配置mktxp" class="headerlink" title="配置mktxp"></a>配置 mktxp</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FrcHcvbWt0eHA=">mktxp<i class="fa fa-external-link-alt"></i></span>是一个面向 Mikrotik RouterOS 的 Prometheus exporter。选择这个而不是 <code>nshttpd/mikrotik-exporter</code> 主要出于以下两个原因：</p><ul><li><code>nshttpd/mikrotik-exporter</code> 已经停止更新，最后一次 commit 停留于 2022 年 6 月 17 日</li><li>它每一次获取数据都会登入和登出，而这会导致 RouterOS 的日志里面充斥 <code>prometheus</code> 用户的登入和登出记录，就像这样：<br><img data-src="https://blog-static.boris1993.com/monitoring-routeros-with-grafana/mikrotik-exporter-log-spamming.png"></li></ul><p>我使用 Docker 部署 <code>mktxp</code>，它需要两个配置文件：<code>mktxp.conf</code> 和<code>_mktxp.conf</code>。</p><p><code>_mktxp.conf</code> 负责 <code>mktxp</code> 的运行配置，比如端口号、数据获取的间隔时间等。内容如下：</p><figure class="highlight toml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[MKTXP]</span></span><br><span class="line">    <span class="attr">port</span> = <span class="number">49090</span></span><br><span class="line">    <span class="attr">socket_timeout</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">initial_delay_on_failure</span> = <span class="number">120</span></span><br><span class="line">    <span class="attr">max_delay_on_failure</span> = <span class="number">900</span></span><br><span class="line">    <span class="attr">delay_inc_div</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">bandwidth</span> = <span class="literal">True</span>                <span class="comment"># Turns metrics bandwidth metrics collection on / off</span></span><br><span class="line">    <span class="attr">bandwidth_test_interval</span> = <span class="number">420</span>   <span class="comment"># Interval for colllecting bandwidth metrics</span></span><br><span class="line">    <span class="attr">minimal_collect_interval</span> = <span class="number">5</span>    <span class="comment"># Minimal metric collection interval</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">verbose_mode</span> = <span class="literal">False</span>            <span class="comment"># Set it on for troubleshooting</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">fetch_routers_in_parallel</span> = <span class="literal">False</span>   <span class="comment"># Set to True if you want to fetch multiple routers parallel</span></span><br><span class="line">    <span class="attr">max_worker_threads</span> = <span class="number">5</span>              <span class="comment"># Max number of worker threads that can fetch routers. Meaningless if fetch_routers_in_parallel is set to False</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">max_scrape_duration</span> = <span class="number">10</span>            <span class="comment"># Max duration of individual routers' metrics collection</span></span><br><span class="line">    <span class="attr">total_max_scrape_duration</span> = <span class="number">30</span>      <span class="comment"># Max overall duration of all metrics collection</span></span><br></pre></td></tr></tbody></table></figure><p><code>mktxp.conf</code> 用于配置要监控的 RouterOS 实例，内容如下：</p><figure class="highlight toml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Router为路由器的代号，可以改成自己喜欢的值</span></span><br><span class="line"><span class="comment"># 将来在Grafana就是用这个来区分各个RouterOS设备</span></span><br><span class="line"><span class="section">[Router]</span></span><br><span class="line">    <span class="comment"># 是否启用对这个RouterOS设备的监控</span></span><br><span class="line">    <span class="attr">enabled</span> = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 路由器的地址</span></span><br><span class="line">    <span class="attr">hostname</span> = <span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line">    <span class="comment"># RouterOS API服务的端口</span></span><br><span class="line">    <span class="attr">port</span> = <span class="number">8728</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填写上面创建的 prometheus 用户的账号和密码</span></span><br><span class="line">    <span class="attr">username</span> = prometheus</span><br><span class="line">    <span class="attr">password</span> = changeme</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SSL部分关闭就行</span></span><br><span class="line">    <span class="attr">use_ssl</span> = <span class="literal">False</span>                 <span class="comment"># enables connection via API-SSL servis</span></span><br><span class="line">    <span class="attr">no_ssl_certificate</span> = <span class="literal">False</span>      <span class="comment"># enables API_SSL connect without router SSL certificate</span></span><br><span class="line">    <span class="attr">ssl_certificate_verify</span> = <span class="literal">False</span>  <span class="comment"># turns SSL certificate verification on / off</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下为各个监控的开关，按需设定即可</span></span><br><span class="line">    <span class="attr">installed_packages</span> = <span class="literal">True</span>       <span class="comment"># Installed packages</span></span><br><span class="line">    <span class="attr">dhcp</span> = <span class="literal">True</span>                     <span class="comment"># DHCP general metrics</span></span><br><span class="line">    <span class="attr">dhcp_lease</span> = <span class="literal">True</span>               <span class="comment"># DHCP lease metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">connections</span> = <span class="literal">True</span>              <span class="comment"># IP connections metrics</span></span><br><span class="line">    <span class="attr">connection_stats</span> = <span class="literal">False</span>        <span class="comment"># Open IP connections metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">pool</span> = <span class="literal">True</span>                     <span class="comment"># Pool metrics</span></span><br><span class="line">    <span class="attr">interface</span> = <span class="literal">True</span>                <span class="comment"># Interfaces traffic metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">firewall</span> = <span class="literal">True</span>                 <span class="comment"># IPv4 Firewall rules traffic metrics</span></span><br><span class="line">    <span class="attr">ipv6_firewall</span> = <span class="literal">False</span>           <span class="comment"># IPv6 Firewall rules traffic metrics</span></span><br><span class="line">    <span class="attr">ipv6_neighbor</span> = <span class="literal">False</span>           <span class="comment"># Reachable IPv6 Neighbors</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">poe</span> = <span class="literal">False</span>                     <span class="comment"># POE metrics</span></span><br><span class="line">    <span class="attr">monitor</span> = <span class="literal">True</span>                  <span class="comment"># Interface monitor metrics</span></span><br><span class="line">    <span class="attr">netwatch</span> = <span class="literal">True</span>                 <span class="comment"># Netwatch metrics</span></span><br><span class="line">    <span class="attr">public_ip</span> = <span class="literal">True</span>                <span class="comment"># Public IP metrics</span></span><br><span class="line">    <span class="attr">route</span> = <span class="literal">True</span>                    <span class="comment"># Routes metrics</span></span><br><span class="line">    <span class="attr">wireless</span> = <span class="literal">False</span>                <span class="comment"># WLAN general metrics</span></span><br><span class="line">    <span class="attr">wireless_clients</span> = <span class="literal">False</span>        <span class="comment"># WLAN clients metrics</span></span><br><span class="line">    <span class="attr">capsman</span> = <span class="literal">False</span>                 <span class="comment"># CAPsMAN general metrics</span></span><br><span class="line">    <span class="attr">capsman_clients</span> = <span class="literal">False</span>         <span class="comment"># CAPsMAN clients metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">user</span> = <span class="literal">True</span>                     <span class="comment"># Active Users metrics</span></span><br><span class="line">    <span class="attr">queue</span> = <span class="literal">True</span>                    <span class="comment"># Queues metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">remote_dhcp_entry</span> = None        <span class="comment"># An MKTXP entry for remote DHCP info resolution (capsman/wireless)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">use_comments_over_names</span> = <span class="literal">True</span>  <span class="comment"># when available, forces using comments over the interfaces names</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">check_for_updates</span> = <span class="literal">False</span>       <span class="comment"># check for available ROS updates</span></span><br></pre></td></tr></tbody></table></figure><p>然后用如下 <code>docker-compose.yml</code> 启动 <code>mktxp</code> 即可：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mktxp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/akpw/mktxp:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mktxp</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">49090</span><span class="string">:49090</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;存放以上两个conf的目录&gt;:/home/mktxp/mktxp/</span></span><br></pre></td></tr></tbody></table></figure><p><code>mktxp</code> 在启动成功的情况下是没有日志输出的，访问 <code>49090</code> 端口（即<code>_mktxp.conf</code> 中配置的端口），如果能看到一大片 Prometheus 的 metrics，那就说明启动成功了。</p><h2 id="配置Prometheus"><a href="#配置Prometheus" class="headerlink" title="配置Prometheus"></a>配置 Prometheus</h2><p>在 <code>prometheus.yml</code> 中添加如下配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'mikrotik_exporter'</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">'mktxp的主机地址:49090'</span>]</span><br><span class="line">        <span class="comment"># 标签按需，不想要可以去掉</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">instance:</span> <span class="string">'CHR'</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="string">'Production'</span></span><br></pre></td></tr></tbody></table></figure><p>重启 Prometheus，然后到 Prometheus 的 <code>Status -&gt; Targets</code> 中，检查 <code>mikrotik_exporter</code> 这个 target 是否存在，以及 <code>State</code> 是不是 <code>UP</code>。</p><h2 id="配置Grafana"><a href="#配置Grafana" class="headerlink" title="配置Grafana"></a>配置 Grafana</h2><p>如果你的 Prometheus 是部署在家宽环境，那在配置 Grafana 之前需要先做个内网穿透，让 Prometheus 的 <code>9090/tcp</code> 端口能被外网访问到。内网穿透的方案有很多，比如我就用的 CloudFlare Tunnel。因为本文不是讲内网穿透，所以就不展开讲配置了。</p><p>到 Grafana 的 <code>Home -&gt; Connections -&gt; Data sources</code> 中，添加一个新的 Prometheus 数据源，其中 <code>Prometheus server URL</code> 填你的 Prometheus 服务的地址，别的不用管，<code>Save &amp; test</code> 成功就没问题。<br>此外，还可以到 Grafana 的 <code>Explore</code> 页面查询一个 <code>mktxp</code> 的 metrics，来检查 Grafana 是否能成功获取到数据。</p><p><img data-src="https://blog-static.boris1993.com/monitoring-routeros-with-grafana/grafana-explore-mktxp-metrics.png"></p><p>确认 Grafana 能成功获取到数据后，就可以导入 <code>mktxp</code> 的<span class="exturl" data-url="aHR0cHM6Ly9ncmFmYW5hLmNvbS9ncmFmYW5hL2Rhc2hib2FyZHMvMTM2NzktbWlrcm90aWstbWt0eHAtZXhwb3J0ZXIv"> Grafana Dashboard<i class="fa fa-external-link-alt"></i></span>了。到 Grafana 的 Dashboards 页面，点击 <code>New</code> 按钮后选择 <code>Import</code>，填写这个 dashboard 的 ID<code>13679</code>，点 <code>Load</code>，在下一个页面给这个 dashboard 绑定我们的 Prometheus，然后点 <code>Import</code>，就可以用了。</p><p><img data-src="https://blog-static.boris1993.com/monitoring-routeros-with-grafana/grafana-dashboard.png"></p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/RouterOS/">RouterOS</category>
      
      <category domain="https://www.boris1993.com/tags/Prometheus/">Prometheus</category>
      
      <category domain="https://www.boris1993.com/tags/Grafana/">Grafana</category>
      
      
      <comments>https://www.boris1993.com/monitoring-routeros-with-grafana.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RouterOS 配置 Wireguard 与阿里云 ECS 组网</title>
      <link>https://www.boris1993.com/routeros-setup-wireguard.html</link>
      <guid>https://www.boris1993.com/routeros-setup-wireguard.html</guid>
      <pubDate>Fri, 10 Nov 2023 14:47:46 GMT</pubDate>
      
      <description>&lt;p&gt;前两天赶上阿里云搞活动，薅了一个 99 一年的 ECS。因为要接进咱的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9uZXpoYS5ib3JpczE5OTMuY29tLw==&quot;&gt;探针&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，就得跟我的服务器组个网。之前都是用 NAS 上装的 &lt;code&gt;wgeasy&lt;/code&gt;，这回想想，咱的 RouterOS 也有 Wireguard，那干脆吃个螃蟹，看看能不能直接在软路由上组，慢慢的逐步把 &lt;code&gt;wgeasy&lt;/code&gt; 淘汰掉，顺便正经的学学 Wireguard 组网。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前两天赶上阿里云搞活动，薅了一个 99 一年的 ECS。因为要接进咱的<span class="exturl" data-url="aHR0cHM6Ly9uZXpoYS5ib3JpczE5OTMuY29tLw==">探针<i class="fa fa-external-link-alt"></i></span>，就得跟我的服务器组个网。之前都是用 NAS 上装的 <code>wgeasy</code>，这回想想，咱的 RouterOS 也有 Wireguard，那干脆吃个螃蟹，看看能不能直接在软路由上组，慢慢的逐步把 <code>wgeasy</code> 淘汰掉，顺便正经的学学 Wireguard 组网。</p><span id="more"></span><h2 id="网络规划"><a href="#网络规划" class="headerlink" title="网络规划"></a>网络规划</h2><p>我的 LAN 网段：<code>192.168.1.0/24</code><br>Wireguard 网段：<code>10.10.0.0/24</code><br>分配给 ECS 的 Wireguard 地址：<code>10.10.0.100/32</code></p><h2 id="RouterOS端的准备"><a href="#RouterOS端的准备" class="headerlink" title="RouterOS端的准备"></a>RouterOS 端的准备</h2><p>首先添加一个 <code>Wireguard</code> 接口：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/interface/wireguard/<span class="built_in">add</span> <span class="attribute">disabled</span>=<span class="literal">no</span> <span class="attribute">listen-port</span>=13231 <span class="attribute">mtu</span>=1420 <span class="attribute">name</span>=wireguard1</span><br></pre></td></tr></tbody></table></figure><p>然后添加防火墙规则，允许 <code>13231/udp</code> 端口：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in-interface更换成你的WAN接口的名字</span></span><br><span class="line">/ip/firewall<span class="built_in">/filter </span><span class="built_in">add</span> <span class="attribute">chain</span>=input <span class="attribute">in-interface</span>=<span class="string">"China Telecom"</span> <span class="attribute">dst-port</span>=13231 <span class="attribute">protocol</span>=udp <span class="attribute">action</span>=accept <span class="attribute">comment</span>=<span class="string">"Allow Wireguard"</span></span><br></pre></td></tr></tbody></table></figure><p>然后为 Wireguard 分配一个网段：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ip<span class="built_in">/address </span><span class="built_in">add</span> <span class="attribute">address</span>=10.10.0.0/24 <span class="attribute">network</span>=10.10.0.0 <span class="attribute">interface</span>=wireguard1 <span class="attribute">comment</span>=Wireguard</span><br></pre></td></tr></tbody></table></figure><p>接下来配置转发规则，允许 LAN 和 Wireguard 网段互通：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/ip/firewall<span class="built_in">/filter </span><span class="built_in">add</span> <span class="attribute">chain</span>=forward <span class="attribute">src-address</span>=192.168.1.0/24 <span class="attribute">dst-address</span>=10.10.0.0/24 <span class="attribute">action</span>=accept <span class="attribute">comment</span>=<span class="string">"Forward Wireguard to LAN"</span></span><br><span class="line">/ip/firewall<span class="built_in">/filter </span><span class="built_in">add</span> <span class="attribute">chain</span>=forward <span class="attribute">src-address</span>=10.10.0.0/24 <span class="attribute">dst-address</span>=192.168.1.0/24 <span class="attribute">action</span>=accept <span class="attribute">comment</span>=<span class="string">"Forward LAN to Wireguard"</span></span><br></pre></td></tr></tbody></table></figure><p>至此，RouterOS 上的 Wireguard 接口配置完毕。接下来需要取得 RouterOS 端 Wireguard 的公钥备用。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记下输出中的 public-key 备用</span></span><br><span class="line">&gt; /interface/wireguard/<span class="built_in">print</span></span><br><span class="line">Flags: X - disabled; R - running </span><br><span class="line"> 0  R <span class="attribute">name</span>=<span class="string">"wireguard1"</span> <span class="attribute">mtu</span>=1420 <span class="attribute">listen-port</span>=13231 <span class="attribute">private-key</span>=<span class="string">"routeros-private-key"</span> <span class="attribute">public-key</span>=<span class="string">"routeros-public-key"</span> </span><br></pre></td></tr></tbody></table></figure><h2 id="ECS端的准备"><a href="#ECS端的准备" class="headerlink" title="ECS端的准备"></a>ECS 端的准备</h2><p>接下来登陆到 ECS，安装 Wireguard。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Wireguard</span></span><br><span class="line">sudo apt install wireguard-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成密钥对</span></span><br><span class="line"><span class="built_in">mkdir</span> wireguard &amp;&amp; <span class="built_in">cd</span> wireguard</span><br><span class="line">wg genkey | <span class="built_in">tee</span> privatekey | wg pubkey &gt; publickey</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看公钥和私钥，备用</span></span><br><span class="line"><span class="built_in">cat</span> privatekey</span><br><span class="line"><span class="built_in">cat</span> publickey</span><br></pre></td></tr></tbody></table></figure><h2 id="开始组网"><a href="#开始组网" class="headerlink" title="开始组网"></a>开始组网</h2><p>先回到 RouterOS，为 Wireguard 添加一个 Peer：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># allowed-address为我们要分配给这个节点的地址</span></span><br><span class="line"><span class="comment"># public-key要填写上面在ECS上得到的publickey</span></span><br><span class="line"><span class="comment"># preshared-key相当于密码，用来保护这个peer不会被陌生的节点连接</span></span><br><span class="line"><span class="comment"># comment按需填写，用来标识这个节点</span></span><br><span class="line">/interface/wireguard/peers <span class="built_in">add</span> <span class="attribute">allowed-address</span>=10.10.0.100/32 <span class="attribute">interface</span>=wireguard1 <span class="attribute">public-key</span>=<span class="string">"ECS-PUBLIC-KEY"</span> <span class="attribute">preshared-key</span>=<span class="string">"the-preshared-key"</span> <span class="attribute">comment</span>=ECS-SH-1</span><br></pre></td></tr></tbody></table></figure><p>接下来到 ECS，在 <code>/etc/wireguard</code> 目录下创建配置文件 <code>wg0.conf</code>，填写如下内容：</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Interface]</span></span><br><span class="line"><span class="attr">PrivateKey</span> = &lt;填写上面生成的私钥&gt;</span><br><span class="line"><span class="attr">Address</span> = <span class="number">10.10</span>.<span class="number">0.100</span>/<span class="number">32</span></span><br><span class="line"><span class="attr">DNS</span> = <span class="number">119.29</span>.<span class="number">29.29</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Peer]</span></span><br><span class="line"><span class="attr">PublicKey</span> = &lt;填写RouterOS的公钥&gt;</span><br><span class="line"><span class="attr">PresharedKey</span> = &lt;填写在RouterOS中Peer的preshared-key&gt;</span><br><span class="line"><span class="attr">AllowedIPs</span> = <span class="number">192.168</span>.<span class="number">1.0</span>/<span class="number">24</span></span><br><span class="line"><span class="attr">PersistentKeepalive</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">Endpoint</span> = &lt;你的公网IP或DDNS域名&gt;:<span class="number">13231</span></span><br></pre></td></tr></tbody></table></figure><p>保存后就可以启动 <code>wg0</code> 这个接口并测试组网是否成功。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动wg0</span></span><br><span class="line">$ sudo systemctl start wg-quick@wg0</span><br><span class="line"></span><br><span class="line"><span class="comment"># ping一个内网地址看有没有响应</span></span><br><span class="line">$ ping 192.168.1.20</span><br><span class="line">PING 192.168.1.20 (192.168.1.20) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.1.20: icmp_seq=1 ttl=63 time=6.07 ms</span><br><span class="line">64 bytes from 192.168.1.20: icmp_seq=2 ttl=63 time=4.72 ms</span><br><span class="line">64 bytes from 192.168.1.20: icmp_seq=3 ttl=63 time=5.25 ms</span><br><span class="line">64 bytes from 192.168.1.20: icmp_seq=4 ttl=63 time=6.07 ms</span><br></pre></td></tr></tbody></table></figure><p>如果能从 ECS 上 ping 通 LAN 侧的主机，那就说明组网成功了。接下来可以让 <code>wg0</code> 接口在开机后自动启动：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> wg-quick@wg0</span><br></pre></td></tr></tbody></table></figure><h2 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h2><p>文章发布之后没两天，我的软路由突然内核崩溃重启，导致我的公网 IPv4 地址变了，而 Wireguard 在建立连接后，并不会检查对端的地址是否有变化，一旦变化，就会导致 Wireguard 隧道不通。于是我写了一段小脚本放在 crontab 里，每分钟 ping 一次对端的 Wireguard 接口地址，如果不通，就重启 Wireguard 服务。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ping对端Wireguard地址，仅ping一次，超时1秒</span></span><br><span class="line">ping 10.10.0.1 -qc 1 -w 1 &gt; /dev/null</span><br><span class="line"><span class="comment"># 如果ping不成功，那么返回码是1</span></span><br><span class="line">RESULT=$?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只要返回码不是0，就重启Wireguard连接</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RESULT</span> -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  systemctl restart wg-quick@wg0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/RouterOS/">RouterOS</category>
      
      <category domain="https://www.boris1993.com/tags/Wireguard/">Wireguard</category>
      
      
      <comments>https://www.boris1993.com/routeros-setup-wireguard.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SwiftUI 学习记录 - 使用 Alamofire 加载 JSON 并初始化列表</title>
      <link>https://www.boris1993.com/swiftui-initialize-list-with-remote-data.html</link>
      <guid>https://www.boris1993.com/swiftui-initialize-list-with-remote-data.html</guid>
      <pubDate>Sat, 28 Oct 2023 13:23:36 GMT</pubDate>
      
      <description>&lt;p&gt;这两天又捡起来了之前开的一个老坑，继续完成&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cubm1ieGQxLmNvbS9Gb3J1bQ==&quot;&gt; X 岛揭示板&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;的 iOS 客户端，而且刚刚完成了从 JSON 初始化版面列表的功能。&lt;br&gt;这部分感觉最难的还是上手 &lt;code&gt;Alamofire&lt;/code&gt;，因为它返回结果不像我平时做 Web 开发那样通过方法返回（也有可能是我没学到位），而是要把反序列化得到的对象传给一个回调方法。而这个思路的差异也导致我刚开始学的时候非常的痛苦，因为怎么也找不到我想要的那种返回方式。&lt;br&gt;我相信应该不止我一个人会遇到这种情况，所以打算在这里把完整的实现过程记录在这里，并希望后面有类似情况的同志能因为这篇文章而少掉几根头发。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>这两天又捡起来了之前开的一个老坑，继续完成<span class="exturl" data-url="aHR0cHM6Ly93d3cubm1ieGQxLmNvbS9Gb3J1bQ=="> X 岛揭示板<i class="fa fa-external-link-alt"></i></span>的 iOS 客户端，而且刚刚完成了从 JSON 初始化版面列表的功能。<br>这部分感觉最难的还是上手 <code>Alamofire</code>，因为它返回结果不像我平时做 Web 开发那样通过方法返回（也有可能是我没学到位），而是要把反序列化得到的对象传给一个回调方法。而这个思路的差异也导致我刚开始学的时候非常的痛苦，因为怎么也找不到我想要的那种返回方式。<br>我相信应该不止我一个人会遇到这种情况，所以打算在这里把完整的实现过程记录在这里，并希望后面有类似情况的同志能因为这篇文章而少掉几根头发。</p><span id="more"></span><h2 id="定义JSON对应的结构体"><a href="#定义JSON对应的结构体" class="headerlink" title="定义JSON对应的结构体"></a>定义 JSON 对应的结构体</h2><p>X 岛揭示板的<code>版面列表</code> API 会返回一个类似这样的 JSON：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"4"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"sort"</span><span class="punctuation">:</span> <span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"综合"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"status"</span><span class="punctuation">:</span> <span class="string">"n"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"forums"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"-1"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"时间线"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"msg"</span><span class="punctuation">:</span> <span class="string">"这里是匿名版最新的串"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"id"</span><span class="punctuation">:</span> <span class="string">"23"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"fgroup"</span><span class="punctuation">:</span> <span class="string">"3"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"sort"</span><span class="punctuation">:</span> <span class="string">"12"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"暴雪游戏"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"showName"</span><span class="punctuation">:</span> <span class="string">"暴雪游戏"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"msg"</span><span class="punctuation">:</span> <span class="string">"•本版发文间隔为15秒。"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"interval"</span><span class="punctuation">:</span> <span class="string">"15"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"safe_mode"</span><span class="punctuation">:</span> <span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"auto_delete"</span><span class="punctuation">:</span> <span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"thread_count"</span><span class="punctuation">:</span> <span class="string">"72"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"permission_level"</span><span class="punctuation">:</span> <span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"forum_fuse_id"</span><span class="punctuation">:</span> <span class="string">"0"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"createdAt"</span><span class="punctuation">:</span> <span class="string">"2012-05-25 21:21:21"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"updateAt"</span><span class="punctuation">:</span> <span class="string">"2015-04-21 12:30:39"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"status"</span><span class="punctuation">:</span> <span class="string">"n"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></tbody></table></figure><p>所以，我们可以创建一个这样的结构体来用来反序列化它：</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ForumGroup</span>: <span class="title class_">Codable</span>, <span class="title class_">Identifiable</span> {</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> sort: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> status: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> forums: [<span class="type">Forum</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">CodingKeys</span>: <span class="title class_">String</span>, <span class="title class_">CodingKey</span> {</span><br><span class="line">        <span class="keyword">case</span> id</span><br><span class="line">        <span class="keyword">case</span> sort</span><br><span class="line">        <span class="keyword">case</span> name</span><br><span class="line">        <span class="keyword">case</span> status</span><br><span class="line">        <span class="keyword">case</span> forums</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Forum</span>: <span class="title class_">Codable</span>, <span class="title class_">Identifiable</span> {</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span> <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> fGroup: <span class="type">String</span>? <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> sort: <span class="type">String</span>? <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> showName: <span class="type">String</span>? <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> msg: <span class="type">String</span> <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> interval: <span class="type">String</span>? <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> threadCount: <span class="type">String</span>? <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> permissionLevel: <span class="type">String</span>? <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> forumFuseId: <span class="type">String</span>? <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> createdAt: <span class="type">String</span>? <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> updateAt: <span class="type">String</span>? <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> status: <span class="type">String</span>? <span class="operator">=</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">CodingKeys</span>: <span class="title class_">String</span>, <span class="title class_">CodingKey</span> {</span><br><span class="line">        <span class="keyword">case</span> id</span><br><span class="line">        <span class="keyword">case</span> fGroup</span><br><span class="line">        <span class="keyword">case</span> sort</span><br><span class="line">        <span class="keyword">case</span> name</span><br><span class="line">        <span class="keyword">case</span> showName</span><br><span class="line">        <span class="keyword">case</span> msg</span><br><span class="line">        <span class="keyword">case</span> interval</span><br><span class="line">        <span class="comment">// 因为X岛揭示板的API存在CamelCase和snake_case混用的情况</span></span><br><span class="line">        <span class="comment">// 所以需要CodingKeys来配置正确的映射</span></span><br><span class="line">        <span class="keyword">case</span> threadCount <span class="operator">=</span> <span class="string">"thread_count"</span></span><br><span class="line">        <span class="keyword">case</span> permissionLevel <span class="operator">=</span> <span class="string">"permission_level"</span></span><br><span class="line">        <span class="keyword">case</span> forumFuseId <span class="operator">=</span> <span class="string">"forum_fuse_id"</span></span><br><span class="line">        <span class="keyword">case</span> createdAt</span><br><span class="line">        <span class="keyword">case</span> updateAt</span><br><span class="line">        <span class="keyword">case</span> status</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="编写网络请求"><a href="#编写网络请求" class="headerlink" title="编写网络请求"></a>编写网络请求</h2><p>创建一个新的 Swift 文件 <code>AnoBbsApiClient</code>，编写如下代码：</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">AnoBbsApiClient</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">let</span> logger <span class="operator">=</span> <span class="type">LoggerHelper</span>.getLoggerForNetworkRequest(name: <span class="string">"AnoBbsApiClient"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">loadForumGroups</span>(</span><br><span class="line">        <span class="params">completion</span>:<span class="keyword">@escaping</span> ([<span class="type">ForumGroup</span>]) -&gt; <span class="type">Void</span>,</span><br><span class="line">        <span class="params">failure</span>:<span class="keyword">@escaping</span> (<span class="type">String</span>) -&gt; <span class="type">Void</span></span><br><span class="line">    ) {</span><br><span class="line">        <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="type">XdnmbAPI</span>.<span class="type">GET_FORUM_LIST</span>)<span class="operator">!</span></span><br><span class="line">        <span class="type">AF</span>.request(url, method: .get, interceptor: .retryPolicy) { <span class="variable">$0</span>.timeoutInterval <span class="operator">=</span> <span class="number">10</span> }</span><br><span class="line">            .cacheResponse(using: .cache)</span><br><span class="line">            .validate()</span><br><span class="line">            .responseDecodable(of: [<span class="type">ForumGroup</span>].<span class="keyword">self</span>) { response <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">switch</span> response.result {</span><br><span class="line">                <span class="keyword">case</span> .success(<span class="keyword">let</span> data):</span><br><span class="line">                    completion(data)</span><br><span class="line">                <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">                    failure(error.localizedDescription)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>是的，就这几行代码，花了我大概一整天时间来学明白，定稿之前不知道来来回回试了多少遍。前面都很好懂，重点就是 <code>responseDecodable</code> 这个方法调用，<code>of</code> 参数指明我希望把返回的 JSON 反序列化成一个 <code>ForumGroup</code> 列表，后面的方法块中根据成功反序列化和发生任何错误的情况，分别调用 <code>completion</code> 和 <code>failure</code> 这两个回调方法。</p><h2 id="渲染列表"><a href="#渲染列表" class="headerlink" title="渲染列表"></a>渲染列表</h2><p>现在回到展示版面的 <code>ForumsView</code>，在 <code>body</code> 里面做如下实现：</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {</span><br><span class="line">    <span class="type">NavigationStack</span> {</span><br><span class="line">        <span class="type">List</span> {</span><br><span class="line">            <span class="type">ForEach</span>(<span class="variable">$forumGroups</span>) { <span class="variable">$forumGroup</span> <span class="keyword">in</span></span><br><span class="line">                <span class="type">Section</span> {</span><br><span class="line">                    <span class="type">ForEach</span>(forumGroup.forums) { forum <span class="keyword">in</span></span><br><span class="line">                        <span class="type">NavigationLink</span>(destination: <span class="type">CookieListView</span>(globalState: globalState)) {</span><br><span class="line">                            <span class="keyword">if</span> (forum.showName <span class="operator">==</span> <span class="literal">nil</span> <span class="operator">||</span> forum.showName<span class="operator">!</span>.isEmpty) {</span><br><span class="line">                                <span class="type">Text</span>(forum.name)</span><br><span class="line">                            } <span class="keyword">else</span> {</span><br><span class="line">                                <span class="type">Text</span>(forum.showName<span class="operator">!</span>)</span><br><span class="line">                            }</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                } header: {</span><br><span class="line">                    <span class="type">Text</span>(forumGroup.name)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    .onAppear {</span><br><span class="line">        <span class="keyword">if</span> (<span class="operator">!</span>isContentLoaded) {</span><br><span class="line">            globalState.loadingStatus <span class="operator">=</span> <span class="type">String</span>(localized: <span class="string">"msgLoadingForumList"</span>);</span><br><span class="line">            shouldDisplayProgressView <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">AnoBbsApiClient</span>.loadForumGroups { forumGroups <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>.forumGroups <span class="operator">=</span> forumGroups</span><br><span class="line">                isContentLoaded <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                shouldDisplayProgressView <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            } failure: { error <span class="keyword">in</span></span><br><span class="line">                showErrorToast(message: error)</span><br><span class="line">                shouldDisplayProgressView <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    .toast(isPresenting: <span class="variable">$isErrorToastShowing</span>) {</span><br><span class="line">        <span class="type">AlertToast</span>(type: .regular, title: errorMessage)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个 View 展示时，如果版面列表没有被加载，那么就调用刚刚写的 <code>loadForumGroups</code> 方法获取版面列表，后面的第一个代码块就是 <code>completion</code> 这个回调的实现，负责把 <code>loadForumGroups</code> 方法得到的结果传给一个 <code>@State</code> 变量 <code>forumGroups</code>，以及标记内容已经成功载入，并隐藏载入提示的风火轮；第二个代码块是 <code>failure</code> 这个回调的实现，负责显示一个带有错误信息的 <code>Toast</code> 并隐藏风火轮。</p><p>在这个 <code>View</code> 的 <code>NavigationStack</code> 里面，就可以监听 <code>forumGroups</code> 这个 <code>@State</code> 变量，并用变量里面的内容来渲染整个列表了。最后，我们就可以得到这样一个结果：</p><p><img data-src="https://blog-static.boris1993.com/swiftui-initialize-list-with-remote-data/forum-list-view.jpeg"></p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/SwiftUI/">SwiftUI</category>
      
      <category domain="https://www.boris1993.com/tags/List/">List</category>
      
      <category domain="https://www.boris1993.com/tags/Alamofire/">Alamofire</category>
      
      <category domain="https://www.boris1993.com/tags/iOS%E5%BC%80%E5%8F%91/">iOS开发</category>
      
      
      <comments>https://www.boris1993.com/swiftui-initialize-list-with-remote-data.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>为 UWP 的 TextBlock 实现鼠标悬浮时显示和隐藏内容</title>
      <link>https://www.boris1993.com/uwp-textblock-show-and-hide-content-on-hover.html</link>
      <guid>https://www.boris1993.com/uwp-textblock-show-and-hide-content-on-hover.html</guid>
      <pubDate>Sat, 21 Oct 2023 05:51:20 GMT</pubDate>
      
      <description>&lt;p&gt;这两天给我的&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9Yb1c=&quot;&gt;窗边岛&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;项目实现了&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cubm1ieGQxLmNvbS8=&quot;&gt; X 岛揭示板&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;网页中的&lt;code&gt;防剧透&lt;/code&gt;功能。这个功能本质上就是，当鼠标悬浮在文字上时显示原本的内容，当鼠标移出文字时则用黑块代替。即&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;X 岛揭示板&lt;/th&gt;
&lt;th&gt;窗边岛&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;img data-src=&quot;https://blog-static.boris1993.com/uwp-textblock-show-and-hide-content-on-hover/nmbxd-anti-spoiler.gif&quot;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img data-src=&quot;https://blog-static.boris1993.com/uwp-textblock-show-and-hide-content-on-hover/xow-anti-spoiler.gif&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;虽然说起来很简单，但是好像网上并没有针对这个需求有什么相关的内容，所以在这里记录下我的实现，权当抛砖引玉。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>这两天给我的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9Yb1c=">窗边岛<i class="fa fa-external-link-alt"></i></span>项目实现了<span class="exturl" data-url="aHR0cHM6Ly93d3cubm1ieGQxLmNvbS8="> X 岛揭示板<i class="fa fa-external-link-alt"></i></span>网页中的<code>防剧透</code>功能。这个功能本质上就是，当鼠标悬浮在文字上时显示原本的内容，当鼠标移出文字时则用黑块代替。即</p><table><thead><tr><th>X 岛揭示板</th><th>窗边岛</th></tr></thead><tbody><tr><td><img data-src="https://blog-static.boris1993.com/uwp-textblock-show-and-hide-content-on-hover/nmbxd-anti-spoiler.gif"></td><td><img data-src="https://blog-static.boris1993.com/uwp-textblock-show-and-hide-content-on-hover/xow-anti-spoiler.gif"></td></tr></tbody></table><p>虽然说起来很简单，但是好像网上并没有针对这个需求有什么相关的内容，所以在这里记录下我的实现，权当抛砖引玉。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 <code>X岛揭示板</code>中，防剧透是通过 <code>[h][/h]</code> 这个自定义标签实现的，所以上面 GIF 图中的文字其实是<code>正常文字--[h]防剧透文字[/h]--正常文字--[h]防剧透文字[/h]--</code>。那么这里要做的就有两件事：解析这个自定义标签，以及在 <code>TextBlock</code> 控件中实现黑块和正常文字的互相替换。</p><h2 id="为TextBlock对象填充内容"><a href="#为TextBlock对象填充内容" class="headerlink" title="为TextBlock对象填充内容"></a>为 TextBlock 对象填充内容</h2><p><code>TextBlock</code> 对象有两种填充内容的方式：</p><ul><li><p>直接将内容放入 <code>TextBlock.Text</code> 属性中。这种方式适合不包含防剧透标签的内容。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> TextBlock</span><br><span class="line">{</span><br><span class="line">    VerticalAlignment = VerticalAlignment.Top,</span><br><span class="line">    HorizontalAlignment = HorizontalAlignment.Stretch,</span><br><span class="line">    Text = content,</span><br><span class="line">    TextWrapping = TextWrapping.Wrap,</span><br><span class="line">    IsTextSelectionEnabled = textSelectionEnabled,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></li><li><p>将内容分散到各个 <code>Run</code> 对象中，并将这些 <code>Run</code> 对象放在 <code>TextBlock.Inlines</code> 属性中。我就是搭配这种方式实现的防剧透功能。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> run1 = <span class="keyword">new</span> Run { Text = <span class="string">"Run 1"</span> };</span><br><span class="line"><span class="keyword">var</span> run2 = <span class="keyword">new</span> Run { Text = <span class="string">"Run 2"</span> };</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textBlock = <span class="keyword">new</span> TextBlock</span><br><span class="line">{</span><br><span class="line">    VerticalAlignment = VerticalAlignment.Top,</span><br><span class="line">    HorizontalAlignment = HorizontalAlignment.Stretch,</span><br><span class="line">    TextWrapping = TextWrapping.Wrap,</span><br><span class="line">    IsTextSelectionEnabled = textSelectionEnabled,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">textBlock.Inlines.Add(run1);</span><br><span class="line">textBlock.Inlines.Add(run2);</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="保存黑块下的原本内容"><a href="#保存黑块下的原本内容" class="headerlink" title="保存黑块下的原本内容"></a>保存黑块下的原本内容</h2><p>因为防剧透本质就是，平时用黑块替换掉要遮挡的内容，仅在鼠标悬浮时再用真正的内容替换掉黑块，所以我们需要一个地方来保存原本的内容。本来我想直接在 <code>Run</code> 对象上下功夫，但是可惜 <code>Run</code> 不像 <code>TextBlock</code> 有一个 <code>DataContext</code> 属性可以放东西，所以最后我还是把目光放在了 <code>TextBlock</code> 上。</p><p><code>TextBlock.DataContext</code> 是一个 <code>object</code> 类型的属性，所以我们可以随意放任何我们想放的东西。</p><p>当然为了扩展性考虑，我们最好还是给它创建一个类。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">TextBlockDataContext</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// key用来放应该被防剧透的Run在Inline里的下标</span></span><br><span class="line">    <span class="comment">// value是这个Run实际的内容</span></span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; IndexAndOriginalTextOfHiddenContent = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后我在给一个段落创建 <code>TextBlock</code> 时，就可以把这个 <code>TextBlockDataContext</code> 对象放在 <code>DataContext</code> 属性中备用。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">textBlock = <span class="keyword">new</span> TextBlock</span><br><span class="line">{</span><br><span class="line">    VerticalAlignment = VerticalAlignment.Top,</span><br><span class="line">    HorizontalAlignment = HorizontalAlignment.Stretch,</span><br><span class="line">    TextWrapping = TextWrapping.Wrap,</span><br><span class="line">    IsTextSelectionEnabled = textSelectionEnabled,</span><br><span class="line">    DataContext = <span class="keyword">new</span> TextBlockDataContext { },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="解析标签并生成Run对象"><a href="#解析标签并生成Run对象" class="headerlink" title="解析标签并生成Run对象"></a>解析标签并生成 <code>Run</code> 对象</h2><p>这部分的思路就是，整行文字会被 <code>[h]</code> 和 <code>[/h]</code> 标签切割成各自的 <code>Run</code>，因为 <code>TextBlock.Inlines</code> 是一个有序的列表，所以在切割和生成 <code>Run</code> 对象时，我可以在 <code>TextBlockDataContext.IndexAndOriginalTextOfHiddenContent</code> 中记录下要防剧透的 <code>Run</code> 的下标和它实际的内容。同时，针对要防剧透的 <code>Run</code>，我先用黑块字符<code>█</code>填充它的 <code>Text</code> 属性。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> indexOfRun = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> totalLength = content.Length;</span><br><span class="line"><span class="keyword">var</span> enteredHiddenBlock = <span class="literal">false</span>;</span><br><span class="line">Run run;</span><br><span class="line"><span class="keyword">while</span> (content.Length &gt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">var</span> indexOfBeginHideMark = content.IndexOf(<span class="string">"[h]"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!enteredHiddenBlock &amp;&amp; indexOfBeginHideMark &gt;= <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        run = <span class="keyword">new</span> Run</span><br><span class="line">        {</span><br><span class="line">            Text = content.Substring(<span class="number">0</span>, indexOfBeginHideMark),</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        textBlock.Inlines.Add(run);</span><br><span class="line">        content = content.Substring(indexOfBeginHideMark + <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        enteredHiddenBlock = <span class="literal">true</span>;</span><br><span class="line">        indexOfRun++;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indexOfEndHideMark = content.IndexOf(<span class="string">"[/h]"</span>);</span><br><span class="line">    <span class="keyword">if</span> (indexOfEndHideMark &gt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">var</span> text = content.Substring(<span class="number">0</span>, indexOfEndHideMark);</span><br><span class="line">        run = <span class="keyword">new</span> Run</span><br><span class="line">        {</span><br><span class="line">            Text = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">'█'</span>, text.Length),</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        textBlock.Inlines.Add(run);</span><br><span class="line">        content = content.Substring(indexOfEndHideMark + <span class="number">4</span>);</span><br><span class="line">        (textBlock.DataContext <span class="keyword">as</span> TextBlockDataContext).IndexAndOriginalTextOfHiddenContent.Add(indexOfRun, text);</span><br><span class="line"></span><br><span class="line">        enteredHiddenBlock = <span class="literal">false</span>;</span><br><span class="line">        indexOfRun++;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    run = <span class="keyword">new</span> Run</span><br><span class="line">    {</span><br><span class="line">        Text = content,</span><br><span class="line">    };</span><br><span class="line">    textBlock.Inlines.Add(run);</span><br><span class="line">    indexOfRun++;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="实现鼠标悬浮时显示真实内容"><a href="#实现鼠标悬浮时显示真实内容" class="headerlink" title="实现鼠标悬浮时显示真实内容"></a>实现鼠标悬浮时显示真实内容</h2><p><code>TextBlock</code> 提供了两个事件 <code>PointerEntered</code> 和 <code>PointerExited</code>，分别对应鼠标指针进入和离开 <code>TextBlock</code> 范围。所以我们就可以给这两个事件分别绑定 <code>UnhidingContent</code> 方法和 <code>HidingContent</code> 方法来实现鼠标悬浮时显示真正内容。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HidingContent</span>(<span class="params"><span class="built_in">object</span> sender, PointerRoutedEventArgs pointerRoutedEventArgs</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">var</span> textBlock = sender <span class="keyword">as</span> TextBlock;</span><br><span class="line">    <span class="keyword">if</span> (textBlock.DataContext <span class="keyword">is</span> TextBlockDataContext dataContext)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> indexAndOriginalText <span class="keyword">in</span> dataContext.IndexAndOriginalTextOfHiddenContent)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">var</span> textLength = indexAndOriginalText.Value.Length;</span><br><span class="line">            (textBlock.Inlines.ElementAt(indexAndOriginalText.Key) <span class="keyword">as</span> Run).Text = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">'█'</span>, textLength);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UnhidingContent</span>(<span class="params"><span class="built_in">object</span> sender, PointerRoutedEventArgs pointerRoutedEventArgs</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">var</span> textBlock = sender <span class="keyword">as</span> TextBlock;</span><br><span class="line">    <span class="keyword">if</span> (textBlock.DataContext <span class="keyword">is</span> TextBlockDataContext dataContext)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> indexAndOriginalText <span class="keyword">in</span> dataContext.IndexAndOriginalTextOfHiddenContent)</span><br><span class="line">        {</span><br><span class="line">            (textBlock.Inlines.ElementAt(indexAndOriginalText.Key) <span class="keyword">as</span> Run).Text = indexAndOriginalText.Value;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>至此，与<span class="exturl" data-url="aHR0cHM6Ly93d3cubm1ieGQxLmNvbS8="> X 岛揭示板<i class="fa fa-external-link-alt"></i></span>网页端类似的防剧透功能就完成实现了。完整的代码可以参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9Yb1cvY29tbWl0Lzg3MzE5NGJjNDZlYWUwNGFlMjNkMjVkZTg0MmM0NTc0YzU0YWRhYWQ=">对应的 GitHub commit<i class="fa fa-external-link-alt"></i></span>。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/UWP/">UWP</category>
      
      <category domain="https://www.boris1993.com/tags/TextBlock/">TextBlock</category>
      
      
      <comments>https://www.boris1993.com/uwp-textblock-show-and-hide-content-on-hover.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>记我将博客的图片存储迁移到 Backblaze</title>
      <link>https://www.boris1993.com/migrating-blog-images-to-backblaze.html</link>
      <guid>https://www.boris1993.com/migrating-blog-images-to-backblaze.html</guid>
      <pubDate>Mon, 15 May 2023 13:40:15 GMT</pubDate>
      
      <description>&lt;p&gt;之前我一直把博客的图片放在个人的 OneDrive 上，然后用嵌入功能得到外链放在博客里。但是考虑到国内访问 OneDrive 的延迟还是偏高，以及不折腾不舒服的心理作祟，于是乎在三月份的时候，我把博客的图片从 OneDrive 迁到了 Backblaze 对象存储。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>之前我一直把博客的图片放在个人的 OneDrive 上，然后用嵌入功能得到外链放在博客里。但是考虑到国内访问 OneDrive 的延迟还是偏高，以及不折腾不舒服的心理作祟，于是乎在三月份的时候，我把博客的图片从 OneDrive 迁到了 Backblaze 对象存储。</p><span id="more"></span><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>开始之前，我们需要准备好这些东西：</p><ul><li>一个 Backblaze 免费账号</li><li>一个 CloudFlare 免费账号</li><li>一个域名</li><li>还有你的好心情 :-)</li></ul><p>可能你会担心用对象存储是不是会产生高额的账单，或者会因为超出配额导致图片全部无法加载。说实话我之前不敢用对象存储就是因为有这方面的顾虑，但是在 Backblaze 这里我们完全不用担心。首先，我们用的是免费的账户，而且 Backblaze 甚至不要求你添加信用卡。此外，Backblaze 和 CloudFlare 都是带宽联盟的成员，意味着 Backblaze 与 CloudFlare 之间的流量全部是免费的。</p><h2 id="在Backblaze创建存储桶并上传图片"><a href="#在Backblaze创建存储桶并上传图片" class="headerlink" title="在Backblaze创建存储桶并上传图片"></a>在 Backblaze 创建存储桶并上传图片</h2><p>登录进 Backblaze 的 B2 Cloud Storage 之后，点 <code>Create a Bucket</code> 创建一个存储桶就行了。为了防止被人恶意刷流量，我建议创建一个私有的存储桶。加密和对象锁都不需要。</p><p>创建成功后，打开这个存储桶的 <code>Bucket Settings</code>，在 <code>Bucket Info</code> 中添加 <code>{"cache-control":"max-age=43200"}</code> 来配置桶的缓存时间。虽然流量不要钱，但是能环保还是环保一点比较好不是？</p><p>因为我们创建的是私有存储桶，所以需要创建一个 Application Key 来允许第三方服务访问这个桶。虽然 Backblaze 默认提供了一个 Master Application Key，但是这就像天天用 root 登录 Linux 主机一样，只有中午才能用，因为早晚会出事。在 Application Keys 页面，点 <code>Add a New Application Key</code>，<code>Allow access to Bucket(s)</code> 里面建议选我们这个桶而不是 All，权限当然是 Read and Write。创建成功之后，注意保存好 <code>keyID</code> 和 <code>applicationKey</code>，因为 <code>applicationKey</code> 只会显示一次。</p><p>然后需要下载一个支持浏览对象存储的工具，比如我用的<span class="exturl" data-url="aHR0cHM6Ly9zM2Jyb3dzZXIuY29tLz92PTEwLjkuOSZmYW09eDY0"> S3 Browser<i class="fa fa-external-link-alt"></i></span>。然后在 S3 Browser 中新建一个连接，<code>REST Endpoint</code> 填写存储桶的 <code>Endpoint</code>，<code>Access Key ID</code> 就是刚才记下来的 <code>keyID</code>，<code>Secret Access Key</code> 就是 <code>applicationKey</code>。</p><p><img data-src="https://blog-static.boris1993.com/migrating-blog-images-to-backblaze/s3-browser-add-account.png"></p><p>如果 S3 Browser 可以成功连接到刚才创建的存储桶，那就说明配置正确了。这时候就可以想好目录结构，以及上传图片了。比如我选择把图片按照对应的博文来分类，每个有图的博文都有一个对应的图片目录。</p><p><img data-src="https://blog-static.boris1993.com/migrating-blog-images-to-backblaze/s3-browser-list-files.png"></p><h2 id="在CloudFlare中配置域名"><a href="#在CloudFlare中配置域名" class="headerlink" title="在CloudFlare中配置域名"></a>在 CloudFlare 中配置域名</h2><p>在到 CloudFlare 配置域名之前，我们先要知道指向一个文件的完整 URL。进入 Browse Files 页面，然后进入这个存储桶，接着随便挑一个文件，点它最右边的详情图标，这里的 <code>Friendly URL</code> 就是我们要找的东西。记下 URL 里面的域名，我们接下来要用到。</p><p><img data-src="https://blog-static.boris1993.com/migrating-blog-images-to-backblaze/backblaze-file-details.png"></p><p>接下来就可以到 CloudFlare 里面创建一条 CNAME 记录，并把刚才记下来的域名填到目标里面，并且启用 CloudFlare 的代理，这样我们才能享受到带宽联盟的优惠。此外，我们还会针对这个域名配置一些规则，这也需要打开 CloudFlare 的代理开关。</p><p>要注意这里只能是二级域名，如 <code>blog-static.boris1993.com</code>，而不能是多级的（<code>blog.static.boris1993.com</code>），否则 CloudFlare 会无法申请证书，也就无法正常启用 HTTPS。</p><p><img data-src="https://blog-static.boris1993.com/migrating-blog-images-to-backblaze/cloudflare-cname-record.png"></p><p>这时候我们就可以用 <code>https://sub-domain.your-domain.com/file/folder-name/image-name.png</code> 访问这个图片了，但是目前我们只能得到一个 401 页面，因为我们必须要带上一个 Access Token 才能访问私有存储桶的文件。</p><h2 id="为请求配置CloudFlare规则"><a href="#为请求配置CloudFlare规则" class="headerlink" title="为请求配置CloudFlare规则"></a>为请求配置 CloudFlare 规则</h2><p>前往 CloudFlare 的规则页面，选择<code>转换规则(Transform Rule)</code>，然后在<code>重写URL</code> 这个 tab 中新增一个规则。</p><p>首先，我希望我可以直接用 <code>https://blog-static.boris1993.com/folder-name/file-name.png</code> 就能访问到图片（因为这样看起来更好看），所以我配置了一个路径重写，如果路径中不包含 <code>/file/bucket-name</code>，那么就在路径中补上这一段。</p><p>选择<code>路径</code>的<code>重写到</code>，表达式类型选择<code>动态</code>，表达式填写 <code>concat("/file/blog-pics", http.request.uri.path)</code>。这样 CloudFlare 就会自动补全完整的路径。</p><p>然后就是访问私有存储桶的 Access Token。Backblaze 支持把 Access Token 放在 <code>Authorization</code> 这个 query parameter 中，所以我们可以选择<code>查询</code>的<code>重写到</code>，表达式类型选择<code>静态(Static)</code>，值目前可以随便写，因为你就算现在拿到一个 token，在 24 小时后也是会过期的，所以后面我会讲怎么用 CloudFlare Workers 来更新这个字段。</p><p><img data-src="https://blog-static.boris1993.com/migrating-blog-images-to-backblaze/cloudflare-transform-rule.png"></p><p>接下来，根据 Backblaze 官方的建议，我们需要对响应头做一些修改。</p><p>切换到<code>修改响应头</code>，新增这样一条规则：</p><p><img data-src="https://blog-static.boris1993.com/migrating-blog-images-to-backblaze/cloudflare-update-headers.png"></p><p>首先要正确配置 <code>Access-Control-Allow-Origin</code>，来避免跨域问题，我偷懒了直接配了个 <code>*</code>，不知道这么配会不会有盗链的问题，暂时先这样吧。</p><p>其次 Backblaze 建议修改 <code>cache-control</code> 这个 header，来延长缓存的有效时间。</p><p>最后，需要从响应头中删掉一些 Backblaze 的 header 来增强安全性。</p><p>为了方便，我把要删掉的 header 放在这里：</p><ul><li>x-bz-content-sha1</li><li>x-bz-file-id</li><li>x-bz-file-name</li><li>x-bz-info-s3b-last-modified</li><li>x-bz-info-sha256</li><li>x-bz-info-src_last_modified_millis</li><li>x-bz-upload-timestamp</li></ul><p>同时我为了能让浏览器缓存这个图片，我还让它添加了 <code>ETag</code> 这个 header，但是我在浏览器里一直看不到这个 header，如果有大佬知道为什么，还请不吝赐教。</p><h2 id="自动更新访问存储桶的Token"><a href="#自动更新访问存储桶的Token" class="headerlink" title="自动更新访问存储桶的Token"></a>自动更新访问存储桶的 Token</h2><p>因为后面要修改规则的内容，所以先得拿到规则集和规则的 ID。规则 ID 好办，打开<code>重写URL</code> 规则的编辑页面，我们就能在 URL 的最后一段得到这个规则的 ID。但是规则集 ID 只能调 CloudFlare API 取得。</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET https://api.cloudflare.com/client/v4/zones/YOUR_ZONE_ID/rulesets</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer YOUR_CLOUDFLARE_API_TOKEN</span><br></pre></td></tr></tbody></table></figure><p>把 <code>YOUR_ZONE_ID</code> 替换为你的域名的区域 ID，以及把 <code>YOUR_CLOUDFLARE_API_TOKEN</code> 换成你的 API 令牌。我当时因为不知道这个 API 需要哪些权限，始终创建不出带有正确权限的 API 令牌，所以干脆用了 <code>Global API Key</code>。</p><p>这个请求会返回一系列规则集，有 CloudFlare 内部的，也有我们自己的。理论上，名字是 <code>default</code> 并且 <code>phase</code> 是 <code>http_request_transform</code> 的那个就是我们要的。但是为了确认，可以再执行这个请求：</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET https://api.cloudflare.com/client/v4/zones/YOUR_ZONE_ID/rulesets/RULE_SET_ID</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Bearer YOUR_CLOUDFLARE_API_TOKEN</span><br></pre></td></tr></tbody></table></figure><p>跟上条请求一样，替换掉 <code>YOUR_ZONE_ID</code> 和 <code>YOUR_CLOUDFLARE_API_TOKEN</code>，以及将 <code>RULE_SET_ID</code> 替换为上面找到的规则集的 <code>id</code>。执行后会返回这个规则集下的规则。如果返回内容中有我们之前创建的那条<code>重写URL</code> 的规则，那么这就是我们要找的规则集。</p><p>然后为了安全起见，我们要为这个 CloudFlare Worker 创建一个 API 令牌。进入<code>我的个人资料</code> –&gt; <code>API令牌</code>，然后点击<code>创建令牌</code>，在接下来的页面中中选择<code>创建自定义令牌</code>，然后如图创建一个令牌。</p><p><img data-src="https://blog-static.boris1993.com/migrating-blog-images-to-backblaze/cloudflare-token-for-worker.png"></p><p>添加成功后，妥善保存这个令牌。</p><p>接下来前往 CloudFlare Workers，创建一个新的 Worker。然后到<code>设置</code> –&gt; <code>变量</code>，添加如下环境变量：</p><table><thead><tr><th>变量名</th><th>值</th></tr></thead><tbody><tr><td> B2KeyID</td><td>Backblaze 的 <code>keyID</code></td></tr><tr><td>B2AppKey</td><td>Backblaze 的 <code>applicationKey</code></td></tr><tr><td>B2BucketName</td><td>Backblaze 的存储桶名</td></tr><tr><td> CfAuthKey</td><td> 上面创建的 CloudFlare API 令牌</td></tr><tr><td> CfHostname</td><td> 上面在 CloudFlare 创建的二级域名</td></tr><tr><td> CfZoneID</td><td> 你的域名的区域 ID</td></tr><tr><td>CfRulesetID</td><td> 上面拿到的规则集 ID</td></tr><tr><td>CfRuleID</td><td> 上面拿到的规则 ID</td></tr></tbody></table><p>然后进入<code>触发器</code>，将<code>路由</code>中的那条记录禁用，因为我们不会用 HTTP 请求来触发这个 Worker。然后再 <code>Cron触发器</code>中添加一个 Cron 触发器。Backblaze 说一个 token 的有效期最大不超过 24 小时，我为了保险起见，选择每半小时就触发这个 Worker 来生成一个新的 token，即 <code>*/30 * * * *</code>。</p><p><img data-src="https://blog-static.boris1993.com/migrating-blog-images-to-backblaze/cloudflare-worker-trigger.png"></p><p>至此前置任务完成，点击右上角的<code>快速编辑</code>，然后将如下脚本粘贴进去，然后点击<code>保存并部署</code>。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">"fetch"</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> {</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">handleRequest</span>(event.<span class="property">request</span>));</span><br><span class="line">});</span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">"scheduled"</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> {</span><br><span class="line">  event.<span class="title function_">waitUntil</span>(<span class="title function_">updateRule</span>());</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getB2Token</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">    <span class="string">"https://api.backblazeb2.com/b2api/v2/b2_authorize_account"</span>,</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">headers</span>: {</span><br><span class="line">        <span class="title class_">Authorization</span>: <span class="string">"Basic "</span> + <span class="title function_">btoa</span>(B2KeyID + <span class="string">":"</span> + B2AppKey),</span><br><span class="line">      },</span><br><span class="line">    }</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">return</span> data.<span class="property">authorizationToken</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateRule</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> b2Token = <span class="keyword">await</span> <span class="title function_">getB2Token</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">    <span class="string">`https://api.cloudflare.com/client/v4/zones/<span class="subst">${CfZoneID}</span>/rulesets/<span class="subst">${CfRulesetID}</span>/rules/<span class="subst">${CfRuleID}</span>`</span>,</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">method</span>: <span class="string">"PATCH"</span>,</span><br><span class="line">      <span class="attr">headers</span>: {</span><br><span class="line">        <span class="string">"Authorization"</span>: <span class="string">`Bearer <span class="subst">${CfAuthKey}</span>`</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">body</span>: </span><br><span class="line">      <span class="string">`{</span></span><br><span class="line"><span class="string">        "description": "Replace path for static files for blog",</span></span><br><span class="line"><span class="string">        "action": "rewrite",</span></span><br><span class="line"><span class="string">        "expression": "(http.host eq \\\"<span class="subst">${CfHostname}</span>\\\" and not starts_with(http.request.uri.path, \\\"/file/<span class="subst">${B2BucketName}</span>\\\"))",</span></span><br><span class="line"><span class="string">        "action_parameters": {</span></span><br><span class="line"><span class="string">          "uri": {</span></span><br><span class="line"><span class="string">              "path": {</span></span><br><span class="line"><span class="string">                  "expression": "concat(\\\"/file/<span class="subst">${B2BucketName}</span>\\\", http.request.uri.path)"</span></span><br><span class="line"><span class="string">              },</span></span><br><span class="line"><span class="string">              "query": {</span></span><br><span class="line"><span class="string">                  "value": "Authorization=<span class="subst">${b2Token}</span>"</span></span><br><span class="line"><span class="string">              }</span></span><br><span class="line"><span class="string">          }</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">      }`</span>,</span><br><span class="line">    }</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">text</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleRequest</span>(<span class="params">request</span>) {</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">updateRule</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(data);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>等 Worker 被触发之后，就可以在浏览器中访问上面配置的域名，来测试到存储桶的连接是否正常。如果测试没问题，就可以把博客中的图片链接换到新地址了。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/">对象存储</category>
      
      <category domain="https://www.boris1993.com/tags/OSS/">OSS</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/">博客图片</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%8D%9A%E5%AE%A2/">博客</category>
      
      
      <comments>https://www.boris1993.com/migrating-blog-images-to-backblaze.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>在 RouterOS 中配置 MSS Clamping 解决部分网站图片无法加载的问题</title>
      <link>https://www.boris1993.com/routeros-mss-clamping.html</link>
      <guid>https://www.boris1993.com/routeros-mss-clamping.html</guid>
      <pubDate>Sun, 14 May 2023 04:37:15 GMT</pubDate>
      
      <description>&lt;p&gt;换成自己用 RouterOS 拨号之后，经常发现有的图片加载不出来，网上一顿冲浪之后发现可能是在 RouterOS 中没有正确配置 MTU 及 MSS，导致部分包被丢弃，也就是传说中的 PMTU 黑洞。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>换成自己用 RouterOS 拨号之后，经常发现有的图片加载不出来，网上一顿冲浪之后发现可能是在 RouterOS 中没有正确配置 MTU 及 MSS，导致部分包被丢弃，也就是传说中的 PMTU 黑洞。</p><span id="more"></span><h2 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h2><p>最常见的就是微信公众号的图片始终加载不出来，就像这样（自己当时没截图，借用知乎文章的图）：</p><p><img data-src="https://blog-static.boris1993.com/routeros-mss-clamping/symptom.jpg"></p><p>说来也很奇怪，我在 iOS 的微信上是能正常加载的，但是换到我妈的 Android 微信就会出现这样的情况，之前一直以为是我妈的手机出毛病了……</p><h2 id="PMTU黑洞"><a href="#PMTU黑洞" class="headerlink" title="PMTU黑洞"></a>PMTU 黑洞</h2><p>所谓 MTU，指的是一条链路上可以通过的三层数据包的最大尺寸（包含 IP 包头）。以太网默认的 MTU 是 1500 字节。但是从我的设备到目标服务器之间的路径上可能存在 MTU 小于 1500 的链路，那么这条路径上最小的 MTU，就是整条链路的 <code>Path MTU</code>（PMTU）。</p><p>路由器在转发包的时候，如果包的大小超过了 MTU，那么这个包会被分片（fragmentation）。而终端设备在发包时，也可以设置 DF 标志位（Don’t Fragment）来告诉路由器不要对这个包分片，此时如果这个包大小超过了 MTU，那么路由器就会丢掉这个包，并回复一条 <code>ICMP Fragmentation Needed</code> 消息。发送者收到这个消息后，下次就会发送小一点的包。这个过程叫做 PMTU 发现（PMTU Discovery）。</p><p>但是互联网中有大量的设备因为各种原因，会配置为不回应 <code>ICMP Fragmentation Needed</code> 消息，这使得大小超过 MTU 的包会被无声地丢掉，直到 TCP 协议发现超时丢包并进行重传。这种情况就是 <code>PMTU黑洞</code>。</p><p>此外，IPv6 包不支持分片，换句话说就是所有 IPv6 数据包全都带有 DF 标记。中间的路由器在遇到尺寸大于 MTU 的包的时候，应该回应 <code>ICMPv6 Packet Too Big</code> 消息，而同样的，由于各种原因，某些中间设备可能会直接丢掉这个包而不返回这条消息，直到 TCP 协议发现超时而进行重传。</p><h2 id="为什么用光猫或者硬路由拨号就没有这个问题"><a href="#为什么用光猫或者硬路由拨号就没有这个问题" class="headerlink" title="为什么用光猫或者硬路由拨号就没有这个问题"></a>为什么用光猫或者硬路由拨号就没有这个问题</h2><p>这是因为，多数家用路由器默认开启了一个叫 <code>MSS Clamping</code> 的功能。这是针对 PMTU 黑洞的一个 workaround，简单来说就是在 TCP 握手时，服务器会通过一个字段告知客户端它愿意接收的 TCP 包的最大尺寸，这样客户端就可以限制自己发送的包的大小，保证不会超出服务端要求的尺寸。</p><h2 id="在RouterOS中配置MSS-Clamping"><a href="#在RouterOS中配置MSS-Clamping" class="headerlink" title="在RouterOS中配置MSS Clamping"></a>在 RouterOS 中配置 MSS Clamping</h2><p>配置非常简单，分别对 IPv4 和 IPv6 的防火墙 Mangle 表添加如下配置即可。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将命令中 out-interface 参数的值替换成你的PPPoE接口的名字</span></span><br><span class="line">/ip/firewall<span class="built_in">/mangle</span></span><br><span class="line"><span class="built_in"></span><span class="built_in">add</span> <span class="attribute">action</span>=change-mss <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"IPv4 MSS clamp to PMTU"</span> \</span><br><span class="line">    <span class="attribute">new-mss</span>=clamp-to-pmtu <span class="attribute">out-interface</span>=<span class="string">"China Telecom"</span> <span class="attribute">passthrough</span>=<span class="literal">yes</span> \</span><br><span class="line">    <span class="attribute">protocol</span>=tcp <span class="attribute">tcp-flags</span>=syn</span><br><span class="line"></span><br><span class="line">/ipv6/firewall<span class="built_in">/mangle</span></span><br><span class="line"><span class="built_in"></span><span class="built_in">add</span> <span class="attribute">action</span>=change-mss <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"IPv6 MSS clamp to PMTU"</span> \</span><br><span class="line">    <span class="attribute">new-mss</span>=clamp-to-pmtu <span class="attribute">out-interface</span>=<span class="string">"China Telecom"</span> <span class="attribute">passthrough</span>=<span class="literal">yes</span> \</span><br><span class="line">    <span class="attribute">protocol</span>=tcp <span class="attribute">tcp-flags</span>=syn</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudjJleC5jb20vdC84MDAwMjQ=">开启 IPv6 后网速变得很慢？可能是 PMTU 黑洞的问题 - V2EX<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MzUzOTI4OTY=">ROS 修改 MTU 和 MSS 解决上网慢和页面显示不全问题<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vemgtY24vbGVhcm5pbmcvbmV0d29yay1sYXllci93aGF0LWlzLW1zcy8=">什么是最大分段大小 (MSS)？ - CloudFlare<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/RouterOS/">RouterOS</category>
      
      <category domain="https://www.boris1993.com/tags/%E4%BA%8C%E6%89%8BMicroServer-Gen8%E6%8A%98%E8%85%BE%E8%AE%B0/">二手MicroServer Gen8折腾记</category>
      
      <category domain="https://www.boris1993.com/tags/Gen8/">Gen8</category>
      
      <category domain="https://www.boris1993.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/">软路由</category>
      
      
      <comments>https://www.boris1993.com/routeros-mss-clamping.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>从 umami v1 迁移到 v2</title>
      <link>https://www.boris1993.com/migrating-to-umami-v2.html</link>
      <guid>https://www.boris1993.com/migrating-to-umami-v2.html</guid>
      <pubDate>Tue, 18 Apr 2023 17:23:31 GMT</pubDate>
      
      <description>&lt;p&gt;昨天收到 Vercel 发的报警邮件，说我自己部署的分析平台 &lt;code&gt;umami&lt;/code&gt; 部署失败。检查之后发现是 &lt;code&gt;umami&lt;/code&gt; 有个大版本升级，而升级脚本失败导致新版本部署失败了。那既然报错了，就修呗。&lt;/p&gt;
&lt;p&gt;虽然不是什么复杂的问题，但还是记录一下好了，也当是水一篇文。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>昨天收到 Vercel 发的报警邮件，说我自己部署的分析平台 <code>umami</code> 部署失败。检查之后发现是 <code>umami</code> 有个大版本升级，而升级脚本失败导致新版本部署失败了。那既然报错了，就修呗。</p><p>虽然不是什么复杂的问题，但还是记录一下好了，也当是水一篇文。</p><span id="more"></span><h2 id="问题的根源"><a href="#问题的根源" class="headerlink" title="问题的根源"></a>问题的根源</h2><p>一开始发现自动迁移不成功，那么按照<span class="exturl" data-url="aHR0cHM6Ly91bWFtaS5pcy9kb2NzL21pZ3JhdGUtdjEtdjI=">官方的迁移文档<i class="fa fa-external-link-alt"></i></span>，我手动运行了迁移脚本，但是得到了这样的错误信息：<code>db error: ERROR: must be owner of table _prisma_migrations</code>。看起来是表的权限问题，<code>_prisma_migrations</code> 这个表的 <code>owner</code> 必须是我用来执行脚本的用户。</p><p>搜了一下，<code>PostgreSQL</code> 里面每个表都有一个所有者，而我一开始是用 <code>postgres</code> 这个用户初始化的数据库，所以这些表的所有者都是 <code>postgres</code>，之前没有问题，只是因为我给 umami 的用户读写这些表的授权了。</p><h2 id="修复数据库"><a href="#修复数据库" class="headerlink" title="修复数据库"></a>修复数据库</h2><p>首先执行了下 <code>select schemaname, tablename, tableowner from pg_tables where schemaname = 'umami'</code>，果不其然这些表的 owner 都是 <code>postgres</code>。</p><p>于是尝试执行了下 <code>alter table umami_analytics._prisma_migrations owner to umami_analytics</code>，但是又报错 <code>ERROR: must be member of role umami_user</code>。好么，我一直以为 <code>postgres</code> 用户跟 MySQL 的 <code>root</code> 一样是超管，结果 PostgreSQL 世界里面人人生而平等？好吧，你要权限那我就给你授权，<code>grant postgres to umami_user</code>。</p><p>授权之后，重新执行 <code>alter table umami_analytics._prisma_migrations owner to umami_analytics</code>，发现成功了，再执行 umami 的迁移脚本后，发现错误信息变成了 <code>db error: ERROR: must be owner of table account</code>。看来，上面的解决方案奏效了，接下来就是把剩下的表的所有者全都改过来。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> umami_analytics._event_old owner <span class="keyword">to</span> umami_analytics;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> umami_analytics._prisma_migrations owner <span class="keyword">to</span> umami_analytics;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> umami_analytics.account owner <span class="keyword">to</span> umami_analytics;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> umami_analytics."event" owner <span class="keyword">to</span> umami_analytics;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> umami_analytics.event_data owner <span class="keyword">to</span> umami_analytics;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> umami_analytics.pageview owner <span class="keyword">to</span> umami_analytics;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> umami_analytics."session" owner <span class="keyword">to</span> umami_analytics;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> umami_analytics.website owner <span class="keyword">to</span> umami_analytics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> schemaname, tablename, tableowner <span class="keyword">from</span> pg_tables <span class="keyword">where</span> schemaname <span class="operator">=</span> <span class="string">'umami_analytics'</span>;</span><br></pre></td></tr></tbody></table></figure><p>可以看到，umami 相关的表的所有者都正确了，回到 Vercel，重新运行失败的部署，发现还是报错。无奈，又试了试手动迁移脚本，竟然成功了，这时候数据库肯定是 v2 的了，再到 Vercel 重新部署，这次就成功了。</p><p>注意脚本执行到最后会问要不要删掉 v1 的表，记得不要删。我发现在删掉 v1 的旧表之后，Vercel 的部署又会出新的问题。（我为了验证到底是我的问题还是脚本的问题，回滚了两三次生产数据库。也就是这个数据不重要我才敢这么折腾，好孩子不要学我乱搞生产数据库哦～）</p><h2 id="更新博客的配置"><a href="#更新博客的配置" class="headerlink" title="更新博客的配置"></a>更新博客的配置</h2><p>NexT 主题是内建了对 umami 的支持的，但是需要手动指定脚本的位置。根据迁移文档的提示，修正<code>_config.next.yml</code> 中 <code>umami.script_url</code>，重新部署博客即可。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/umami/">umami</category>
      
      <category domain="https://www.boris1993.com/tags/analytics/">analytics</category>
      
      
      <comments>https://www.boris1993.com/migrating-to-umami-v2.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MySQL 的最左匹配原则</title>
      <link>https://www.boris1993.com/mysql-leftmost-prefix.html</link>
      <guid>https://www.boris1993.com/mysql-leftmost-prefix.html</guid>
      <pubDate>Mon, 17 Apr 2023 04:17:55 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;依旧是面试查漏补缺。这次是 MySQL 的最左匹配原则。&lt;/p&gt;
&lt;p&gt;废话不多说，直接看&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL211bHRpc</description>
        
      
      
      
      <content:encoded><![CDATA[<p>依旧是面试查漏补缺。这次是 MySQL 的最左匹配原则。</p><p>废话不多说，直接看<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL211bHRpcGxlLWNvbHVtbi1pbmRleGVzLmh0bWw="> MySQL 官方文档<i class="fa fa-external-link-alt"></i></span>给出的例子。</p><p>有这么一个表：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test (</span><br><span class="line">    id         <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    last_name  <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    first_name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">    INDEX name (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>可以看出，表里面有一个联合索引 <code>(last_name, first_name)</code>。那么，查询的时候，这些语句就可以成功走索引：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">'Doe'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">'Doe'</span> <span class="keyword">AND</span> first_name <span class="operator">=</span> <span class="string">'John'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">'Doe'</span> <span class="keyword">AND</span> (first_name <span class="operator">=</span> <span class="string">'John'</span> <span class="keyword">OR</span> first_name <span class="operator">=</span> <span class="string">'Jane'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">'Doe'</span> <span class="keyword">AND</span> first_name <span class="operator">&gt;=</span> <span class="string">'M'</span> <span class="keyword">AND</span> first_name <span class="operator">&lt;</span> <span class="string">'N'</span>;</span><br></pre></td></tr></tbody></table></figure><p>而这些查询就无法使用这个索引：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> first_name <span class="operator">=</span> <span class="string">'John'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">'Doe'</span> <span class="keyword">OR</span> first_name <span class="operator">=</span> <span class="string">'John'</span>;</span><br></pre></td></tr></tbody></table></figure><p>也就是说，上面例子中的 <code>last_name</code> 列就是索引的最左前缀，如果要在查询中使用这个索引，那么条件中必须包含 <code>last_name</code>，或者同时包含 <code>last_name</code> 和 <code>first_name</code>。</p><blockquote><p>MySQL can use multiple-column indexes for queries that test all the columns in the index, or queries that test just the first column, the first two columns, the first three columns, and so on. If you specify the columns in the right order in the index definition, a single composite index can speed up several kinds of queries on the same table.</p></blockquote>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/MySQL/">MySQL</category>
      
      <category domain="https://www.boris1993.com/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      <category domain="https://www.boris1993.com/tags/%E6%9C%80%E5%B7%A6%E5%8C%B9%E9%85%8D%E5%8E%9F%E5%88%99/">最左匹配原则</category>
      
      <category domain="https://www.boris1993.com/tags/leftmost-prefix/">leftmost prefix</category>
      
      
      <comments>https://www.boris1993.com/mysql-leftmost-prefix.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>快速理解 Java 中的守护线程</title>
      <link>https://www.boris1993.com/java-daemon-thread.html</link>
      <guid>https://www.boris1993.com/java-daemon-thread.html</guid>
      <pubDate>Sat, 15 Apr 2023 16:18:51 GMT</pubDate>
      
      <description>&lt;p&gt;面试的时候被问到 “了解不了解守护线程”，可本菜别提了解了，听都没听说过。所以面试之后赶紧上网冲浪学习起来。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>面试的时候被问到 “了解不了解守护线程”，可本菜别提了解了，听都没听说过。所以面试之后赶紧上网冲浪学习起来。</p><span id="more"></span><h2 id="什么是守护线程"><a href="#什么是守护线程" class="headerlink" title="什么是守护线程"></a>什么是守护线程</h2><p>首先我们要知道，Java 中存在两种线程，用户线程和守护线程。</p><p>用户线程就是我们平时最常用到的那种线程，它属于高优先级线程，JVM 在退出前会等待所有用户线程完成。</p><p>守护线程则是低优先级线程，它的作用是为用户线程提供服务，不会阻止 JVM 退出（不能 100% 保证，不良的代码仍会阻止 JVM 退出）。</p><blockquote><p>即 Thread#setDaemon (boolean) 方法的 JavaDoc 提到的<br>The Java Virtual Machine exits when the only threads running are all daemon threads.</p></blockquote><h2 id="守护线程能干什么"><a href="#守护线程能干什么" class="headerlink" title="守护线程能干什么"></a>守护线程能干什么</h2><p>常见的场景有垃圾回收、释放未使用的对象的内存、从缓存中释放不需要的条目等等。</p><h2 id="怎么创建守护线程"><a href="#怎么创建守护线程" class="headerlink" title="怎么创建守护线程"></a>怎么创建守护线程</h2><p>调用 <code>Thread#setDaemon(boolean)</code> 方法就可以让一个线程变成守护线程，如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            System.out.println(<span class="string">"Main thread exited."</span>);</span><br><span class="line">        }));</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">"Thread is running..."</span>);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                System.out.println(<span class="string">"Thread exited."</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一定要在Thread#start()前调用，否则会抛IllegalThreadStateException异常</span></span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Main thread exiting....."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将上面代码运行后，可以在控制台看到如下输出：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread is running...</span><br><span class="line">Thread is running...</span><br><span class="line">Thread is running...</span><br><span class="line">Thread is running...</span><br><span class="line">Main thread exiting.....</span><br><span class="line">Main thread exited.</span><br></pre></td></tr></tbody></table></figure><p>可见，虽然线程中执行的是一个死循环，但是 JVM 在结束时，不会理会 <code>thread</code> 还在运行，直接就退出了。同样还可以看到的是，<code>finally</code> 块并没有执行，所以在守护线程中不要使用任何需要关闭的资源，比如打开文件，因为守护线程退出的时候，它没有任何机会来关闭文件，就会导致数据丢失（我感觉就像 <code>kill -9</code> 掉一个正在内存中处理文件内容的进程，<code>SIGKILL</code> 信号不会给这个进程任何善后的时间）。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/">多线程</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/">守护线程</category>
      
      <category domain="https://www.boris1993.com/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      <category domain="https://www.boris1993.com/tags/daemon-thread/">daemon thread</category>
      
      
      <comments>https://www.boris1993.com/java-daemon-thread.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>在 Java 中如何实现在多个线程全部完成后再执行后续的代码</title>
      <link>https://www.boris1993.com/java-how-to-wait-for-threads-before-continuing.html</link>
      <guid>https://www.boris1993.com/java-how-to-wait-for-threads-before-continuing.html</guid>
      <pubDate>Wed, 05 Apr 2023 13:22:13 GMT</pubDate>
      
      <description>&lt;p&gt;面试的时候被问到，如何在 5 个线程全部执行完毕之后，再继续执行后续的代码。迫于对多线程的东西了解不多，只答出一个 &lt;code&gt;CountDownLatch&lt;/code&gt;，还大概答出一个用 &lt;code&gt;Future&lt;/code&gt; 的思路。回来痛定思痛，请出了万能的 ChatGPT，学到了其他的几种方法。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>面试的时候被问到，如何在 5 个线程全部执行完毕之后，再继续执行后续的代码。迫于对多线程的东西了解不多，只答出一个 <code>CountDownLatch</code>，还大概答出一个用 <code>Future</code> 的思路。回来痛定思痛，请出了万能的 ChatGPT，学到了其他的几种方法。</p><span id="more"></span><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>在 Java 中可以使用 <code>CountDownLatch</code> 来实现线程间的协调和等待。<code>CountDownLatch</code> 是一个同步工具类，它允许一个或多个线程等待一组事件发生。</p><p>在这个问题中，我们可以创建一个初始值为 5 的 <code>CountDownLatch</code>，每个线程完成时调用 <code>countDown()</code> 方法将计数器减一，主线程调用 <code>await()</code> 方法等待计数器归零后再执行后续代码。</p><p>下面是一个示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="type">int</span> <span class="variable">numThreads</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(numThreads);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建 5 个线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numThreads; i++) {</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(latch);</span><br><span class="line">            thread.start();</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 等待所有线程执行完毕</span></span><br><span class="line">        <span class="comment">// P.S.：我当时想不起来可以await了，就答了个用循环检查CountDownLatch......</span></span><br><span class="line">        latch.await();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行后续代码</span></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(CountDownLatch latch)</span> {</span><br><span class="line">            <span class="built_in">this</span>.latch = latch;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 线程执行一些操作</span></span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 线程执行完毕后调用 countDown() 方法</span></span><br><span class="line">                latch.countDown();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，<code>MyThread</code> 类表示线程的实现。在 <code>run()</code> 方法中，线程执行一些操作，然后调用 <code>countDown()</code> 方法通知 <code>CountDownLatch</code> 计数器减一。在主线程中，我们创建 5 个线程并启动它们，然后调用 <code>await()</code> 方法等待所有线程执行完毕。最后，当所有线程执行完毕时，主线程输出一条消息，并继续执行后续代码。</p><h2 id="使用join-方法"><a href="#使用join-方法" class="headerlink" title="使用join()方法"></a>使用 join () 方法</h2><p>如果不使用 <code>CountDownLatch</code>，可以使用 Java 的线程 <code>join()</code> 方法来等待所有线程执行完毕。<code>join()</code> 方法可以使得一个线程在另一个线程结束后再执行。具体来说，可以在主线程中依次调用每个线程的 <code>join()</code> 方法，让主线程等待每个线程执行完毕后再继续执行后续代码。</p><p>下面是一个使用 <code>join()</code> 方法实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        List&lt;MyThread&gt; threads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="type">MyThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">            thread.start();</span><br><span class="line">            threads.add(thread);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (MyThread thread : threads) {</span><br><span class="line">            <span class="comment">// join()方法的JavaDoc写的清晰明了：</span></span><br><span class="line">            <span class="comment">// Waits for this thread to die.</span></span><br><span class="line">            thread.join();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，<code>MyThread</code> 类表示线程的实现。在主线程中，我们创建 5 个线程并启动它们，然后依次调用每个线程的 <code>join()</code> 方法等待线程执行完毕。最后，当所有线程执行完毕时，主线程输出一条消息，并继续执行后续代码。</p><p>需要注意的是，<code>join()</code> 方法会阻塞当前线程，直到被等待的线程执行完毕。因此，在使用 <code>join()</code> 方法时要小心，以避免出现死锁等问题。</p><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>使用 <code>Future</code> 类也可以实现等待多个线程执行完毕。<code>Future</code> 是 Java 提供的一种异步计算的机制，可以在一个线程中调用另一个线程并等待其执行结果。具体来说，可以使用 <code>ExecutorService</code> 的 <code>invokeAll()</code> 方法启动多个线程，将返回的 <code>Future</code> 对象保存到一个列表中，然后调用每个 <code>Future</code> 对象的 <code>get()</code> 方法等待线程执行完毕。</p><p>下面是一个使用 <code>Future</code> 类实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException {</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        List&lt;Callable&lt;Void&gt;&gt; tasks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            Callable&lt;Void&gt; task = <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">            tasks.add(task);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        List&lt;Future&lt;Void&gt;&gt; futures = executor.invokeAll(tasks);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Void&gt; future : futures) {</span><br><span class="line">            <span class="comment">// Waits if necessary for the computation to complete,</span></span><br><span class="line">            <span class="comment">// and then retrieves its result.</span></span><br><span class="line">            future.get();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行后续代码</span></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Void&gt; {</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">call</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，<code>MyTask</code> 类表示线程的实现。在主线程中，我们使用 <code>ExecutorService</code> 的 <code>invokeAll()</code> 方法启动多个线程，并将返回的 <code>Future</code> 对象保存到一个列表中。然后，我们依次调用每个 <code>Future</code> 对象的 <code>get()</code> 方法等待线程执行完毕。最后，当所有线程执行完毕时，主线程输出一条消息，并继续执行后续代码。</p><p>需要注意的是，在使用 <code>Future</code> 类时要小心，以避免出现线程池满载等问题。在实际应用中，可以根据需要调整线程池大小或使用其他调度机制来处理大量的并发任务。</p><h2 id="wait-和notifyAll"><a href="#wait-和notifyAll" class="headerlink" title="wait()和notifyAll()"></a>wait () 和 notifyAll ()</h2><p>可以使用 Java 的 <code>wait()</code> 和 <code>notifyAll()</code> 方法来实现等待多个线程执行完毕。具体来说，可以在主线程中创建一个共享的计数器变量，每个线程在执行完毕后将计数器减一。当计数器为 0 时，说明所有线程执行完毕，可以调用 <code>notifyAll()</code> 方法唤醒主线程继续执行后续代码。</p><p>下面是一个使用 <code>wait()</code> 和 <code>notifyAll()</code> 方法实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">MyThread</span>(countDownLatch).start();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (countDownLatch) {</span><br><span class="line">            <span class="keyword">while</span> (countDownLatch.getCount() &gt; <span class="number">0</span>) {</span><br><span class="line">                countDownLatch.wait();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(CountDownLatch countDownLatch)</span> {</span><br><span class="line">            <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="keyword">synchronized</span> (countDownLatch) {</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                    countDownLatch.notifyAll();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，MyThread 类表示线程的实现。在主线程中，我们创建 5 个线程并启动它们，然后使用一个共享的计数器变量 countDownLatch 记录线程执行的状态。当每个线程执行完毕时，将计数器减一，并调用 notifyAll () 方法唤醒主线程。在主线程中，我们使用 wait () 方法等待所有线程执行完毕，直到计数器为 0。</p><p>P.S.：感觉这个实现有种莫名其妙的别扭感……</p><h2 id="CompletionService"><a href="#CompletionService" class="headerlink" title="CompletionService"></a>CompletionService</h2><p>使用 <code>CompletionService</code> 可以比较方便地实现等待所有线程执行完毕的功能。<code>CompletionService</code> 是 Java 提供的一个接口，它可以将任务提交给线程池执行，并在任务执行完毕后立即返回结果，从而实现异步执行和结果收集的功能。</p><p>具体来说，可以创建一个 <code>ExecutorService</code> 对象作为线程池，然后将任务提交给 <code>CompletionService</code> 执行。在提交任务时，可以使用 <code>submit()</code> 方法返回一个 <code>Future</code> 对象，用于后续获取任务执行的结果。使用 <code>CompletionService</code> 的 <code>take()</code> 方法可以等待任意一个任务执行完毕并返回结果，从而避免了使用 <code>join()</code> 方法等待所有线程执行完毕的阻塞等待。</p><p>下面是一个使用 <code>CompletionService</code> 实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        CompletionService&lt;Void&gt; completionService = <span class="keyword">new</span> <span class="title class_">ExecutorCompletionService</span>&lt;&gt;(executor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            completionService.submit(<span class="keyword">new</span> <span class="title class_">MyTask</span>());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="comment">// Retrieves and removes the Future representing the next completed task,</span></span><br><span class="line">            <span class="comment">// waiting if none are yet present.</span></span><br><span class="line">            completionService.take();</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + i + <span class="string">" has finished executing"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        executor.shutdown();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Void&gt; {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">call</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="线程的getState-方法"><a href="#线程的getState-方法" class="headerlink" title="线程的getState()方法"></a>线程的 getState () 方法</h2><p>除了 <code>CountDownLatch</code> 和 <code>Future</code> 类，还有其他实现方法。其中一个比较简单的方法是使用 Java 的线程状态<code>（Thread.State）</code>来判断所有线程是否执行完毕。</p><p>具体来说，可以将所有线程保存到一个列表中，然后在主线程中依次调用每个线程的 <code>getState()</code> 方法，检查线程状态是否为 <code>Terminated</code>。如果所有线程都已经执行完毕，则可以继续执行后续代码。</p><p>下面是一个使用线程状态实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        List&lt;MyThread&gt; threads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="type">MyThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">            thread.start();</span><br><span class="line">            threads.add(thread);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allThreadsFinished</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!allThreadsFinished) {</span><br><span class="line">            allThreadsFinished = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (MyThread thread : threads) {</span><br><span class="line">                <span class="keyword">if</span> (thread.getState() != Thread.State.TERMINATED) {</span><br><span class="line">                    allThreadsFinished = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，<code>MyThread</code> 类表示线程的实现。在主线程中，我们创建 5 个线程并启动它们，然后循环检查每个线程的状态，直到所有线程都执行完毕。在每次循环中，我们先将 <code>allThreadsFinished</code> 标志设为 <code>true</code>，然后依次检查每个线程的状态。如果有任何一个线程的状态不是 <code>Terminated</code>，则将 <code>allThreadsFinished</code> 标志设为 <code>false</code>，并跳出循环。等待一段时间后重新检查线程状态，直到所有线程都执行完毕。</p><p>需要注意的是，使用线程状态进行等待需要定期检查所有线程的状态，因此会占用一定的 CPU 资源。在实际应用中，可以根据需要调整等待的时间间隔以及检查的次数，以平衡等待时间和 CPU 资源的消耗。</p><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>使用 <code>CyclicBarrier</code> 也可以比较方便地实现等待所有线程执行完毕的功能。<code>CyclicBarrier</code> 是 Java 提供的一个同步辅助类，它可以让一组线程等待彼此达到某个共同的屏障点。</p><p>具体来说，可以创建一个 <code>CyclicBarrier</code> 对象，并指定需要等待的线程数量。每个线程在执行完自己的任务后，调用 <code>CyclicBarrier</code> 的 <code>await()</code> 方法，表示已经到达了屏障点。当所有线程都到达了屏障点后，<code>CyclicBarrier</code> 就会释放所有线程，从而实现等待所有线程执行完毕的功能。</p><p>下面是一个使用 <code>CyclicBarrier</code> 实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="comment">// 创建 CyclicBarrier 对象，等待 5 个线程</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(</span><br><span class="line">                        <span class="number">5</span>,</span><br><span class="line">                        () -&gt; {</span><br><span class="line">                            <span class="comment">// 所有线程到达屏障点时执行的操作</span></span><br><span class="line">                            System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">                        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyTask</span>(cyclicBarrier)).start();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyTask</span><span class="params">(CyclicBarrier cyclicBarrier)</span> {</span><br><span class="line">            <span class="built_in">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            <span class="comment">// 等待所有线程执行完毕</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，<code>MyTask</code> 类表示线程的实现。在主线程中，我们创建一个 <code>CyclicBarrier</code> 对象，并指定需要等待的线程数量为 5。每个线程在执行完自己的任务后，调用 <code>CyclicBarrier</code> 的 <code>await()</code> 方法，表示已经到达了屏障点。当所有线程都到达了屏障点后，<code>CyclicBarrier</code> 就会执行屏障操作，这里是输出 <code>All threads have finished executing.</code>。</p><p>需要注意的是，如果其中一个线程在等待过程中被中断或者抛出异常，那么 <code>CyclicBarrier</code> 就会被破坏，所有线程都会被唤醒并抛出 <code>BrokenBarrierException</code> 异常。因此，在实现时需要捕获 <code>InterruptedException</code> 和 <code>BrokenBarrierException</code> 异常。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/">多线程</category>
      
      <category domain="https://www.boris1993.com/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      <category domain="https://www.boris1993.com/tags/CountDownLatch/">CountDownLatch</category>
      
      <category domain="https://www.boris1993.com/tags/Future/">Future</category>
      
      
      <comments>https://www.boris1993.com/java-how-to-wait-for-threads-before-continuing.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>从字节码看 synchronized 关键字是怎么工作的</title>
      <link>https://www.boris1993.com/how-synchronized-works-in-java.html</link>
      <guid>https://www.boris1993.com/how-synchronized-works-in-java.html</guid>
      <pubDate>Wed, 05 Apr 2023 07:22:04 GMT</pubDate>
      
      <description>&lt;p&gt;昨天面试的时候被问到 Java 中的 &lt;code&gt;synchronized&lt;/code&gt; 关键字是什么原理，虽然凭着记忆打出来是通过控制对象头的 Monitor 来实现，但是毕竟没吃透这个知识点，还是没啥底气。干脆，这次就从字节码上看看，用了 &lt;code&gt;synchronized&lt;/code&gt; 关键字的方法，到底是怎么执行的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>昨天面试的时候被问到 Java 中的 <code>synchronized</code> 关键字是什么原理，虽然凭着记忆打出来是通过控制对象头的 Monitor 来实现，但是毕竟没吃透这个知识点，还是没啥底气。干脆，这次就从字节码上看看，用了 <code>synchronized</code> 关键字的方法，到底是怎么执行的。</p><span id="more"></span><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>说起 <code>synchronized</code> 的最简单的使用场景，我马上就想起双检单例模式。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Test INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Test</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Test.class) {</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) {</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="反编译成字节码"><a href="#反编译成字节码" class="headerlink" title="反编译成字节码"></a>反编译成字节码</h2><p>把 <code>Test</code> 类先编译了，然后用 <code>javap -c Test.class</code> 反编译，就能看到这个类的字节码了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"Test.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title function_">getInstance</span><span class="params">()</span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: getstatic     #<span class="number">7</span>                  <span class="comment">// 把静态变量INSTANCE加载到栈</span></span><br><span class="line">       <span class="number">3</span>: ifnonnull     <span class="number">37</span>                  <span class="comment">// 如果值不是null，那么跳转到标签37</span></span><br><span class="line">       <span class="number">6</span>: ldc           #<span class="number">8</span></span><br><span class="line">       <span class="number">8</span>: dup</span><br><span class="line">       <span class="number">9</span>: astore_0</span><br><span class="line">      <span class="number">10</span>: monitorenter                      <span class="comment">// 进入synchronized块</span></span><br><span class="line">      <span class="number">11</span>: getstatic     #<span class="number">7</span>                  <span class="comment">// 把静态变量INSTANCE加载到栈</span></span><br><span class="line">      <span class="number">14</span>: ifnonnull     <span class="number">27</span>                  <span class="comment">// 如果值不是null，那么跳转到标签27</span></span><br><span class="line">      <span class="number">17</span>: <span class="keyword">new</span>           #<span class="number">8</span>                  <span class="comment">// new一个Test对象</span></span><br><span class="line">      <span class="number">20</span>: dup</span><br><span class="line">      <span class="number">21</span>: invokespecial #<span class="number">13</span>                 <span class="comment">// 执行构造函数</span></span><br><span class="line">      <span class="number">24</span>: putstatic     #<span class="number">7</span></span><br><span class="line">      <span class="number">27</span>: aload_0</span><br><span class="line">      <span class="number">28</span>: monitorexit                       <span class="comment">// 退出synchronized块</span></span><br><span class="line">      <span class="number">29</span>: goto          <span class="number">37</span></span><br><span class="line">      <span class="number">32</span>: astore_1</span><br><span class="line">      <span class="number">33</span>: aload_0</span><br><span class="line">      <span class="number">34</span>: monitorexit</span><br><span class="line">      <span class="number">35</span>: aload_1</span><br><span class="line">      <span class="number">36</span>: athrow</span><br><span class="line">      <span class="number">37</span>: getstatic     #<span class="number">7</span>                  <span class="comment">// Field INSTANCE:LTest;</span></span><br><span class="line">      <span class="number">40</span>: areturn</span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">          <span class="number">11</span>    <span class="number">29</span>    <span class="number">32</span>   any</span><br><span class="line">          <span class="number">32</span>    <span class="number">35</span>    <span class="number">32</span>   any</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: getstatic     #<span class="number">14</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">       <span class="number">3</span>: ldc           #<span class="number">20</span>                 <span class="comment">// String test</span></span><br><span class="line">       <span class="number">5</span>: invokevirtual #<span class="number">22</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">       <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意看 <code>10: monitorenter</code> 和 <code>28: monitorexit</code> 这两条字节码，这就是 <code>synchronized</code> 关键字实际做了的事。</p><h2 id="Java对象头和Monitor"><a href="#Java对象头和Monitor" class="headerlink" title="Java对象头和Monitor"></a>Java 对象头和 Monitor</h2><p>要说明白 <code>monitorenter</code> 和 <code>monitorexit</code> 实际干了点啥，那就得先整明白 Java 对象的对象头。</p><p>一个 Java 对象，在内存中的布局包括三块区域：对象头、实例数据、和对齐填充。</p><p><img data-src="https://blog-static.boris1993.com/how-synchronized-works-in-java/java_object_memory_allocation.png"></p><p>别的东西咱们先不看，只看对象头这部分。对象头的最后 2bit 就存储了锁的标志位。</p><p>至于 Monitor，Java 官方文档是这么描述的：</p><blockquote><p>Synchronization is built around an internal entity known as the intrinsic lock or monitor lock. (The API specification often refers to this entity simply as a “monitor.”) Intrinsic locks play a role in both aspects of synchronization: enforcing exclusive access to an object’s state and establishing happens-before relationships that are essential to visibility.</p><p>Every object has an intrinsic lock associated with it. By convention, a thread that needs exclusive and consistent access to an object’s fields has to acquire the object’s intrinsic lock before accessing them, and then release the intrinsic lock when it’s done with them. </p><p>同步是围绕着一个名为 “内在锁” 或 “monitor 锁” 的机制构建的。（API 规范文档中，通常会称其为 “monitor”）<br>内在锁一方面保证了针对一个对象的专属访问权限，另一方面保证了对可见性很重要的 happens-before 原则。<br>每个对象都会有一个与其相关联的内在锁。按照约定，如果一个线程需要持续持有对一个对象的独家访问权限，那么这个线程必须先获得到这个对象的内在锁，然后在执行完毕后释放掉这个内在锁。</p></blockquote><p>代码执行到 <code>monitorenter</code> 指令，说明开始进入 <code>synchronized</code> 代码块，这时候 JVM 会尝试获取这个对象的 <code>monitor</code> 所有权，即尝试加锁；而执行到 <code>monitorexit</code> 指令，就说明要么 <code>synchronized</code> 代码块执行完毕，要么代码执行的时候抛出了异常，这时候 JVM 就会释放这个对象的 <code>monitor</code> 所有权，即释放锁。</p><h2 id="继续深入细节"><a href="#继续深入细节" class="headerlink" title="继续深入细节"></a>继续深入细节</h2><p>上面说的也是云里雾里的，咱继续往深处挖，看看具体的实现。</p><p><code>Monitor</code> 这个东西，看 Java 源码找不到，得找虚拟机的 C++ 源码。比如我们常用的 HotSpot 虚拟机中，<code>Monitor</code> 是由 <code>ObjectMonitor</code> 类实现的：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了解释方便，仅抄录了相关的代码，并重排了位置</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectMonitor</span> {</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">ObjectMonitor</span>() {</span><br><span class="line">            _header       = <span class="literal">NULL</span>;</span><br><span class="line">            _count        = <span class="number">0</span>;</span><br><span class="line">            _waiters      = <span class="number">0</span>,</span><br><span class="line">            _recursions   = <span class="number">0</span>;</span><br><span class="line">            _object       = <span class="literal">NULL</span>;</span><br><span class="line">            _owner        = <span class="literal">NULL</span>;</span><br><span class="line">            _WaitSet      = <span class="literal">NULL</span>;</span><br><span class="line">            _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">            _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">            _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">            _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">            FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">            _EntryList    = <span class="literal">NULL</span> ;</span><br><span class="line">            _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">            _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">            OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">            _previous_owner_tid = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">intptr_t</span>  _count;          <span class="comment">// reference count to prevent reclaimation/deflation</span></span><br><span class="line">                                            <span class="comment">// at stop-the-world time.  See deflate_idle_monitors().</span></span><br><span class="line">                                            <span class="comment">// _count is approximately |_WaitSet| + |_EntryList|</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等待锁的线程会被封装成ObjectWaiter对象</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="type">void</span> *  <span class="keyword">volatile</span> _owner;                <span class="comment">// 一个指针，指向当前拥有锁的线程</span></span><br><span class="line">        ObjectWaiter * <span class="keyword">volatile</span> _WaitSet;       <span class="comment">// 一个队列，保存着waiting状态的线程</span></span><br><span class="line">        ObjectWaiter * <span class="keyword">volatile</span> _EntryList ;    <span class="comment">// 一个队列，保存着因等待锁而被阻塞的线程</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当多个线程同时访问一段 <code>synchronized</code> 代码时，会发生这些操作：</p><ul><li>线程首先会进入<code>_EntryList</code>，在该线程获取到对象的 <code>monitor</code> 之后，<code>_owner</code> 会指向这个线程，然后<code>_count</code> 计数器加一。<ul><li>如果得到 <code>monitor</code> 的这个线程调用了 <code>wait()</code> 方法，那么这个线程将会释放掉 monitor 的所有权，<code>_owner</code> 变量变回 NULL，<code>_count</code> 计数器也会减一，同时这个线程会进入<code>_WaitSet</code> 等待被唤醒。</li><li>如果这个线程执行完毕，那么它也将释放 <code>monitor</code>，并复位<code>_count</code> 的值，这样其他的线程也就可以获得 <code>monitor</code> 来加锁了。</li></ul></li><li>上一个线程释放掉 <code>monitor</code> 后，<code>_EntryList</code> 中的线程就会开始争抢 <code>monitor</code>，具体哪个线程能成功得到 <code>monitor</code> 是不确定的。</li></ul><p>而正因为 Monitor 对象存在于每个 Java 对象头的 <code>mark word</code> 中，所以每个 Java 对象都可以用作锁。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9keW1hbnp5LmdpdGh1Yi5pby8yMDE3LzA4LzA3L3N5bmNocm9uaXplZCVFNCVCOCU4RSVFNSVBRiVCOSVFOCVCMSVBMSVFNyU5QSU4NE1vbml0b3Iv">synchronized 与对象的 Monitor<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2Vzc2VudGlhbC9jb25jdXJyZW5jeS9sb2Nrc3luYy5odG1s">Intrinsic Locks and Synchronization<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNjQwMTk3NTEzMjMw">啃碎并发（七）：深入分析 Synchronized 原理<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pldEJyYWlucy9qZGs4dV9ob3RzcG90L2Jsb2IvbWFzdGVyL3NyYy9zaGFyZS92bS9ydW50aW1lL29iamVjdE1vbml0b3IuaHBwI0wxNDQtTDE2Mg==">objectMonitor.hpp - JetBrains/jdk8u_hotspot<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTY1NTU1NDIvd2h5LWRvLXdlLW5lZWQtdG8tY2FsbC1tb25pdG9yZXhpdC1pbnN0cnVjdGlvbi10d2ljZS13aGVuLXdlLXVzZS1zeW5jaHJvbml6ZWQ=">Why do we need to call ‘monitorexit’ instruction twice when we use ‘synchronized’ keyword? - StackOverflow<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/">面试问题</category>
      
      <category domain="https://www.boris1993.com/tags/syncronized/">syncronized</category>
      
      
      <comments>https://www.boris1993.com/how-synchronized-works-in-java.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>100 块自制短信转发器</title>
      <link>https://www.boris1993.com/building-a-sms-forwarder-with-air780e.html</link>
      <guid>https://www.boris1993.com/building-a-sms-forwarder-with-air780e.html</guid>
      <pubDate>Tue, 21 Mar 2023 08:42:17 GMT</pubDate>
      
      <description>&lt;p&gt;迫于手上有张 KnowRoaming 的卡用来收短信，但是为了这玩意再照顾个手机又很烦，正好看到合宙有卖 4G 模块，还有人已经实现了短信转发功能。本着生命在于折腾的精神，果断下单了一张开始搞。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>迫于手上有张 KnowRoaming 的卡用来收短信，但是为了这玩意再照顾个手机又很烦，正好看到合宙有卖 4G 模块，还有人已经实现了短信转发功能。本着生命在于折腾的精神，果断下单了一张开始搞。</p><span id="more"></span><h2 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h2><ul><li>Air780E + ESP32S3 套餐 - ￥66.80</li></ul><p>因为 KnowRoaming 手机卡只能收短信，不能发短信，也没有数据流量，而 Air780e 正好不支持连接 Wi-Fi，所以需要搭配 ESP32S3。ESP32S3 用来连接 Wi-Fi，并作为主控板，通过 UART 来连接和驱动 Air780e。</p><p><img data-src="https://blog-static.boris1993.com/forwarding-sms-by-air780/air780e_purchase_history.png"></p><ul><li>16pin 排母 - ￥15</li></ul><p>合宙只给送了排针，没有排母（甚至不卖这玩意），但是直接把 ESP32S3 和 Air780e 焊死显然不合适，所以只能自己再买排母。￥15 一盒里面有 5 对，所以实际分摊下来只有￥3。</p><p><img data-src="https://blog-static.boris1993.com/forwarding-sms-by-air780/socket_header.jpg"></p><ul><li>USB Type-C 转 Type-B 双公头转接头 - ￥9.9</li></ul><p>开发过程中可以用线凑合，但是我最后打算直插在 UPS 的 USB 口上，所以转换头必不可少。</p><p><img data-src="https://blog-static.boris1993.com/forwarding-sms-by-air780/usb_c_to_b_converter.png"></p><ul><li>找师傅焊接的手工费 - ￥50</li></ul><p>这没啥说的，自己又没有电烙铁又没这技术，就找了个修手机的铺子，让老板帮忙焊的。老板一边焊，一边说他这含银焊锡用在这上面都浪费……</p><h2 id="焊接和组装"><a href="#焊接和组装" class="headerlink" title="焊接和组装"></a>焊接和组装</h2><p>先上个全家福～</p><p><img data-src="https://blog-static.boris1993.com/forwarding-sms-by-air780/parts.jpeg"></p><p>焊排针和排座没啥好说的，就照着下图的样子焊就行。</p><table><thead><tr><th>ESP32S3</th><th>Air780e</th></tr></thead><tbody><tr><td><img data-src="https://blog-static.boris1993.com/forwarding-sms-by-air780/esp32s3.jpeg"></td><td><img data-src="https://blog-static.boris1993.com/forwarding-sms-by-air780/air780e.jpeg"></td></tr></tbody></table><p>另外因为 Air780e 默认不会上电自动开机，所以还要把 PWR 键上方的焊盘短接来让它通电就自动开机。（暂且借<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hlbnh1YmxvZy5jb20vMjAyMi8xMC8yOC8xOS05LXNtcy1mb3J3YXJkaW5nLWFpcjc4MGUtZXNwMzJjMy5odG1s">晨旭的博客<i class="fa fa-external-link-alt"></i></span>中的图片，因为我焊的时候忘了这茬了……）</p><p><img data-src="https://blog-static.boris1993.com/forwarding-sms-by-air780/shorting_soldering_pad_for_power_key.jpg"></p><p>然后 SIM 卡芯片朝板子，缺口朝内，插进 Air780e 的 SIM 卡槽。</p><p><img data-src="https://blog-static.boris1993.com/forwarding-sms-by-air780/sim_card_direction.jpeg"></p><p>最后按照如图的方向把排针对其插上就组装好了。一定要注意方向，毕竟有 5V 供电的针脚，插反了把 5V 怼到 GND 上会发生什么就不好说了，或许可以参考伊朗电工 Mehdi Sadaghdar 的各种作死实战。</p><p><img data-src="https://blog-static.boris1993.com/forwarding-sms-by-air780/put_together.jpeg"></p><h2 id="刷机和测试"><a href="#刷机和测试" class="headerlink" title="刷机和测试"></a>刷机和测试</h2><p>ESP32S3 接上 USB 转换头，再插到电脑上，就可以愉快的刷机了。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9zbXNfZm9yd2FyZGVyX2Fpcjc4MF9lc3AzMg==">代码我已经写好并发布在 GitHub 上面了<i class="fa fa-external-link-alt"></i></span>，下载下来，照着<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9zbXNfZm9yd2FyZGVyX2Fpcjc4MF9lc3AzMi9ibG9iL21hc3Rlci9SRUFETUUubWQjJUU0JUJGJUFFJUU2JTk0JUI5JUU4JTg0JTlBJUU2JTlDJUFDJUU1JTg4JUI3JUU1JTg1JUE1ZXNwMzI="> README 里面刷机的部分<i class="fa fa-external-link-alt"></i></span>改好代码，用合宙的 <code>LuaTools</code> 刷进去，就可以了。注意板子的固件要用我的 repo 里面的，<code>LuaTools</code> 提供的固件刷进去之后可用内存不够，会发不出去 HTTP 请求。如果不会刷机，可以看看<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMU1xNHkxZTdFYi8/cD0zJnZkX3NvdXJjZT1lOTE3ZGMyYmIyZTI2MDZjYzQ5MTdkNTM1MTNhNmJlNg=="> ESP32C3 烧录教程<i class="fa fa-external-link-alt"></i></span>。</p><p>刷完机板子会自动重启，这时候可以观察板子上面指示灯的状态，或者直接在 <code>LuaTools</code> 里面看日志，来看板子的初始化状态。LED 灯各种状态的含义也可以看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9zbXNfZm9yd2FyZGVyX2Fpcjc4MF9lc3AzMi9ibG9iL21hc3Rlci9SRUFETUUubWQjbGVkJUU3JTgxJUFGJUU3JThBJUI2JUU2JTgwJTgxJUU1JTkwJUFCJUU0JUI5JTg5"> README 里面的解释<i class="fa fa-external-link-alt"></i></span>。</p><p>等板子初始化完成之后，就可以给这个手机号发短信了，板子收到短信后就会把发信号码和短信内容发送到配置的通知通道。开发的时候我已经测试过普通短信、长短信、中文、英文、日语，都可以正常接收。</p><p><img data-src="https://blog-static.boris1993.com/forwarding-sms-by-air780/test_results.JPEG"></p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/LuatOS/">LuatOS</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%90%88%E5%AE%99/">合宙</category>
      
      <category domain="https://www.boris1993.com/tags/%E7%9F%AD%E4%BF%A1%E8%BD%AC%E5%8F%91/">短信转发</category>
      
      <category domain="https://www.boris1993.com/tags/Air780E/">Air780E</category>
      
      <category domain="https://www.boris1993.com/tags/ESP32S3/">ESP32S3</category>
      
      
      <comments>https://www.boris1993.com/building-a-sms-forwarder-with-air780e.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
