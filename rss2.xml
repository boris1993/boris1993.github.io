<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Code Life</title>
    <link>https://www.boris1993.com/</link>
    
    <atom:link href="https://www.boris1993.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Boris has arrived!</description>
    <pubDate>Fri, 07 Apr 2023 14:57:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>在 Java 中如何实现在多个线程全部完成后再执行后续的代码</title>
      <link>https://www.boris1993.com/java-how-to-wait-for-threads-before-continuing.html</link>
      <guid>https://www.boris1993.com/java-how-to-wait-for-threads-before-continuing.html</guid>
      <pubDate>Wed, 05 Apr 2023 13:22:13 GMT</pubDate>
      
      <description>&lt;p&gt;面试的时候被问到，如何在 5 个线程全部执行完毕之后，再继续执行后续的代码。迫于对多线程的东西了解不多，只答出一个 &lt;code&gt;CountDownLatch&lt;/code&gt;，还大概答出一个用 &lt;code&gt;Future&lt;/code&gt; 的思路。回来痛定思痛，请出了万能的 ChatGPT，学到了其他的几种方法。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>面试的时候被问到，如何在 5 个线程全部执行完毕之后，再继续执行后续的代码。迫于对多线程的东西了解不多，只答出一个 <code>CountDownLatch</code>，还大概答出一个用 <code>Future</code> 的思路。回来痛定思痛，请出了万能的 ChatGPT，学到了其他的几种方法。</p><span id="more"></span><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>在 Java 中可以使用 <code>CountDownLatch</code> 来实现线程间的协调和等待。<code>CountDownLatch</code> 是一个同步工具类，它允许一个或多个线程等待一组事件发生。</p><p>在这个问题中，我们可以创建一个初始值为 5 的 <code>CountDownLatch</code>，每个线程完成时调用 <code>countDown()</code> 方法将计数器减一，主线程调用 <code>await()</code> 方法等待计数器归零后再执行后续代码。</p><p>下面是一个示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="type">int</span> <span class="variable">numThreads</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(numThreads);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建 5 个线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numThreads; i++) {</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(latch);</span><br><span class="line">            thread.start();</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 等待所有线程执行完毕</span></span><br><span class="line">        <span class="comment">// P.S.：我当时想不起来可以await了，就答了个用循环检查CountDownLatch......</span></span><br><span class="line">        latch.await();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行后续代码</span></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(CountDownLatch latch)</span> {</span><br><span class="line">            <span class="built_in">this</span>.latch = latch;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 线程执行一些操作</span></span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 线程执行完毕后调用 countDown() 方法</span></span><br><span class="line">                latch.countDown();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，<code>MyThread</code> 类表示线程的实现。在 <code>run()</code> 方法中，线程执行一些操作，然后调用 <code>countDown()</code> 方法通知 <code>CountDownLatch</code> 计数器减一。在主线程中，我们创建 5 个线程并启动它们，然后调用 <code>await()</code> 方法等待所有线程执行完毕。最后，当所有线程执行完毕时，主线程输出一条消息，并继续执行后续代码。</p><h2 id="使用join-方法"><a href="#使用join-方法" class="headerlink" title="使用join()方法"></a>使用 join () 方法</h2><p>如果不使用 <code>CountDownLatch</code>，可以使用 Java 的线程 <code>join()</code> 方法来等待所有线程执行完毕。<code>join()</code> 方法可以使得一个线程在另一个线程结束后再执行。具体来说，可以在主线程中依次调用每个线程的 <code>join()</code> 方法，让主线程等待每个线程执行完毕后再继续执行后续代码。</p><p>下面是一个使用 <code>join()</code> 方法实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        List&lt;MyThread&gt; threads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="type">MyThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">            thread.start();</span><br><span class="line">            threads.add(thread);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (MyThread thread : threads) {</span><br><span class="line">            <span class="comment">// join()方法的JavaDoc写的清晰明了：</span></span><br><span class="line">            <span class="comment">// Waits for this thread to die.</span></span><br><span class="line">            thread.join();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，<code>MyThread</code> 类表示线程的实现。在主线程中，我们创建 5 个线程并启动它们，然后依次调用每个线程的 <code>join()</code> 方法等待线程执行完毕。最后，当所有线程执行完毕时，主线程输出一条消息，并继续执行后续代码。</p><p>需要注意的是，<code>join()</code> 方法会阻塞当前线程，直到被等待的线程执行完毕。因此，在使用 <code>join()</code> 方法时要小心，以避免出现死锁等问题。</p><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>使用 <code>Future</code> 类也可以实现等待多个线程执行完毕。<code>Future</code> 是 Java 提供的一种异步计算的机制，可以在一个线程中调用另一个线程并等待其执行结果。具体来说，可以使用 <code>ExecutorService</code> 的 <code>invokeAll()</code> 方法启动多个线程，将返回的 <code>Future</code> 对象保存到一个列表中，然后调用每个 <code>Future</code> 对象的 <code>get()</code> 方法等待线程执行完毕。</p><p>下面是一个使用 <code>Future</code> 类实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException {</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        List&lt;Callable&lt;Void&gt;&gt; tasks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            Callable&lt;Void&gt; task = <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">            tasks.add(task);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        List&lt;Future&lt;Void&gt;&gt; futures = executor.invokeAll(tasks);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Void&gt; future : futures) {</span><br><span class="line">            <span class="comment">// Waits if necessary for the computation to complete,</span></span><br><span class="line">            <span class="comment">// and then retrieves its result.</span></span><br><span class="line">            future.get();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行后续代码</span></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Void&gt; {</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">call</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，<code>MyTask</code> 类表示线程的实现。在主线程中，我们使用 <code>ExecutorService</code> 的 <code>invokeAll()</code> 方法启动多个线程，并将返回的 <code>Future</code> 对象保存到一个列表中。然后，我们依次调用每个 <code>Future</code> 对象的 <code>get()</code> 方法等待线程执行完毕。最后，当所有线程执行完毕时，主线程输出一条消息，并继续执行后续代码。</p><p>需要注意的是，在使用 <code>Future</code> 类时要小心，以避免出现线程池满载等问题。在实际应用中，可以根据需要调整线程池大小或使用其他调度机制来处理大量的并发任务。</p><h2 id="wait-和notifyAll"><a href="#wait-和notifyAll" class="headerlink" title="wait()和notifyAll()"></a>wait () 和 notifyAll ()</h2><p>可以使用 Java 的 <code>wait()</code> 和 <code>notifyAll()</code> 方法来实现等待多个线程执行完毕。具体来说，可以在主线程中创建一个共享的计数器变量，每个线程在执行完毕后将计数器减一。当计数器为 0 时，说明所有线程执行完毕，可以调用 <code>notifyAll()</code> 方法唤醒主线程继续执行后续代码。</p><p>下面是一个使用 <code>wait()</code> 和 <code>notifyAll()</code> 方法实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">MyThread</span>(countDownLatch).start();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (countDownLatch) {</span><br><span class="line">            <span class="keyword">while</span> (countDownLatch.getCount() &gt; <span class="number">0</span>) {</span><br><span class="line">                countDownLatch.wait();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(CountDownLatch countDownLatch)</span> {</span><br><span class="line">            <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="keyword">synchronized</span> (countDownLatch) {</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                    countDownLatch.notifyAll();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，MyThread 类表示线程的实现。在主线程中，我们创建 5 个线程并启动它们，然后使用一个共享的计数器变量 countDownLatch 记录线程执行的状态。当每个线程执行完毕时，将计数器减一，并调用 notifyAll () 方法唤醒主线程。在主线程中，我们使用 wait () 方法等待所有线程执行完毕，直到计数器为 0。</p><p>P.S.：感觉这个实现有种莫名其妙的别扭感……</p><h2 id="CompletionService"><a href="#CompletionService" class="headerlink" title="CompletionService"></a>CompletionService</h2><p>使用 <code>CompletionService</code> 可以比较方便地实现等待所有线程执行完毕的功能。<code>CompletionService</code> 是 Java 提供的一个接口，它可以将任务提交给线程池执行，并在任务执行完毕后立即返回结果，从而实现异步执行和结果收集的功能。</p><p>具体来说，可以创建一个 <code>ExecutorService</code> 对象作为线程池，然后将任务提交给 <code>CompletionService</code> 执行。在提交任务时，可以使用 <code>submit()</code> 方法返回一个 <code>Future</code> 对象，用于后续获取任务执行的结果。使用 <code>CompletionService</code> 的 <code>take()</code> 方法可以等待任意一个任务执行完毕并返回结果，从而避免了使用 <code>join()</code> 方法等待所有线程执行完毕的阻塞等待。</p><p>下面是一个使用 <code>CompletionService</code> 实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        CompletionService&lt;Void&gt; completionService = <span class="keyword">new</span> <span class="title class_">ExecutorCompletionService</span>&lt;&gt;(executor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            completionService.submit(<span class="keyword">new</span> <span class="title class_">MyTask</span>());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="comment">// Retrieves and removes the Future representing the next completed task,</span></span><br><span class="line">            <span class="comment">// waiting if none are yet present.</span></span><br><span class="line">            completionService.take();</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + i + <span class="string">" has finished executing"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        executor.shutdown();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Void&gt; {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">call</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="线程的getState-方法"><a href="#线程的getState-方法" class="headerlink" title="线程的getState()方法"></a>线程的 getState () 方法</h2><p>除了 <code>CountDownLatch</code> 和 <code>Future</code> 类，还有其他实现方法。其中一个比较简单的方法是使用 Java 的线程状态<code>（Thread.State）</code>来判断所有线程是否执行完毕。</p><p>具体来说，可以将所有线程保存到一个列表中，然后在主线程中依次调用每个线程的 <code>getState()</code> 方法，检查线程状态是否为 <code>Terminated</code>。如果所有线程都已经执行完毕，则可以继续执行后续代码。</p><p>下面是一个使用线程状态实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        List&lt;MyThread&gt; threads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="type">MyThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">            thread.start();</span><br><span class="line">            threads.add(thread);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allThreadsFinished</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!allThreadsFinished) {</span><br><span class="line">            allThreadsFinished = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (MyThread thread : threads) {</span><br><span class="line">                <span class="keyword">if</span> (thread.getState() != Thread.State.TERMINATED) {</span><br><span class="line">                    allThreadsFinished = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，<code>MyThread</code> 类表示线程的实现。在主线程中，我们创建 5 个线程并启动它们，然后循环检查每个线程的状态，直到所有线程都执行完毕。在每次循环中，我们先将 <code>allThreadsFinished</code> 标志设为 <code>true</code>，然后依次检查每个线程的状态。如果有任何一个线程的状态不是 <code>Terminated</code>，则将 <code>allThreadsFinished</code> 标志设为 <code>false</code>，并跳出循环。等待一段时间后重新检查线程状态，直到所有线程都执行完毕。</p><p>需要注意的是，使用线程状态进行等待需要定期检查所有线程的状态，因此会占用一定的 CPU 资源。在实际应用中，可以根据需要调整等待的时间间隔以及检查的次数，以平衡等待时间和 CPU 资源的消耗。</p><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>使用 <code>CyclicBarrier</code> 也可以比较方便地实现等待所有线程执行完毕的功能。<code>CyclicBarrier</code> 是 Java 提供的一个同步辅助类，它可以让一组线程等待彼此达到某个共同的屏障点。</p><p>具体来说，可以创建一个 <code>CyclicBarrier</code> 对象，并指定需要等待的线程数量。每个线程在执行完自己的任务后，调用 <code>CyclicBarrier</code> 的 <code>await()</code> 方法，表示已经到达了屏障点。当所有线程都到达了屏障点后，<code>CyclicBarrier</code> 就会释放所有线程，从而实现等待所有线程执行完毕的功能。</p><p>下面是一个使用 <code>CyclicBarrier</code> 实现的示例代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="comment">// 创建 CyclicBarrier 对象，等待 5 个线程</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(</span><br><span class="line">                        <span class="number">5</span>,</span><br><span class="line">                        () -&gt; {</span><br><span class="line">                            <span class="comment">// 所有线程到达屏障点时执行的操作</span></span><br><span class="line">                            System.out.println(<span class="string">"All threads have finished executing."</span>);</span><br><span class="line">                        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyTask</span>(cyclicBarrier)).start();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyTask</span><span class="params">(CyclicBarrier cyclicBarrier)</span> {</span><br><span class="line">            <span class="built_in">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">            <span class="comment">// 等待所有线程执行完毕</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(<span class="string">"Thread "</span> + Thread.currentThread().getId() + <span class="string">" has finished executing."</span>);</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的示例代码中，<code>MyTask</code> 类表示线程的实现。在主线程中，我们创建一个 <code>CyclicBarrier</code> 对象，并指定需要等待的线程数量为 5。每个线程在执行完自己的任务后，调用 <code>CyclicBarrier</code> 的 <code>await()</code> 方法，表示已经到达了屏障点。当所有线程都到达了屏障点后，<code>CyclicBarrier</code> 就会执行屏障操作，这里是输出 <code>All threads have finished executing.</code>。</p><p>需要注意的是，如果其中一个线程在等待过程中被中断或者抛出异常，那么 <code>CyclicBarrier</code> 就会被破坏，所有线程都会被唤醒并抛出 <code>BrokenBarrierException</code> 异常。因此，在实现时需要捕获 <code>InterruptedException</code> 和 <code>BrokenBarrierException</code> 异常。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/">多线程</category>
      
      <category domain="https://www.boris1993.com/tags/%E9%9D%A2%E8%AF%95/">面试</category>
      
      <category domain="https://www.boris1993.com/tags/CountDownLatch/">CountDownLatch</category>
      
      <category domain="https://www.boris1993.com/tags/Future/">Future</category>
      
      
      <comments>https://www.boris1993.com/java-how-to-wait-for-threads-before-continuing.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>从字节码看 synchronized 关键字是怎么工作的</title>
      <link>https://www.boris1993.com/how-synchronized-works-in-java.html</link>
      <guid>https://www.boris1993.com/how-synchronized-works-in-java.html</guid>
      <pubDate>Wed, 05 Apr 2023 07:22:04 GMT</pubDate>
      
      <description>&lt;p&gt;昨天面试的时候被问到 Java 中的 &lt;code&gt;synchronized&lt;/code&gt; 关键字是什么原理，虽然凭着记忆打出来是通过控制对象头的 Monitor 来实现，但是毕竟没吃透这个知识点，还是没啥底气。干脆，这次就从字节码上看看，用了 &lt;code&gt;synchronized&lt;/code&gt; 关键字的方法，到底是怎么执行的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>昨天面试的时候被问到 Java 中的 <code>synchronized</code> 关键字是什么原理，虽然凭着记忆打出来是通过控制对象头的 Monitor 来实现，但是毕竟没吃透这个知识点，还是没啥底气。干脆，这次就从字节码上看看，用了 <code>synchronized</code> 关键字的方法，到底是怎么执行的。</p><span id="more"></span><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>说起 <code>synchronized</code> 的最简单的使用场景，我马上就想起双检单例模式。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Test INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Test</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Test.class) {</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) {</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="反编译成字节码"><a href="#反编译成字节码" class="headerlink" title="反编译成字节码"></a>反编译成字节码</h2><p>把 <code>Test</code> 类先编译了，然后用 <code>javap -c Test.class</code> 反编译，就能看到这个类的字节码了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"Test.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title function_">getInstance</span><span class="params">()</span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: getstatic     #<span class="number">7</span>                  <span class="comment">// 把静态变量INSTANCE加载到栈</span></span><br><span class="line">       <span class="number">3</span>: ifnonnull     <span class="number">37</span>                  <span class="comment">// 如果值不是null，那么跳转到标签37</span></span><br><span class="line">       <span class="number">6</span>: ldc           #<span class="number">8</span></span><br><span class="line">       <span class="number">8</span>: dup</span><br><span class="line">       <span class="number">9</span>: astore_0</span><br><span class="line">      <span class="number">10</span>: monitorenter                      <span class="comment">// 进入synchronized块</span></span><br><span class="line">      <span class="number">11</span>: getstatic     #<span class="number">7</span>                  <span class="comment">// 把静态变量INSTANCE加载到栈</span></span><br><span class="line">      <span class="number">14</span>: ifnonnull     <span class="number">27</span>                  <span class="comment">// 如果值不是null，那么跳转到标签27</span></span><br><span class="line">      <span class="number">17</span>: <span class="keyword">new</span>           #<span class="number">8</span>                  <span class="comment">// new一个Test对象</span></span><br><span class="line">      <span class="number">20</span>: dup</span><br><span class="line">      <span class="number">21</span>: invokespecial #<span class="number">13</span>                 <span class="comment">// 执行构造函数</span></span><br><span class="line">      <span class="number">24</span>: putstatic     #<span class="number">7</span></span><br><span class="line">      <span class="number">27</span>: aload_0</span><br><span class="line">      <span class="number">28</span>: monitorexit                       <span class="comment">// 退出synchronized块</span></span><br><span class="line">      <span class="number">29</span>: goto          <span class="number">37</span></span><br><span class="line">      <span class="number">32</span>: astore_1</span><br><span class="line">      <span class="number">33</span>: aload_0</span><br><span class="line">      <span class="number">34</span>: monitorexit</span><br><span class="line">      <span class="number">35</span>: aload_1</span><br><span class="line">      <span class="number">36</span>: athrow</span><br><span class="line">      <span class="number">37</span>: getstatic     #<span class="number">7</span>                  <span class="comment">// Field INSTANCE:LTest;</span></span><br><span class="line">      <span class="number">40</span>: areturn</span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">          <span class="number">11</span>    <span class="number">29</span>    <span class="number">32</span>   any</span><br><span class="line">          <span class="number">32</span>    <span class="number">35</span>    <span class="number">32</span>   any</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: getstatic     #<span class="number">14</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">       <span class="number">3</span>: ldc           #<span class="number">20</span>                 <span class="comment">// String test</span></span><br><span class="line">       <span class="number">5</span>: invokevirtual #<span class="number">22</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">       <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意看 <code>10: monitorenter</code> 和 <code>28: monitorexit</code> 这两条字节码，这就是 <code>synchronized</code> 关键字实际做了的事。</p><h2 id="Java对象头和Monitor"><a href="#Java对象头和Monitor" class="headerlink" title="Java对象头和Monitor"></a>Java 对象头和 Monitor</h2><p>要说明白 <code>monitorenter</code> 和 <code>monitorexit</code> 实际干了点啥，那就得先整明白 Java 对象的对象头。</p><p>一个 Java 对象，在内存中的布局包括三块区域：对象头、实例数据、和对齐填充。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mJlPN_XZflr3bMAQG1zItGdUVyUevoDRIDGJ8R8FyvKK1HBlLASjDgpQ4w_M_V1BlNwIxbTJiHZB5hydJz_ZlReZX6D8QI0c0e11U68OYctG0iVdow8oqMqRK6dZXaK3Z9z2107BbiYNzt7fu_DgGnnXz_ZwbeCX80Jf7UWf5pmcIgRMDxjfLxkv_1iWA1vUB?width=1024&amp;height=679&amp;cropmode=none"></p><p>别的东西咱们先不看，只看对象头这部分。对象头的最后 2bit 就存储了锁的标志位。</p><p>至于 Monitor，Java 官方文档是这么描述的：</p><blockquote><p>Synchronization is built around an internal entity known as the intrinsic lock or monitor lock. (The API specification often refers to this entity simply as a “monitor.”) Intrinsic locks play a role in both aspects of synchronization: enforcing exclusive access to an object’s state and establishing happens-before relationships that are essential to visibility.</p><p>Every object has an intrinsic lock associated with it. By convention, a thread that needs exclusive and consistent access to an object’s fields has to acquire the object’s intrinsic lock before accessing them, and then release the intrinsic lock when it’s done with them. </p><p>同步是围绕着一个名为 “内在锁” 或 “monitor 锁” 的机制构建的。（API 规范文档中，通常会称其为 “monitor”）<br>内在锁一方面保证了针对一个对象的专属访问权限，另一方面保证了对可见性很重要的 happens-before 原则。<br>每个对象都会有一个与其相关联的内在锁。按照约定，如果一个线程需要持续持有对一个对象的独家访问权限，那么这个线程必须先获得到这个对象的内在锁，然后在执行完毕后释放掉这个内在锁。</p></blockquote><p>代码执行到 <code>monitorenter</code> 指令，说明开始进入 <code>synchronized</code> 代码块，这时候 JVM 会尝试获取这个对象的 <code>monitor</code> 所有权，即尝试加锁；而执行到 <code>monitorexit</code> 指令，就说明要么 <code>synchronized</code> 代码块执行完毕，要么代码执行的时候抛出了异常，这时候 JVM 就会释放这个对象的 <code>monitor</code> 所有权，即释放锁。</p><h2 id="继续深入细节"><a href="#继续深入细节" class="headerlink" title="继续深入细节"></a>继续深入细节</h2><p>上面说的也是云里雾里的，咱继续往深处挖，看看具体的实现。</p><p><code>Monitor</code> 这个东西，看 Java 源码找不到，得找虚拟机的 C++ 源码。比如我们常用的 HotSpot 虚拟机中，<code>Monitor</code> 是由 <code>ObjectMonitor</code> 类实现的：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了解释方便，仅抄录了相关的代码，并重排了位置</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectMonitor</span> {</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">ObjectMonitor</span>() {</span><br><span class="line">            _header       = <span class="literal">NULL</span>;</span><br><span class="line">            _count        = <span class="number">0</span>;</span><br><span class="line">            _waiters      = <span class="number">0</span>,</span><br><span class="line">            _recursions   = <span class="number">0</span>;</span><br><span class="line">            _object       = <span class="literal">NULL</span>;</span><br><span class="line">            _owner        = <span class="literal">NULL</span>;</span><br><span class="line">            _WaitSet      = <span class="literal">NULL</span>;</span><br><span class="line">            _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">            _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">            _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">            _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">            FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">            _EntryList    = <span class="literal">NULL</span> ;</span><br><span class="line">            _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">            _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">            OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">            _previous_owner_tid = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">intptr_t</span>  _count;          <span class="comment">// reference count to prevent reclaimation/deflation</span></span><br><span class="line">                                            <span class="comment">// at stop-the-world time.  See deflate_idle_monitors().</span></span><br><span class="line">                                            <span class="comment">// _count is approximately |_WaitSet| + |_EntryList|</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等待锁的线程会被封装成ObjectWaiter对象</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="type">void</span> *  <span class="keyword">volatile</span> _owner;                <span class="comment">// 一个指针，指向当前拥有锁的线程</span></span><br><span class="line">        ObjectWaiter * <span class="keyword">volatile</span> _WaitSet;       <span class="comment">// 一个队列，保存着waiting状态的线程</span></span><br><span class="line">        ObjectWaiter * <span class="keyword">volatile</span> _EntryList ;    <span class="comment">// 一个队列，保存着因等待锁而被阻塞的线程</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当多个线程同时访问一段 <code>synchronized</code> 代码时，会发生这些操作：</p><ul><li>线程首先会进入<code>_EntryList</code>，在该线程获取到对象的 <code>monitor</code> 之后，<code>_owner</code> 会指向这个线程，然后<code>_count</code> 计数器加一。<ul><li>如果得到 <code>monitor</code> 的这个线程调用了 <code>wait()</code> 方法，那么这个线程将会释放掉 monitor 的所有权，<code>_owner</code> 变量变回 NULL，<code>_count</code> 计数器也会减一，同时这个线程会进入<code>_WaitSet</code> 等待被唤醒。</li><li>如果这个线程执行完毕，那么它也将释放 <code>monitor</code>，并复位<code>_count</code> 的值，这样其他的线程也就可以获得 <code>monitor</code> 来加锁了。</li></ul></li><li>上一个线程释放掉 <code>monitor</code> 后，<code>_EntryList</code> 中的线程就会开始争抢 <code>monitor</code>，具体哪个线程能成功得到 <code>monitor</code> 是不确定的。</li></ul><p>而正因为 Monitor 对象存在于每个 Java 对象头的 <code>mark word</code> 中，所以每个 Java 对象都可以用作锁。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9keW1hbnp5LmdpdGh1Yi5pby8yMDE3LzA4LzA3L3N5bmNocm9uaXplZCVFNCVCOCU4RSVFNSVBRiVCOSVFOCVCMSVBMSVFNyU5QSU4NE1vbml0b3Iv">synchronized 与对象的 Monitor<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2Vzc2VudGlhbC9jb25jdXJyZW5jeS9sb2Nrc3luYy5odG1s">Intrinsic Locks and Synchronization<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNjQwMTk3NTEzMjMw">啃碎并发（七）：深入分析 Synchronized 原理<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pldEJyYWlucy9qZGs4dV9ob3RzcG90L2Jsb2IvbWFzdGVyL3NyYy9zaGFyZS92bS9ydW50aW1lL29iamVjdE1vbml0b3IuaHBwI0wxNDQtTDE2Mg==">objectMonitor.hpp - JetBrains/jdk8u_hotspot<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTY1NTU1NDIvd2h5LWRvLXdlLW5lZWQtdG8tY2FsbC1tb25pdG9yZXhpdC1pbnN0cnVjdGlvbi10d2ljZS13aGVuLXdlLXVzZS1zeW5jaHJvbml6ZWQ=">Why do we need to call ‘monitorexit’ instruction twice when we use ‘synchronized’ keyword? - StackOverflow<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/">面试问题</category>
      
      <category domain="https://www.boris1993.com/tags/syncronized/">syncronized</category>
      
      
      <comments>https://www.boris1993.com/how-synchronized-works-in-java.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>100 块自制短信转发器</title>
      <link>https://www.boris1993.com/building-a-sms-forwarder-with-air780e.html</link>
      <guid>https://www.boris1993.com/building-a-sms-forwarder-with-air780e.html</guid>
      <pubDate>Tue, 21 Mar 2023 08:42:17 GMT</pubDate>
      
      <description>&lt;p&gt;迫于手上有张 KnowRoaming 的卡用来收短信，但是为了这玩意再照顾个手机又很烦，正好看到合宙有卖 4G 模块，还有人已经实现了短信转发功能。本着生命在于折腾的精神，果断下单了一张开始搞。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>迫于手上有张 KnowRoaming 的卡用来收短信，但是为了这玩意再照顾个手机又很烦，正好看到合宙有卖 4G 模块，还有人已经实现了短信转发功能。本着生命在于折腾的精神，果断下单了一张开始搞。</p><span id="more"></span><h2 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h2><ul><li>Air780E + ESP32S3 套餐 - ￥66.80</li></ul><p>因为 KnowRoaming 手机卡只能收短信，不能发短信，也没有数据流量，而 Air780e 正好不支持连接 Wi-Fi，所以需要搭配 ESP32S3。ESP32S3 用来连接 Wi-Fi，并作为主控板，通过 UART 来连接和驱动 Air780e。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4m3ffW5qZTQ2rAw_So1MVEVk2D346B4j5ceXJEslimdEqc0jUTKktdi-WQk8I2wt2Uw4GtMouYxH6Acm0ZF_Es8L55UUKaI5ii5m-JpQyurj44itfnUmj5OHdFA4sHkpDPJRKvCrH0jKVd-CPdH6DWNrH_hDAooSC0PSubkoCgneYBBEG9LXhRCR_lramsKMNR?width=1170&amp;height=582&amp;cropmode=none"></p><ul><li>16pin 排母 - ￥15</li></ul><p>合宙只给送了排针，没有排母（甚至不卖这玩意），但是直接把 ESP32S3 和 Air780e 焊死显然不合适，所以只能自己再买排母。￥15 一盒里面有 5 对，所以实际分摊下来只有￥3。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mmrRat9tl7GSoPdysg_xRPtcUDip1EVZyGW4eI1_mTm9tc1eadnie1mrbyavrgCr6ovUaqhyyTMMftxzKNbNF25JfjF9FQZZpq8RkG4ixqhJqPjmj3vddAqdfvgND3TMI81lIyp2DI5rn5Pd0AGtBVlg6BeBAOr5v-zgP1MBPE8d4NPDw5WlgVokpDF0vRBQT?width=1170&amp;height=552&amp;cropmode=none"></p><ul><li>USB Type-C 转 Type-B 双公头转接头 - ￥9.9</li></ul><p>开发过程中可以用线凑合，但是我最后打算直插在 UPS 的 USB 口上，所以转换头必不可少。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4m3waUyNRufhUN4GQRjFhPgIa81ZFfL8CtWZPgc-bjl7eTyDGH06hKKtXyhuUnViaN3qGk-_sCZaH5m5S8e4XXfoy6BGu10ax8HvGY3o0BZwmxyz2T0Pqm7tpLE4KiIpant2cCHfoHPC9shzB1iwJf1H33gtUq-2LXHL79a0xkryIGBVnUd3oVVAtpU9vsZxxW?width=1170&amp;height=556&amp;cropmode=none"></p><ul><li>找师傅焊接的手工费 - ￥50</li></ul><p>这没啥说的，自己又没有电烙铁又没这技术，就找了个修手机的铺子，让老板帮忙焊的。老板一边焊，一边说他这含银焊锡用在这上面都浪费……</p><h2 id="焊接和组装"><a href="#焊接和组装" class="headerlink" title="焊接和组装"></a>焊接和组装</h2><p>先上个全家福～</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mJTU5hH8wXN7V7EMiogIs0pIOvZLnpyfvxmVuXeFIhaz8FT-t83j4mgtEd6rdYTV2f45MluyKOHTxGMClHFjqS1RrM4M6RHIWliw8OLMStRdEABl_GJALBzHqHUZymCt5_52Q_aNbHENmOJL4gCT-myTmOHECwozUZRh9Gi_1dvJ66yvdQ_BF74MNmAC-3Wt3?width=4032&amp;height=2268&amp;cropmode=none"></p><p>焊排针和排座没啥好说的，就照着下图的样子焊就行。</p><table><thead><tr><th>ESP32S3</th><th>Air780e</th></tr></thead><tbody><tr><td><img data-src="https://bn02pap001files.storage.live.com/y4mYXZUT5Glc_-VMyJatUu4x0cC0RPhTQhVQiqn3sNu4zHQamUPVbOFsXl-9Le0Bk4lwOgtb5NVrM_9gFPDOx-YSlHXnfnwmurDNKsL2iIqrHxRjbwOyhOwtc0M8F3Q5ygpAKiXiAICLb71AAIdqS7Hm5sZjaFrNtAOqSB393fiK0UKrP2sAeBgz0PahSBQGfaC?width=4032&amp;height=2268&amp;cropmode=none"></td><td><img data-src="https://bn02pap001files.storage.live.com/y4msiuXyUXcrmuzX874xutVun7exA7KyxIQQ147xcdWw6ks26HQTI0-swoFKsFv2tkccIa7Xx6_w0GEromGRySofIboR1R299prrb2ILX9Oyoyu9fJEUdVbNVfkh0qrMkEY3Xz92133AzgX376Fyf53927O4yoDHdaM8lXV3S5QstwNVbsg0s3pMj48TxH_II_q?width=4032&amp;height=2268&amp;cropmode=none"></td></tr></tbody></table><p>另外因为 Air780e 默认不会上电自动开机，所以还要把 PWR 键上方的焊盘短接来让它通电就自动开机。（暂且借<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hlbnh1YmxvZy5jb20vMjAyMi8xMC8yOC8xOS05LXNtcy1mb3J3YXJkaW5nLWFpcjc4MGUtZXNwMzJjMy5odG1s">晨旭的博客<i class="fa fa-external-link-alt"></i></span>中的图片，因为我焊的时候忘了这茬了……）</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mYJtjimcJs4eh7uL09yyrSm6GR8Flo1LNgGqttmcVejkAwzGF5EbV0UI3MWYZdEeRJNLXFhOLY4WjsedlvbDmuSunwROOIM131CqQZsi2GZ9ruuwNa3wMGCD01XIXL13MOJciWISPcILsPrVBwyjwpItHFBW8YiLzlyeaX6eSd84T1ssPtuqD9DdjOrkZLcJu?width=800&amp;height=600&amp;cropmode=none"></p><p>然后 SIM 卡芯片朝板子，缺口朝内，插进 Air780e 的 SIM 卡槽。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4m_uQGI0zNI14XFmfuxOn-Z_m9Ls69Zfg8y-sbI5LwCbde16Jlhq3nR_MZgEvFeFIYwb9N2_4HAEMMw56QF191GivhED8khOdg5VS7cDE-Wx4YTn8wanoMqgkIVKFRmHW2s3EbDOP1-1Aqu3kP5wonT3ozgitJ4fKvet1rfjBFQo_fDakXJy3UjIiNPmsdfsOw?width=4032&amp;height=2268&amp;cropmode=none"></p><p>最后按照如图的方向把排针对其插上就组装好了。一定要注意方向，毕竟有 5V 供电的针脚，插反了把 5V 怼到 GND 上会发生什么就不好说了，或许可以参考伊朗电工 Mehdi Sadaghdar 的各种作死实战。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mbH1M2d5MBD9PhNItSZikKyo_iDZUFpj_y-Jt3r3a1aBu3Z6ASm_bfBMKbQ7runkwgIaBWjaS4j_6IKPOFn8JApd7zvmTgHA0okV3zfNQniAWe2Jwub8ZTVQaw_uJKC9Lbs57Ut4m9RdbQN7p_2Y-TZ8OA2EkogZ34BwbkxbPqQQ_DUW-VQMnntJuW1fbpvlM?width=4032&amp;height=2268&amp;cropmode=none"></p><h2 id="刷机和测试"><a href="#刷机和测试" class="headerlink" title="刷机和测试"></a>刷机和测试</h2><p>ESP32S3 接上 USB 转换头，再插到电脑上，就可以愉快的刷机了。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9zbXNfZm9yd2FyZGVyX2Fpcjc4MF9lc3AzMg==">代码我已经写好并发布在 GitHub 上面了<i class="fa fa-external-link-alt"></i></span>，下载下来，照着<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9zbXNfZm9yd2FyZGVyX2Fpcjc4MF9lc3AzMi9ibG9iL21hc3Rlci9SRUFETUUubWQjJUU0JUJGJUFFJUU2JTk0JUI5JUU4JTg0JTlBJUU2JTlDJUFDJUU1JTg4JUI3JUU1JTg1JUE1ZXNwMzI="> README 里面刷机的部分<i class="fa fa-external-link-alt"></i></span>改好代码，用合宙的 <code>LuaTools</code> 刷进去，就可以了。注意板子的固件要用我的 repo 里面的，<code>LuaTools</code> 提供的固件刷进去之后可用内存不够，会发不出去 HTTP 请求。如果不会刷机，可以看看<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMU1xNHkxZTdFYi8/cD0zJnZkX3NvdXJjZT1lOTE3ZGMyYmIyZTI2MDZjYzQ5MTdkNTM1MTNhNmJlNg=="> ESP32C3 烧录教程<i class="fa fa-external-link-alt"></i></span>。</p><p>刷完机板子会自动重启，这时候可以观察板子上面指示灯的状态，或者直接在 <code>LuaTools</code> 里面看日志，来看板子的初始化状态。LED 灯各种状态的含义也可以看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9zbXNfZm9yd2FyZGVyX2Fpcjc4MF9lc3AzMi9ibG9iL21hc3Rlci9SRUFETUUubWQjbGVkJUU3JTgxJUFGJUU3JThBJUI2JUU2JTgwJTgxJUU1JTkwJUFCJUU0JUI5JTg5"> README 里面的解释<i class="fa fa-external-link-alt"></i></span>。</p><p>等板子初始化完成之后，就可以给这个手机号发短信了，板子收到短信后就会把发信号码和短信内容发送到配置的通知通道。开发的时候我已经测试过普通短信、长短信、中文、英文、日语，都可以正常接收。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4m1pqzHDqg0DGRJxRh0OrskxVfIwscr8sx9sGA2s7zMaqpoLzhx9xpzQ6P64l7i8aQGU7SAQbm1ZyP8rskIkSqIiyCzQ8tBDlhV9uL7O4elH7UnqibJjcysWZkrs8BpSxxm9ZqZX9V9hLM2XTOz-jCflj3ACW0-lnOKx0IULv8BA32U_tuBnF7QzKvMYLsxSLm?width=1170&amp;height=2429&amp;cropmode=none"></p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/LuatOS/">LuatOS</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%90%88%E5%AE%99/">合宙</category>
      
      <category domain="https://www.boris1993.com/tags/%E7%9F%AD%E4%BF%A1%E8%BD%AC%E5%8F%91/">短信转发</category>
      
      <category domain="https://www.boris1993.com/tags/Air780E/">Air780E</category>
      
      <category domain="https://www.boris1993.com/tags/ESP32S3/">ESP32S3</category>
      
      
      <comments>https://www.boris1993.com/building-a-sms-forwarder-with-air780e.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>为了改桥接，我决定破解中兴 F450G V2 光猫</title>
      <link>https://www.boris1993.com/hacking-zte-f450g-v2-onu.html</link>
      <guid>https://www.boris1993.com/hacking-zte-f450g-v2-onu.html</guid>
      <pubDate>Thu, 16 Mar 2023 05:13:37 GMT</pubDate>
      
      <description>&lt;p&gt;还记得我&lt;a href=&quot;/setting-up-microserver-gen8-routeros.html&quot;&gt;之前买了个猫棒来替换光猫&lt;/a&gt;么？用了一个来月，发现这玩意真的不稳定，短则几分钟长则一两天它必定自己重启一次，导致我的网络时不时就会断线。这玩意不好使，我也没有别的光猫，只好找电信装维师傅给我改桥接。可哪成想一个师傅踢皮球让我找另一个师傅，另一个一听我说是&lt;code&gt;悦me&lt;/code&gt; 直接就说不能改，只有 SDN 光猫能改。那你们逼我的，我自己改。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>还记得我<a href="/setting-up-microserver-gen8-routeros.html">之前买了个猫棒来替换光猫</a>么？用了一个来月，发现这玩意真的不稳定，短则几分钟长则一两天它必定自己重启一次，导致我的网络时不时就会断线。这玩意不好使，我也没有别的光猫，只好找电信装维师傅给我改桥接。可哪成想一个师傅踢皮球让我找另一个师傅，另一个一听我说是<code>悦me</code> 直接就说不能改，只有 SDN 光猫能改。那你们逼我的，我自己改。</p><span id="more"></span><h2 id="光猫信息"><a href="#光猫信息" class="headerlink" title="光猫信息"></a>光猫信息</h2><p>我的这款光猫是 <code>EPON上行悦me网关</code>，型号是<code>中兴 ZXHN F450G</code>，区域是上海，硬件版本 <code>V2.0</code>。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mNgsMfWdJKmlhsgSrqeZWK0mKH_TgCGVDEdK8kX_MIE8gqzY4ot_iHpIQAQiySaKP29vol9gDbsgmqtMLEmNaFyabdBXWNjZqLg1QzLmxelO84UOaTHihLHlxSL3qSP55BF_5XnKNmGhYd7kkKPkXNc9GEm7gN9kIzmXhLEdObnvTGRVvFqeOh48xdcRu7CND?width=820&amp;height=534&amp;cropmode=none"></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>开始折腾光猫之前，一定要把当前光猫里存的配置备份好，尤其是 <code>LOID</code>，万一折腾砸了，还可以改回去，或者重新注册，让局端重新下发正确的配置。我已经有了 <code>telecomadmin</code> 的密码，就直接登进后台，把配置抄了下来。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mVnQlHFkLSM7uJBFTkALON8nMwnAxhwDkgo4GE4jb1TFbnUrA9B4y0ZASfZLD0e3UIMXZuz68IKN0dnFibZwRX3Pyama625xaQ__T4b6ldYeCUeRuxsUKN5yUlrb1k5Hm5YIMrf741-i9rKPeFS71mwcoFFs8b1EmG17iDvxHReZsg1cc9WoA_bhG3p7yhXO3?width=1088&amp;height=690&amp;cropmode=none"></p><h2 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h2><blockquote><p>首先我要大力感谢这篇帖子，那天我就是照着这里面的内容操作的。<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hpbmFkc2wubmV0L3RocmVhZC0xMjc2NjYtMS0xLmh0bWw=">https://www.chinadsl.net/thread-127666-1-1.html<i class="fa fa-external-link-alt"></i></span></p></blockquote><h3 id="复位光猫，开启telnet"><a href="#复位光猫，开启telnet" class="headerlink" title="复位光猫，开启telnet"></a>复位光猫，开启 telnet</h3><p>首先，拔掉光纤，用细针捅住光猫后面的复位孔，直到光猫前面板下方的两个灯都熄灭，只剩下上面的电信 logo 亮着，以彻底复位光猫。这一步是为了重新打开 telnet，因为这个光猫在插上光纤之后 telnet 就会被禁用，只有拔掉光纤并彻底复位才能再把 telnet 打开。</p><p>复位后光猫会自动重启，拿根网线，把电脑接上光猫的 LAN 口（别接 LAN 2，那是给 IPTV 用的），电脑设定静态 IP 地址 <code>192.168.1.100</code>（其实除了 <code>192.168.1.1</code> 之外，整个 <code>192.168.1.0/24</code> 网段随便你选），子网掩码 <code>255.255.255.0</code>。</p><p>接下来持续 <code>ping 192.168.1.1</code>，光猫启动好之后会有响应，接下来用 telnet 连接 192.168.1.1，使用用户名 <code>root</code> 和密码 <code>Zte521</code> 登进光猫 shell。</p><h3 id="需要通过telnet做的配置"><a href="#需要通过telnet做的配置" class="headerlink" title="需要通过telnet做的配置"></a>需要通过 telnet 做的配置</h3><p>首先用以下命令实现在光纤插入后 telnet 仍然可用。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开telnet</span></span><br><span class="line">sendcmd 1 DB <span class="built_in">set</span> TelnetCfg 0 TS_Enable 1</span><br><span class="line"><span class="comment"># 允许局域网登陆</span></span><br><span class="line">sendcmd 1 DB <span class="built_in">set</span> TelnetCfg 0 Lan_Enable 1</span><br><span class="line"><span class="comment"># 插上光纤后不关闭telnet</span></span><br><span class="line">sendcmd 1 DB <span class="built_in">set</span> TelnetCfg 0 Lan_EnableAfterOlt 1</span><br><span class="line"><span class="comment"># 最多允许5个用户同时登陆telnet，避免自己被锁在外面</span></span><br><span class="line">sendcmd 1 DB <span class="built_in">set</span> TelnetCfg 0 Max_Con_Num 5</span><br><span class="line"><span class="comment"># 打开23端口</span></span><br><span class="line">sendcmd 1 DB <span class="built_in">set</span> PortControl 3 PortEnable 1</span><br><span class="line"><span class="comment"># 保存配置</span></span><br><span class="line">sendcmd 1 DB save</span><br></pre></td></tr></tbody></table></figure><p>然后可以用 <code>sendcmd 1 DB p TelnetCfg</code> 确认下配置。后面的操作也可以用 <code>sendcmd 1 DB p 表名</code>这条命令确认配置，就不再重复了。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Tbl</span> <span class="attr">name</span>=<span class="string">"TelnetCfg"</span> <span class="attr">RowCount</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Row</span> <span class="attr">No</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"TS_Enable"</span> <span class="attr">val</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"Wan_Enable"</span> <span class="attr">val</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"Lan_Enable"</span> <span class="attr">val</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"TS_Port"</span> <span class="attr">val</span>=<span class="string">"23"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"TSLan_Port"</span> <span class="attr">val</span>=<span class="string">"23"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"TS_UName"</span> <span class="attr">val</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"TS_UPwd"</span> <span class="attr">val</span>=<span class="string">"Zte521"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"TSLan_UName"</span> <span class="attr">val</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"TSLan_UPwd"</span> <span class="attr">val</span>=<span class="string">"Zte521"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"Max_Con_Num"</span> <span class="attr">val</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"ProcType"</span> <span class="attr">val</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"Lan_EnableAfterOlt"</span> <span class="attr">val</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"TS_Sprtwl_Mode"</span> <span class="attr">val</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DM</span> <span class="attr">name</span>=<span class="string">"WanWebLinkToTS"</span> <span class="attr">val</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Tbl</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后禁用掉 TR069。电信局端通过 TR069 协议下发配置，而我们自己改的桥接肯定跟局端的配置不一样，不关掉这玩意相当于白忙活。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用TR069的58000端口</span></span><br><span class="line">sendcmd 1 DB <span class="built_in">set</span> PortControl 6 PortEnable 0</span><br><span class="line">sendcmd 1 DB save</span><br></pre></td></tr></tbody></table></figure><p>虽然原帖中说还要把远程管理配置乱改以斩草除根，我是懒得改，应该关了端口就行，因为一来直到现在一个星期了我的配置都还在，二来重新设备注册的时候也会卡在<code>等待ITMS下发配置</code>，所以 TR069 应该是已经被掐了。</p><p>然后需要骗过光猫，让它认为 ITMS 下发配置已经成功。一开始搞的时候没做这一步，就发现过几分钟网页就打不开，nslookup 一下发现解析全去了 192.168.1.1，又打开个网站说试试，结果直接被光猫劫持到了设备注册页面。直接在光猫的表里面改掉 ITMS 状态，再清理 DNS 缓存之后就正常了。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sendcmd 1 DB <span class="built_in">set</span> PDTCTUSERINFO 0 Status 0</span><br><span class="line">sendcmd 1 DB <span class="built_in">set</span> PDTCTUSERINFO 0 Result 1</span><br><span class="line">sendcmd 1 DB save</span><br></pre></td></tr></tbody></table></figure><p>接下来改掉光猫的最大用户数。其实要改桥接的话，这个改不改都没关系，反正我也不用光猫上网。但还是顺手改了。也不需要改什么最大用户数，直接关掉限制完事。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sendcmd 1 DB <span class="built_in">set</span> CltLmt 8 Enable 0</span><br><span class="line">sendcmd 1 DB save</span><br></pre></td></tr></tbody></table></figure><p>至此 telnet 里面要搞的东西就都搞完了。虽然原帖里面还提到改掉 <code>telecomadmin</code> 的密码，但是既然 TR069 都废了，密码自然也不会再变。正好之前从装维师傅那要到的密码还能用，我也懒得再改。</p><h3 id="登进后台配桥接"><a href="#登进后台配桥接" class="headerlink" title="登进后台配桥接"></a>登进后台配桥接</h3><p>插上光纤，用 telecomadmin 登进光猫后台。先看一眼<code>网关注册信息</code>，因为光猫复位不会丢 LOID，所以插上光纤之后，<code>光路（OLT）认证</code>应该就是认证成功的状态；而上面在 telnet 里面也改掉了 ITMS 认证状态，所以<code>管理（ITMS）注册</code>也应该是注册成功的状态。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mXE2I0zdJz-5avLM5uYDkkKSXx1VzZaanNNhj5WCoe1UT6WfUXtKS0NxRvUKpUYaj6TNxjPNVFh0cXUjBi7WXGrUdE35vqEpxpr5JUJbuJa1x190vEU0fcJi5ODJgsnm3Koc3c58zhl-V0HUK76Kd1C56FpWX2o7UAByZCnl-PybyUUtGHBiFlDaF4nCgOzLb?width=808&amp;height=264&amp;cropmode=none"></p><p>进入<code>网络</code>的<code>网络设置</code>，点开<code>连接名称</code>下拉菜单，看有没有 <code>INTERNET_B_VID</code>，如果有，而且连接模式是<code>路由</code>，那就删了它。然后下拉菜单选<code>新建WAN连接</code>，连接模式选<code>桥接</code>，业务类型选<code>上网</code>，IP 模式选 <code>IPv4&amp;IPv6</code>，点保存，光猫端就配置完成了。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4m-Iqy5cSnmCKZzuIbUaXA2Ar41HxY6j4kL4o2Mlj2CAbTuOz6ybMGkFGAepmWJEGc5GZpPUDCqTkT0ZapY8c_IGkN1gh8wL2YsskFVRTRDv3QEQHToM2RzBlXjuDgGI4a6_7ylntiQkYOhdtLbZ2PmIh4OikvDY5VaWzOAK0_FnNbebPHeuedXDUVkZHfaIyh?width=954&amp;height=540&amp;cropmode=none"></p><h2 id="齐活"><a href="#齐活" class="headerlink" title="齐活"></a>齐活</h2><p>到这光猫就改好桥接了，从光猫上扯根网线连上自己的路由器拨号，就可以上网了。正好改完桥接那天，RouterOS 有更新，看 PPPoE 接口的 uptime 可以看出来，从 RouterOS 重启之后到现在，链接就没断过。之前用猫棒的时候，uptime 就没多于过 2 天。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mTLQf6UNyRnLV9DHNP2PxhSjQYcs4UP_UqlMErnvS9gIBK0oNXSYV0fNEQlipq96QJvfZVVmp4relM5_UmmzE1PE5Fu62rYkIlAZWYe_7i4CSKQ1sbERcrdFtVi6EVwMqAXfcCGKD5LcFk16ObaNrbvEwvH5CnNC_-4E5LShkIUrPBoTotT7XElzQEB_KpoDb?width=1058&amp;height=586&amp;cropmode=none"></p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/%E5%85%89%E7%8C%AB/">光猫</category>
      
      <category domain="https://www.boris1993.com/tags/%E6%A1%A5%E6%8E%A5/">桥接</category>
      
      <category domain="https://www.boris1993.com/tags/F450G/">F450G</category>
      
      
      <comments>https://www.boris1993.com/hacking-zte-f450g-v2-onu.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Floyd 和 Brent 判圈算法</title>
      <link>https://www.boris1993.com/floyd-and-brent-cycle-detection-algorithm.html</link>
      <guid>https://www.boris1993.com/floyd-and-brent-cycle-detection-algorithm.html</guid>
      <pubDate>Sun, 26 Feb 2023 08:28:53 GMT</pubDate>
      
      <description>&lt;p&gt;今天刷&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbGlua2VkLWxpc3QtY3ljbGUvZGVzY3JpcHRpb24v&quot;&gt; 141. Linked List Cycle&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;和&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbGlua2VkLWxpc3QtY3ljbGUtaWkvZGVzY3JpcHRpb24v&quot;&gt; 142. Linked List Cycle II&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;学到了两个新的判断链表是否存在环的算法 - &lt;code&gt;Floyd龟兔赛跑算法&lt;/code&gt;和 &lt;code&gt;Brent判圈算法&lt;/code&gt;。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>今天刷<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbGlua2VkLWxpc3QtY3ljbGUvZGVzY3JpcHRpb24v"> 141. Linked List Cycle<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbGlua2VkLWxpc3QtY3ljbGUtaWkvZGVzY3JpcHRpb24v"> 142. Linked List Cycle II<i class="fa fa-external-link-alt"></i></span>学到了两个新的判断链表是否存在环的算法 - <code>Floyd龟兔赛跑算法</code>和 <code>Brent判圈算法</code>。</p><span id="more"></span><h2 id="Floyd龟兔赛跑算法"><a href="#Floyd龟兔赛跑算法" class="headerlink" title="Floyd龟兔赛跑算法"></a>Floyd 龟兔赛跑算法</h2><p>这个算法的核心思想是，如果有限状态机、迭代函数或者链表上存在环，那么在某个环上以不同速度前进的两个指针必定在某个时间会相遇。也就是说，对于一个链表，可以分别使用两个指针进行遍历，慢指针一次走一步，快指针一次走两步，如果快慢指针相遇了，那么说明链表中存在环。</p><p>当发现有环之后，让快指针停止，慢指针从当前位置继续向前遍历，并计算走过的步数。在慢指针与快指针再次相遇之后，慢指针走过的步数，就是环的长度。</p><p>如果要计算环的入口，那么可以将一个指针移动到链表的起点，另一个指针不动，然后使两个指针每次同时向前走一步，当二者再次相遇的时候，指针所在的位置就是环的起点。至于这个操作的原理，原谅我数学很差，想不明白，所以借<span class="exturl" data-url="aHR0cHM6Ly94eXpnaGlvLnh5ei9DeWNsZURldGVjdGlvbi8=">浅谈判圈算法 - xyZGHio<i class="fa fa-external-link-alt"></i></span>一文中的解释：</p><blockquote><p>这里令起始处为 A、环的入口处为 B，在判断是否有环阶段时快慢相遇之处为 C。并记 AB 长度为 a、记 BC 长度为 b、环的长度为 r。且在判断是否有环过程中，快指针每次走 2 步、慢指针每次走 1 步。则快、慢指针相遇时，快指针走过的长度是慢指针走过长度的 2 倍。<br><img data-src="https://bn02pap001files.storage.live.com/y4meNn3qzukncuG0D2jUot5QTKmhydUE94J4pjHJR3LqSYP3hHmlkL6gDUdu2wxE_KkOF2c4k8n7D8kAHJGqpH9ZBsg1-yO_dZV7CMqVPw_E5CjVsoXuDBWgytwqCw4hmZIdTr22A2bJHxD33HY0LTSdVUau0KLK_qPVvDrP8XN6yIXXADhhUs5egAruxLyND3x?width=1363&amp;height=787&amp;cropmode=none"><br>此时不难看出，当快、慢指针相遇时，快、慢指针走过的长度均是环长度的整数倍。故如果期望找到环的入口位置，即 B 处。则只需在两个指针相遇之时，将其中任意一个指针放置到起始处 A，而另一个指针依然位于相遇处 C。然后两个指针按照每次均走 1 步的速度向前走，当二者再次相遇之时，即是 B 处。<br>原因在于，对于相遇后继续往前走的指针而言，由于其已经走过了若干圈环的长度，此时只需再走 a 步即可到达环的入口。这个地方换个角度想会更容易理解，如果该指针先走 a 步再走若干圈环的长度，其必然位于环的入口处；而对于相遇后从起始处 A 开始走的指针而言，其显然走 a 步后，必然也会位于环的入口处。故此时两个指针第二次相遇之时，说明他们均已经走完 a 步。即到达环的入口处。</p></blockquote><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://leetcode.com/problems/linked-list-cycle-ii</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找环的入口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">intersect</span> <span class="operator">=</span> getIntersect(head);</span><br><span class="line">        <span class="keyword">if</span> (intersect == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">ptr1</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">ptr2</span> <span class="operator">=</span> intersect;</span><br><span class="line">        <span class="keyword">while</span> (ptr1 != ptr2) {</span><br><span class="line">            ptr1 = ptr1.next;</span><br><span class="line">            ptr2 = ptr2.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ptr1;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找快慢两个指针交会的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">getIntersect</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) {</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (slow == fast) {</span><br><span class="line">                <span class="keyword">return</span> slow;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Brent判环算法"><a href="#Brent判环算法" class="headerlink" title="Brent判环算法"></a>Brent 判环算法</h2><p>Brent 算法跟 Floyd 算法比较起来，其优点是缩短了判断是否有环的耗时（根据 Wikipedia 的说法，Brent 算法的平均耗时比 Floyd 算法少 36%），但是这个算法无法找到环的入口。</p><p>这个算法同样会使用快和慢两个指针，判断是否有环的依据仍然是看两个指针是否会相遇，但是快指针和慢指针的走法与 Floyd 算法不同。这个算法中，快指针每一次会向前 2n 步（n 为从 1 开始算起的回合数），即第一回合快指针走 2 步，第二回合走 4 步，以此类推。回合结束后，慢指针直接传送到快指针所在的位置。在每个回合的快指针移动过程中判断快指针是否与慢指针交会，如果交会，那么就判定存在环。</p><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://leetcode.com/problems/linked-list-cycle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前回合快指针已走的步数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">stepsMovedByFast</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 当前回合快指针最多能走的步数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">stepLimitForFast</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) {</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            stepsMovedByFast++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果快指针往前走的时候与慢指针相会</span></span><br><span class="line">            <span class="comment">// 那就说明链表中存在环</span></span><br><span class="line">            <span class="keyword">if</span> (fast == slow) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 快指针走完了能走的步数，即回合结束</span></span><br><span class="line">            <span class="keyword">if</span> (stepsMovedByFast == stepLimitForFast) {</span><br><span class="line">                <span class="comment">// 快指针在下一回合能走的步数翻倍</span></span><br><span class="line">                stepLimitForFast *= <span class="number">2</span>;</span><br><span class="line">                <span class="comment">// 清零计步器</span></span><br><span class="line">                stepsMovedByFast = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 慢指针传送到快指针所在的位置</span></span><br><span class="line">                slow = fast;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>另外讲一个趣闻：这个算法还有个名字叫 <code>The Teleporting Turtle（会传送的乌龟）</code>，因为套用 Floyd 龟兔赛跑算法的概念，把快指针看作兔子，慢指针看作乌龟的话，那么乌龟是靠传送而不是行走前进的。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95/">判圈算法</category>
      
      <category domain="https://www.boris1993.com/tags/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95/">Floyd判圈算法</category>
      
      <category domain="https://www.boris1993.com/tags/Brent%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95/">Brent判圈算法</category>
      
      <category domain="https://www.boris1993.com/tags/%E9%BE%9F%E5%85%94%E8%B5%9B%E8%B7%91%E7%AE%97%E6%B3%95/">龟兔赛跑算法</category>
      
      <category domain="https://www.boris1993.com/tags/The-Teleporting-Turtle/">The Teleporting Turtle</category>
      
      
      <comments>https://www.boris1993.com/floyd-and-brent-cycle-detection-algorithm.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>二手 MicroServer Gen8 折腾记 (2/n) - 配置 RouterOS 软路由</title>
      <link>https://www.boris1993.com/setting-up-microserver-gen8-routeros.html</link>
      <guid>https://www.boris1993.com/setting-up-microserver-gen8-routeros.html</guid>
      <pubDate>Tue, 14 Feb 2023 09:51:37 GMT</pubDate>
      
      <description>&lt;p&gt;我之前宽带一直都是光猫拨号，电脑和 NAS 直连光猫，光猫下挂个二级无线路由器来给其他设备联网，但我早就对这个拓扑不爽了，主要原因是自己花大钱买的 AC86U 派不上用场，只能干点边缘的杂活，而且搞两套局域网怎么看都挺恶心的。之前也试过把路由器改成 AP 模式，让所有设备都直连光猫，但是万恶的电信光猫限制了设备数，只有前 5 台机器能上网，其它的机器虽然能拿到地址，但是上网必定超时。那现在既然有了台服务器，那干脆装个软路由。&lt;/p&gt;
&lt;p&gt;软路由系统我打算玩玩 &lt;code&gt;RouterOS&lt;/code&gt;，毕竟 &lt;code&gt;iKuai&lt;/code&gt; 听说过没用过，据说还出过劫持流量这种问题，不敢用也不想用；&lt;code&gt;OpenWRT&lt;/code&gt; 以前玩过，没啥新鲜感，而 &lt;code&gt;RouterOS&lt;/code&gt;，之前装着玩的时候就觉得倍有逼格，早就想搞搞它玩玩了。&lt;/p&gt;
&lt;p&gt;本篇为&lt;a href=&quot;/tags/%E4%BA%8C%E6%89%8BMicroServer-Gen8%E6%8A%98%E8%85%BE%E8%AE%B0/&quot;&gt;二手 MicroServer Gen8 折腾记&lt;/a&gt;的第二篇，记录配置猫棒和搭建 RouterOS 软路由的过程。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>我之前宽带一直都是光猫拨号，电脑和 NAS 直连光猫，光猫下挂个二级无线路由器来给其他设备联网，但我早就对这个拓扑不爽了，主要原因是自己花大钱买的 AC86U 派不上用场，只能干点边缘的杂活，而且搞两套局域网怎么看都挺恶心的。之前也试过把路由器改成 AP 模式，让所有设备都直连光猫，但是万恶的电信光猫限制了设备数，只有前 5 台机器能上网，其它的机器虽然能拿到地址，但是上网必定超时。那现在既然有了台服务器，那干脆装个软路由。</p><p>软路由系统我打算玩玩 <code>RouterOS</code>，毕竟 <code>iKuai</code> 听说过没用过，据说还出过劫持流量这种问题，不敢用也不想用；<code>OpenWRT</code> 以前玩过，没啥新鲜感，而 <code>RouterOS</code>，之前装着玩的时候就觉得倍有逼格，早就想搞搞它玩玩了。</p><p>本篇为<a href="/tags/%E4%BA%8C%E6%89%8BMicroServer-Gen8%E6%8A%98%E8%85%BE%E8%AE%B0/">二手 MicroServer Gen8 折腾记</a>的第二篇，记录配置猫棒和搭建 RouterOS 软路由的过程。</p><span id="more"></span><h2 id="获取光猫中的配置"><a href="#获取光猫中的配置" class="headerlink" title="获取光猫中的配置"></a>获取光猫中的配置</h2><p>我找装维师傅说要玩猫棒，需要进后台看参数，师傅就把密码查给我了。</p><p>用超级密码登录光猫后台，把 LOID、PPPoE 的用户名和密码（密码需要 base64 解码才能得到真实的密码）、IPv6 前缀长度记在一个文档里备查。</p><h2 id="准备猫棒"><a href="#准备猫棒" class="headerlink" title="准备猫棒"></a>准备猫棒</h2><p>因为我懒得找运营商的装维师傅给我改桥接（之前沟通过，师傅说要先换光猫，新光猫又得等），也考虑到留着原来的光猫配置不变的话，在我折腾翻车的时候也不需要再找装维师傅改回路由模式，直接把光纤接回去就能恢复网络，所以我直接在淘宝上买了根 ODI 的猫棒。又因为服务器上没有 SFP 口，我也不想再买个网卡，就顺便一起买了个光电转换器。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mSjji88uZfa6IxXuSkArB5KC5-ityNRp7TAJGfDrI3AojSt7MEtUHCu6wKRl7BIBaVX_AStDpa1QgB1XEJuVxk1Kn3ooakFPARjOJXAlRu-w9c99zKGHv3AXuNFLQ4RUGvrv_blCuCH7pCKKgJ1r361zfkR4SJaV6y2dYbTnj8HVQ_ZeCjUP1jwExuqj0byyF?width=256&amp;height=256&amp;cropmode=none"></p><p>之前了解到，光纤的端面接口有 PC、UPC、APC 三种，之所以选择 ODI 的光猫，就是因为我们一般宽带光纤的端面是 UPC 的，而诺基亚和阿尔卡特之类的猫棒是 APC 接口，还要套个转换器才行，硬插进去可能会损坏光纤，但 ODI 这款采用的就是 UPC 接口，不用再买转换器。<strong>但是我无法保证覆盖所有情况，如果你也想用猫棒，请一定提前跟店家和装维师傅确认好，如果顶坏了光纤端面，你只能喊装维师傅来给你重新做接头，别无他法！</strong></p><p><img data-src="https://bn02pap001files.storage.live.com/y4m-SlINLx0scMAanUj5VwTa95qVMed1wW2txsYoiQme6fejWJaPk2tR054qC7VuimhVTguKmgCltro05hTKN3GC_veVvRS5we9tGNPuIm1f3uPQaSuqWB_JfVHxDRQ76M9B2wYw-kUifq3vY87nM4nrH9EOPm0D53yGzKzF9_cKPodbOqPu_HdPx8AA_iSDKe7?width=660&amp;height=378&amp;cropmode=none"></p><p>抓住光纤的蓝色滑套，往后抽，就可以把光纤从光猫上拔出来，然后对准接口插进猫棒，再把猫棒插进光电转换器，然后接上网线和电源，就可以了。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mMRRJZQjA30ECKoDLlzcYe-wOMGsoFbmTflyrZH5AvEREeM2QeaT5AOI9gONsbcVCcoz5gFyLXS-B9asYpEqGVdlyBK6vXwOm4gKiOEtBEbf5dkheX7XfROwv5n25nRR2JUbE21acewADkN9_PszvqpLEcuzMn7xxCkhzQ9ERGLkMysa5hsLcUmuhqD0C_ndI?width=660&amp;height=371&amp;cropmode=none"></p><p>稍等几分钟等猫棒开机，开机之后，转换器在猫棒方向的灯会亮起来。这时候先把网线跟电脑连起来，给电脑分配一个 <code>192.168.1.0/24</code> 范围的地址（当然别用 <code>192.168.1.1</code>，那是猫棒后台的地址），然后用浏览器打开 <code>192.168.1.1</code>，就能看见猫棒后台的登陆页面了。账号和密码找商家要，我这款是 <code>admin/admin</code>，但不保证所有 ODI 猫棒都是这一对账号密码。登陆进去后，进入 <code>Settings</code> 页面，填入 <code>LOID</code>，点 <code>Apply Changes</code>，然后进入 <code>Commit/Reboot</code> 页面，点 <code>Commit and Reboot</code> 按钮保存配置并重启，猫棒端就配置完成了。</p><p>不过电信、联通、移动的光猫注册方式各有不同，上面说的操作都是针对电信的。其他运营商可以参考猫棒商家发的文档，或参考网上其他人的成功案例。这里引用猫棒说明中的一部分内容：</p><blockquote><p>★注册 - 初级:（部分型号光猫没有 GPON SN，可不修改）<br>电信 &amp; 联通 GPON/XGPON/XGSPON：Loid<br>移动 GPON/XGPON/XGSPON：Ploam 密码<br>电信 &amp; 联通 &amp; 移动 EPON/10G EPON：Loid</p><p>★注册 - 中级:<br>电信 &amp; 联 &amp; 移动 GPON/XGPON/XGSPON：GPON SN<br>电信 &amp; 联通 &amp; 移动 EPON/10G EPON：MAC/PON MAC+MAC KEY</p><p>★注册 - 高级：（GPON/XGPON/XGSPON）<br>厂商 ID/Vendor ID：如 HWTC / 华为、FHTT / 烽火、ZTEG / 中兴、SCTY / 天邑、YHTC / 友华<br>设备型号<br>OUI：6 位<br>设备标号：一般为 17 位<br>软件版本号<br>ONT 版本 / 硬件版本号</p><p>★注册 - 高级：（EPON/10G EPON）<br>设备型号<br>ONT 版本 / 硬件版本号</p></blockquote><p><img data-src="https://bn02pap001files.storage.live.com/y4mSpU0PsSR1XEh8pjLNAuHgO4u4Ft6CyMOG6V6W8v9e6YjXR3IFH8YfJwazDoSn3Q0yQIalasATF1f-GoxxvkEJul_WWXWiHzP1cNUNOJ25as4N6mvV975HrjEkoJbfeykHQaCfqy4oKZ6FPAlL0oiu4y3ArTmJpy0QlUu2VZWZSELfv3qIg82y77TCXOa8ZYi?width=660&amp;height=291&amp;cropmode=none"></p><p>本来重启之后，应该先看一下 ONU 状态是不是 <code>O5</code> 来着，但是当时我忘了看，直接电脑上拨号成功，间接也证明了 LOID 注册成功。不过还是放个文档里扒出来的图好了。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mpU5jbNBys0jdg1FGiAYbi9mA4SQIrLVC8sZPMvXXhcuYfd9waeWowgv_seYuTd1sHRhjiwtPQQv_7qillb7i1KGrWB4tsxNd2iNUBBRyvyHdPnLIphuAvoZEEkAxypN7Ux9FlM4LCqMLX779c8Hz_sOuqzCmGftn-BkGOcvBje4kWi2bQ_q7KvJXLKuFFdTG?width=591&amp;height=361&amp;cropmode=none"></p><h2 id="安装RouterOS"><a href="#安装RouterOS" class="headerlink" title="安装RouterOS"></a>安装 RouterOS</h2><p>一开始我以为装这玩意跟装别的系统没啥区别，就 ISO 一挂，顺着向导装就行。可看了文档发现，RouterOS 有一个专门面向虚拟平台的版本，叫 <code>Cloud Hosted Router (CHR)</code>，在<span class="exturl" data-url="aHR0cHM6Ly9taWtyb3Rpay5jb20vZG93bmxvYWQ=">官网的下载页面<i class="fa fa-external-link-alt"></i></span>下载 <code>OVA Template</code>，然后导入 ESXi 就行。具体的安装方法可以看<span class="exturl" data-url="aHR0cHM6Ly93aWtpLm1pa3JvdGlrLmNvbS93aWtpL01hbnVhbDpDSFJfVk1XYXJlX2luc3RhbGxhdGlvbiNIb3dfdG9fSW5zdGFsbF9DbG91ZF9Ib3N0ZWRfUm91dGVyX29uX1ZNV2FyZV9FU1hpXzYuNQ=="> Mikrotik 的 Wiki<i class="fa fa-external-link-alt"></i></span>。</p><p><code>RouterOS CHR</code> 作为一个付费的系统，当然也需要买授权才能用。买授权的方法也可以跟着<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLm1pa3JvdGlrLmNvbS9kb2NzL3BhZ2VzL3ZpZXdwYWdlLmFjdGlvbj9wYWdlSWQ9MTgzNTAyMzQjQ2xvdWRIb3N0ZWRSb3V0ZXIoQ0hSKS1HZXR0aW5ndGhlTGljZW5zZQ=="> Mikrotik 的 Wiki<i class="fa fa-external-link-alt"></i></span>操作，就是注意别买成 <code>RouterOS</code> 的 Key，这两者是不通用的。</p><p>另外安装之后，如果你更改了 RouterOS 的 CPU 数量，那么内存大小也要跟着调整。<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLm1pa3JvdGlrLmNvbS9kb2NzL3BhZ2VzL3ZpZXdwYWdlLmFjdGlvbj9wYWdlSWQ9MTgzNTAyMzQjQ2xvdWRIb3N0ZWRSb3V0ZXIoQ0hSKS1TeXN0ZW1SZXF1aXJlbWVudHM=">官方文档<i class="fa fa-external-link-alt"></i></span>提供了如下公式：</p><blockquote><p>RouterOS 6：RAM = 128 + [8 * CPU 数量 * (网络接口数量 - 1)]<br>RouterOS 7：RAM = 256 + [8 * CPU 数量 * (网络接口数量 - 1)]<br>注：建议为 CHR 实例分配至少 1024MB 内存。</p></blockquote><p>我因为没注意到这个信息，只把 CPU 改成了 4 核心，但内存还是 160MB，导致几乎每 24 小时就会出一次 <code>kernel failure in previous boot</code> 错误，为这事我还给 MikroTik 开了个工单……</p><h2 id="配置ESXi的网络"><a href="#配置ESXi的网络" class="headerlink" title="配置ESXi的网络"></a>配置 ESXi 的网络</h2><p>如果我没记错的话，ESXi 一开始只给 Ethernet 1 口做了配置，我们得手动给 Ethernet 2 配置虚拟网络。</p><p>首先到<code>网络</code>的<code>虚拟交换机</code>页面，创建一个新的虚拟交换机，名字按自己喜好起就行，比如我就顺着已有的 <code>vSwitch0</code> 给它命名 <code>vSwitch1</code>。然后点进 <code>vSwitch1</code>，点<code>添加上行链路</code>，把 <code>vmnic1</code> 分配给它，这样在 ESXi 里面就可以用这个接口了。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mLD0yBLEqybzTtnoFkUURaawTccVwb4403vw5ffplQ4KYRs1Zy9nbFRhqow8i01ASQz5Ihq-Wba4KzUjmU8IbvFFBqG4BFjJ74zv4GaQbdNhcKSR3_4s5R62ff0vlK03dXEyA8oq-Umr-ke9knUQ2BX9Vsf5Qeq2iA8myoaSXYiDYR4TLKKFNocbkluV85B18?width=1479&amp;height=747&amp;cropmode=none"></p><p>然后到<code>端口组</code>页面，添加一个新的端口组 <code>VM Network 2</code>，虚拟交换机选择刚创建的 <code>vSwitch1</code>。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mkju9ndlOXQRdmXndOKoKAtI194Bx1KqzSmfivjqPqmyS7MKFcR6zhw-NlEpL49ny19eP2eqlCUWQlHTL9tKU2Se2_4juDyYcu9uf6SicgsYCtHAHkcpAbDFOM0JSMIsceg_zwTQqxvs1IvGt2gOR12Aie8mXsdZ296de5LS5cRufr2zQVvhR3DphWaF3uwul?width=1475&amp;height=571&amp;cropmode=none"></p><p>接下来点进虚拟机 <code>RouterOS</code>，关机之后编辑设置，给它添加一个网络适配器，然后给<code>网络适配器1</code> 分配 <code>VM Network 2</code>，给<code>网络适配器2</code> 分配 <code>VM Network 1</code>，保存，开机。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4m6-hi4Fvzl0XoN8GpVz5mCZK4j409_9iKQ6kHYB0j7BJH7MVXkqkBVdwB9QzAQG3bvNK3isC8BZ7dQf6-iStg95p--iHXvykH8OxjFNs3RJHKsIANJGI8d1sq37yfUpHSr1iTNllYEkXW-mUTgeA1IeL6IJJ5QFRwaWpRQEOnCLQuuZUyaTRfviiPadnGgB9U?width=779&amp;height=505&amp;cropmode=none"></p><h2 id="配置RouterOS"><a href="#配置RouterOS" class="headerlink" title="配置RouterOS"></a>配置 RouterOS</h2><p>如果猫棒的 ONU 状态是 O5，那就可以把转换器连到 Gen 8 的 Ethernet 2 口上了。你问为啥不是 Ethernet 1？因为 Ethernet 1 我改成了与 iLO 共享，所以只能拿 Ethernet 2 当 WAN 口。下面进入 RouterOS，开始配置软路由。</p><h3 id="首次登录"><a href="#首次登录" class="headerlink" title="首次登录"></a>首次登录</h3><p>第一次登录的时候，因为我并不知道路由器的地址，所以没办法用 IP 地址打开 RouterOS 的配置页面，但 MikroTik 很贴心的提供了用 MAC 地址连接的功能。在 WinBox 的 Neighbors 页面双击 RouterOS 的条目，用 <code>admin</code> 用户和空密码登录就可以。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mXrqc2vsnLB1z45-oQoPqYMjRZ8nanF9B89Qn48oV8NvK6HnH2VNBkFEU_gjHbKHwxl2u0xbxvnne1pS-0CN5SduCz8egPjOuDjbd0agkwos7dWezz7Ib8rsNZbC-Ivp9-c_lZor0eXQUzrOc7EdXtkVC8w2LUuoRQLpy1oAdQyDKHPnk9CjWGOVL_6pWJ5DE?width=667&amp;height=562&amp;cropmode=none"></p><p>为了后面分的清楚，我先到 <code>Interfaces</code> 页面，把 LAN 口和 WAN 口对应接口的名字改了过来，毕竟默认的 <code>ether1</code> 和 <code>ether2</code> 不如 <code>LAN</code> 和 <code>WAN</code> 看的清楚。通常来说观察接口的 <code>Tx</code> 和 <code>Rx</code> 就能分清哪个是 LAN 口，因为这时候没配置拨号，WAN 口的流量通常只会是 0。如果分不清，那就先把 Gen 8 的 Ethernet 1 拔了。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mnAM2vmLe2HBp_yAaOvxUBNPH2bSXptFCGwG0FcnRM5uYe5BRswWaW2_gfcfLAocZwOdzV0SjsMAe08mOziIcpLK6l1n5bYnlWNIKR_oe0MyG0wk5AcxQs0rC_-pcKCkeNc7ebgC4IYPkYe-PXnMeWdn66dKNJ6fToJB26ZsnpnlUVAEVdLELSgH4u0jcsUAU?width=353&amp;height=172&amp;cropmode=none" alt="请暂时忽略China Telecom和wireguard1"></p><h3 id="规划地址范围，配置DHCP、DNS"><a href="#规划地址范围，配置DHCP、DNS" class="headerlink" title="规划地址范围，配置DHCP、DNS"></a>规划地址范围，配置 DHCP、DNS</h3><p>在配置 DHCP 服务器前，要先规划好自己的局域网的网段。地址范围可以从 IPv4 的三个私有地址范围 <code>10.0.0.0/8</code>、<code>172.16.0.0/12</code> 和 <code>192.168.0.0/16</code> 之间选，一定不要作死用公网网段（比如一些无能 IT 给路由器配了个 <code>1.1.1.1</code>），不然我很难说你的网络会出什么奇怪的问题。我干脆就遵循之前的网络，用了 <code>192.168.1.0/24</code> 段作为我的内网网段。</p><p>确定好地址范围之后，就可以用这条命令给 LAN 口指定一个静态 IP 地址：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ip/address/<span class="built_in">add</span> \</span><br><span class="line">  <span class="attribute">interface</span>=LAN \</span><br><span class="line">  <span class="attribute">address</span>=192.168.1.3/24 \</span><br><span class="line">  <span class="attribute">network</span>=192.168.1.0</span><br></pre></td></tr></tbody></table></figure><p>选择给 RouterOS 分配 <code>192.168.1.3</code> 的原因是，<code>192.168.1.1</code> 留给猫棒（虽然后来发现连不上），<code>192.168.1.2</code> 留给 AC86U 路由器，它本来就是这个地址，我懒得再动它。</p><p>然后先给 DHCP 服务器添加一个地址池：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/ip/pool/<span class="built_in">add</span> \</span><br><span class="line">  <span class="attribute">name</span>=192.168.1.0/24 \</span><br><span class="line">  <span class="attribute">ranges</span>=192.168.1.2-192.168.1.254</span><br></pre></td></tr></tbody></table></figure><p>接下来配置 DHCP 服务器：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加DHCP服务器</span></span><br><span class="line">/ip/dhcp-server/<span class="built_in">add</span> \</span><br><span class="line">  <span class="attribute">name</span>=LAN \</span><br><span class="line">  <span class="attribute">address-pool</span>=192.168.1.0/24 \</span><br><span class="line">  <span class="attribute">interface</span>=LAN \</span><br><span class="line">  <span class="attribute">lease-time</span>=1d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置DHCP服务器下发的网络参数</span></span><br><span class="line">/ip/dhcp-server/network/<span class="built_in">add</span> \</span><br><span class="line">  <span class="attribute">address</span>=192.168.1.0/24 \</span><br><span class="line">  <span class="attribute">dns-server</span>=192.168.1.3 \</span><br><span class="line">  <span class="attribute">gateway</span>=192.168.1.3</span><br></pre></td></tr></tbody></table></figure><p>此外我还想要给 ESXi 之类的机器配置一个固定的地址，于是：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/ip/dhcp-server/lease/<span class="built_in">add</span> \</span><br><span class="line">  <span class="attribute">address</span>=192.168.1.4 \</span><br><span class="line">  <span class="attribute">mac-address</span>=D0:BF:9C:46:94:D8 \</span><br><span class="line">  <span class="attribute">server</span>=LAN \</span><br><span class="line">  <span class="attribute">comment</span>=ESXi</span><br></pre></td></tr></tbody></table></figure><p>上面 DHCP 网络参数中的 <code>dns-server=192.168.1.3</code> 配置的是让 RouterOS 作为 DNS 服务器，但现在 RouterOS 还不能响应远程的 DNS 请求，所以要用下面这条命令更改 DNS 的配置：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ip/dns/<span class="built_in">set</span> <span class="attribute">allow-remote-requests</span>=<span class="literal">yes</span></span><br></pre></td></tr></tbody></table></figure><h3 id="创建本地管理员，禁用admin"><a href="#创建本地管理员，禁用admin" class="headerlink" title="创建本地管理员，禁用admin"></a>创建本地管理员，禁用 admin</h3><p>安全起见，我建议给 RouterOS 创建一个新的管理员账户，并禁用默认的 <code>admin</code> 账户。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建新的管理员用户，仅允许在192.168.1.0/24网络内登录</span></span><br><span class="line">/user/<span class="built_in">add</span> \</span><br><span class="line">  <span class="attribute">name</span>=新用户的用户名 \</span><br><span class="line">  <span class="attribute">password</span>=新用户的密码 \</span><br><span class="line">  <span class="attribute">group</span>=full \</span><br><span class="line">  <span class="attribute">address</span>=192.168.1.0/24</span><br><span class="line"><span class="comment"># 禁用admin</span></span><br><span class="line">/user/<span class="built_in">set</span> [ <span class="built_in">find</span> <span class="attribute">name</span>=<span class="string">"admin"</span> ] <span class="attribute">disabled</span>=<span class="literal">yes</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置PPPoE拨号和NAT规则"><a href="#配置PPPoE拨号和NAT规则" class="headerlink" title="配置PPPoE拨号和NAT规则"></a>配置 PPPoE 拨号和 NAT 规则</h3><p>首先创建一个 PPPoE 客户端来拨号：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/interface/pppoe-client/<span class="built_in">add</span> \</span><br><span class="line">  <span class="attribute">name</span>=<span class="string">"PPPoE客户端名字"</span> \</span><br><span class="line">  <span class="attribute">interface</span>=WAN \</span><br><span class="line">  <span class="attribute">user</span>=<span class="string">"宽带账号"</span> \</span><br><span class="line">  <span class="attribute">password</span>=<span class="string">"宽带密码"</span> \</span><br><span class="line">  <span class="attribute">profile</span>=default \</span><br><span class="line">  <span class="attribute">use-peer-dns</span>=<span class="literal">yes</span> \</span><br><span class="line">  <span class="attribute">add-default-route</span>=<span class="literal">yes</span></span><br></pre></td></tr></tbody></table></figure><p>添加成功后，RouterOS 会自动开始拨号，在终端也可以用 <code>monitor</code> 命令实时监控 PPPoE 拨号端口的状态：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/interface/pppoe-client/monitor [ <span class="built_in">find</span> running ]</span><br><span class="line">               status: connected</span><br><span class="line">               uptime: 13h59m53s</span><br><span class="line">         active-links: 1</span><br><span class="line">             encoding: </span><br><span class="line">         service-name: </span><br><span class="line">              ac-name: SH-SH-ML-MSE-2.MAN.NE40E</span><br><span class="line">               ac-mac: D0:D0:4B:06:EC:CC</span><br><span class="line">                  mtu: 1492</span><br><span class="line">                  mru: 1492</span><br><span class="line">        local-address: 124.78.123.123</span><br><span class="line">       remote-address: 124.78.123.1</span><br><span class="line">   local-ipv6-address: fe80::5</span><br><span class="line">  remote-ipv6-address: fe80::d2d0:4bff:fe06:eccc</span><br><span class="line">-- [Q quit|D dump|C-z pause]</span><br></pre></td></tr></tbody></table></figure><p>这时候 RouterOS 自己已经可以上网了，但是路由器下面的设备还不行，因为没有配置 NAT。在终端执行这条命令，来创建一条 NAT 规则：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/ip/firewall/nat/<span class="built_in">add</span> \</span><br><span class="line">  <span class="attribute">chain</span>=srcnat \</span><br><span class="line">  <span class="attribute">action</span>=masquerade \</span><br><span class="line">  <span class="attribute">out-interface</span>=<span class="string">"PPPoE接口的名字"</span> \</span><br><span class="line">  <span class="attribute">comment</span>=NAT</span><br></pre></td></tr></tbody></table></figure><p>现在路由下的设备就可以上网了。</p><h3 id="配置IPv6"><a href="#配置IPv6" class="headerlink" title="配置IPv6"></a>配置 IPv6</h3><p>电信宽带已经支持了 IPv6，那既然有了，我不能不用。电信会给宽带分配一个前缀，下级设备通过前缀来分配自己的地址，就是 prefix delegation。所以我只需要在 RouterOS 中配置一个 IPv6 的 DHCP client 就行。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ipv6/dhcp-client/<span class="built_in">add</span> \</span><br><span class="line">  <span class="attribute">interface</span>=<span class="string">"PPPoE客户端名字"</span> \</span><br><span class="line">  <span class="attribute">add-default-route</span>=<span class="literal">yes</span> \</span><br><span class="line">  <span class="attribute">pool-name</span>=ipv6_pool \</span><br><span class="line">  <span class="attribute">pool-prefix-length</span>=60 \</span><br><span class="line">  <span class="attribute">prefix-hint</span>=::/56 \</span><br><span class="line">  <span class="attribute">request</span>=prefix \</span><br><span class="line">  <span class="attribute">use-interface-duid</span>=<span class="literal">yes</span></span><br></pre></td></tr></tbody></table></figure><p>然后检查 DHCP client 的状态，是 <code>bound</code> 的话就说明已经成功获取到地址和前缀。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ipv6/dhcp-client/<span class="built_in">print</span></span><br><span class="line">Columns: INTERFACE, STATUS, REQUEST,<span class="built_in"> PREFIX</span></span><br><span class="line"><span class="built_in"></span><span class="comment"># INTERFACE      STATUS  REQUEST  PREFIX                              </span></span><br><span class="line">0 China Telecom  bound  <span class="built_in"> prefix </span>  240e:38a:5d27:5c00::/56, 2d21h48m59s</span><br></pre></td></tr></tbody></table></figure><p>然后让电脑重新连接路由，就能看到电脑成功获取到 IPv6 地址了。</p><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>毕竟路由器这种玩意不能在网上裸奔，该禁的端口就得禁。</p><p>首先创建两个 interface list，把公网接口和内网接口归类到各自的列表中，方便后面创建防火墙规则。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">/interface </span>list</span><br><span class="line"><span class="comment"># 给内网接口的list</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">name</span>=local</span><br><span class="line"><span class="comment"># 给公网接口的list</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">name</span>=internet</span><br><span class="line"></span><br><span class="line"><span class="built_in">/interface </span>list member</span><br><span class="line"><span class="comment"># LAN口归进local这个list</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">interface</span>=LAN <span class="attribute">list</span>=local</span><br><span class="line"><span class="comment"># WAN口和PPPoE口归进internet这个list</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">interface</span>=WAN <span class="attribute">list</span>=internet</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">interface</span>=<span class="string">"China Telecom"</span> <span class="attribute">list</span>=internet</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>然后添加 IPv4 的防火墙规则：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">/ip firewall filter</span></span><br><span class="line"><span class="built_in"></span><span class="comment"># 放行状态为established、related、untracked的数据包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"accept established,related,untracked"</span> <span class="attribute">connection-state</span>=established,related,untracked</span><br><span class="line"><span class="comment"># 允许外网ping，不想允许的话就不执行这条</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"accept ping"</span> <span class="attribute">protocol</span>=icmp</span><br><span class="line"><span class="comment"># 丢弃invalid状态的包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=drop <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"drop invalid"</span> <span class="attribute">connection-state</span>=invalid</span><br><span class="line"><span class="comment"># 兜底规则，丢弃一切来自公网的包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=drop <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"drop all from WAN"</span> <span class="attribute">in-interface-list</span>=internet</span><br><span class="line"><span class="comment"># RouterOS的快速跟踪功能，可以跟踪已建立的连接并让这些流量走快速通道，以降低设备的CPU负载</span></span><br><span class="line"><span class="comment"># 好像必须要专门的硬件才能发挥作用，但总之先加在这里</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=fasttrack-connection <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: fasttrack"</span> <span class="attribute">connection-state</span>=established,related <span class="attribute">hw-offload</span>=<span class="literal">yes</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"accept established,related, untracked"</span> <span class="attribute">connection-state</span>=established,related,untracked</span><br><span class="line"><span class="comment"># 在forward链上也丢弃掉invalid状态的包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=drop <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"drop invalid"</span> <span class="attribute">connection-state</span>=invalid</span><br><span class="line"><span class="comment"># 丢弃所有来自公网，且无端口转发规则匹配的包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=drop <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"drop all from WAN not DSTNATed"</span> <span class="attribute">connection-nat-state</span>=!dstnat <span class="attribute">connection-state</span>=new <span class="attribute">in-interface-list</span>=internet</span><br></pre></td></tr></tbody></table></figure><p>对于 IPv6，要先创建两份 address list，分别包含可以放行的地址和有问题的地址：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">/ipv6 firewall address-list</span></span><br><span class="line"><span class="built_in"></span><span class="built_in">add</span> <span class="attribute">address</span>=fe80::/16 <span class="attribute">list</span>=allowed</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=ff02::/16 <span class="attribute">comment</span>=multicast <span class="attribute">list</span>=allowed</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=::/128 <span class="attribute">comment</span>=<span class="string">"defconf: unspecified address"</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=::1/128 <span class="attribute">comment</span>=<span class="string">"defconf: lo"</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=fec0::/10 <span class="attribute">comment</span>=<span class="string">"defconf: site-local"</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=::ffff:0.0.0.0/96 <span class="attribute">comment</span>=<span class="string">"defconf: ipv4-mapped"</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=::/96 <span class="attribute">comment</span>=<span class="string">"defconf: ipv4 compat"</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=100::/64 <span class="attribute">comment</span>=<span class="string">"defconf: discard only "</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=2001:db8::/32 <span class="attribute">comment</span>=<span class="string">"defconf: documentation"</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=2001:10::/28 <span class="attribute">comment</span>=<span class="string">"defconf: ORCHID"</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=3ffe::/16 <span class="attribute">comment</span>=<span class="string">"defconf: 6bone"</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=::224.0.0.0/100 <span class="attribute">comment</span>=<span class="string">"defconf: other"</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=::127.0.0.0/104 <span class="attribute">comment</span>=<span class="string">"defconf: other"</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=::/104 <span class="attribute">comment</span>=<span class="string">"defconf: other"</span> <span class="attribute">list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=::255.0.0.0/104 <span class="attribute">comment</span>=<span class="string">"defconf: other"</span> <span class="attribute">list</span>=bad_ipv6</span><br></pre></td></tr></tbody></table></figure><p>然后配置防火墙规则（其中一些规则我也不明白是啥作用，但是既然包含在默认配置里，那配进去应该不会造成什么问题）：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">/ipv6 firewall filter</span></span><br><span class="line"><span class="built_in"></span><span class="comment"># 放行状态为established、related、untracked的数据包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"defconf: accept established,related,untracked"</span> <span class="attribute">connection-state</span>=established,related,untracked</span><br><span class="line"><span class="comment"># 丢弃invalid状态的包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=drop <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"defconf: drop invalid"</span> <span class="attribute">connection-state</span>=invalid</span><br><span class="line"><span class="comment"># 允许IPv6 ping</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"defconf: accept ICMPv6"</span> <span class="attribute">protocol</span>=icmpv6</span><br><span class="line"><span class="comment"># 允许IPv6 traceroute</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"defconf: accept UDP traceroute"</span> <span class="attribute">port</span>=33434-33534 <span class="attribute">protocol</span>=udp</span><br><span class="line"><span class="comment"># 允许DHCPv6 prefix delegation的包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"defconf: accept DHCPv6-Client prefix delegation."</span> <span class="attribute">dst-port</span>=546 <span class="attribute">protocol</span>=udp <span class="attribute">src-address</span>=fe80::/16</span><br><span class="line"><span class="comment"># 允许IKE数据包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"defconf: accept IKE"</span> <span class="attribute">dst-port</span>=500,4500 <span class="attribute">protocol</span>=udp</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"defconf: accept ipsec AH"</span> <span class="attribute">protocol</span>=ipsec-ah</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"defconf: accept ipsec ESP"</span> <span class="attribute">protocol</span>=ipsec-esp</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"defconf: accept all that matches ipsec policy"</span> <span class="attribute">ipsec-policy</span>=in,ipsec</span><br><span class="line"><span class="comment"># 兜底规则，丢弃一切不是从local接口列表发出的包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=drop <span class="attribute">chain</span>=input <span class="attribute">comment</span>=<span class="string">"defconf: drop everything else not coming from LAN"</span> <span class="attribute">in-interface-list</span>=!local</span><br><span class="line"><span class="comment"># forward链上放行状态为established、related、untracked的数据包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: accept established,related,untracked"</span> <span class="attribute">connection-state</span>=established,related,untracked</span><br><span class="line"><span class="comment"># forward链上丢弃invalid状态的包</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=drop <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: drop invalid"</span> <span class="attribute">connection-state</span>=invalid</span><br><span class="line"><span class="comment"># 禁止来自bad_ipv6这个地址列表里面的地址</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=drop <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: drop packets with bad src ipv6"</span> <span class="attribute">src-address-list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=drop <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: drop packets with bad dst ipv6"</span> <span class="attribute">dst-address-list</span>=bad_ipv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=drop <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: rfc4890 drop hop-limit=1"</span> <span class="attribute">hop-limit</span>=equal:1 <span class="attribute">protocol</span>=icmpv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: accept ICMPv6"</span> <span class="attribute">protocol</span>=icmpv6</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: accept HIP"</span> <span class="attribute">protocol</span>=139</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: accept IKE"</span> <span class="attribute">dst-port</span>=500,4500 <span class="attribute">protocol</span>=udp</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: accept ipsec AH"</span> <span class="attribute">protocol</span>=ipsec-ah</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: accept ipsec ESP"</span> <span class="attribute">protocol</span>=ipsec-esp</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=accept <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: accept all that matches ipsec policy"</span> <span class="attribute">ipsec-policy</span>=in,ipsec</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">action</span>=drop <span class="attribute">chain</span>=forward <span class="attribute">comment</span>=<span class="string">"defconf: drop everything else not coming from LAN"</span> <span class="attribute">in-interface-list</span>=!local</span><br></pre></td></tr></tbody></table></figure><h2 id="RouterOS里一些其它的配置"><a href="#RouterOS里一些其它的配置" class="headerlink" title="RouterOS里一些其它的配置"></a>RouterOS 里一些其它的配置</h2><p>最后就是一些杂七杂八的配置，比如开启 NTP 客户端来自动同步时间：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">/system ntp client</span></span><br><span class="line"><span class="built_in"></span><span class="built_in">set</span> <span class="attribute">enabled</span>=<span class="literal">yes</span></span><br><span class="line"><span class="built_in">/system ntp client </span>servers</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=time.windows.com</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=time.nist.gov</span><br><span class="line"><span class="built_in">add</span> <span class="attribute">address</span>=time.apple.com</span><br></pre></td></tr></tbody></table></figure><p>禁用掉不需要的服务以减小攻击面：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">/ip service</span></span><br><span class="line"><span class="built_in"></span><span class="comment"># 禁用telnet</span></span><br><span class="line"><span class="built_in">set</span> telnet <span class="attribute">disabled</span>=<span class="literal">yes</span></span><br><span class="line"><span class="comment"># 禁用ftp</span></span><br><span class="line"><span class="built_in">set</span> ftp <span class="attribute">disabled</span>=<span class="literal">yes</span></span><br><span class="line"><span class="comment"># 限制www、ssh、winbox服务都只能从内网访问</span></span><br><span class="line"><span class="built_in">set</span> www <span class="attribute">address</span>=192.168.1.0/24</span><br><span class="line"><span class="built_in">set</span> ssh <span class="attribute">address</span>=192.168.1.0/24</span><br><span class="line"><span class="built_in">set</span> www-ssl <span class="attribute">address</span>=192.168.1.0/24 <span class="attribute">disabled</span>=<span class="literal">no</span></span><br><span class="line"><span class="built_in">set</span> winbox <span class="attribute">address</span>=192.168.1.0/24</span><br><span class="line"><span class="comment"># API用不到，所以禁用</span></span><br><span class="line"><span class="built_in">set</span> api <span class="attribute">disabled</span>=<span class="literal">yes</span></span><br><span class="line"><span class="built_in">set</span> api-ssl <span class="attribute">disabled</span>=<span class="literal">yes</span></span><br></pre></td></tr></tbody></table></figure><p>开启 UPnP，虽然说开这玩意会有安全隐患，但是开了这么多年也没因为它出过事，这玩意也没法从外网开端口转发，也就是说首先内网得有机器中毒，我自认为我的使用习惯还算是安全的，所以，开。</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用UPnP</span></span><br><span class="line"><span class="built_in">/ip upnp</span></span><br><span class="line"><span class="built_in"></span><span class="built_in">set</span> <span class="attribute">enabled</span>=<span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">/ip upnp </span>interfaces</span><br><span class="line"><span class="comment"># 配置LAN口作为内网端</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">interface</span>=LAN <span class="attribute">type</span>=internal</span><br><span class="line"><span class="comment"># 配置PPPoE端口作为公网端</span></span><br><span class="line"><span class="built_in">add</span> <span class="attribute">interface</span>=<span class="string">"PPPoE接口的名字"</span> <span class="attribute">type</span>=external</span><br></pre></td></tr></tbody></table></figure><p>开启云服务，包括 DDNS 和自动备份：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">/ip </span>cloud</span><br><span class="line"><span class="built_in">set</span> <span class="attribute">ddns-enabled</span>=<span class="literal">yes</span> <span class="attribute">ddns-update-interval</span>=1h <span class="attribute">update-time</span>=<span class="literal">yes</span></span><br></pre></td></tr></tbody></table></figure>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/%E4%BA%8C%E6%89%8BMicroServer-Gen8%E6%8A%98%E8%85%BE%E8%AE%B0/">二手MicroServer Gen8折腾记</category>
      
      <category domain="https://www.boris1993.com/tags/Gen8/">Gen8</category>
      
      <category domain="https://www.boris1993.com/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/">软路由</category>
      
      <category domain="https://www.boris1993.com/tags/RouterOS/">RouterOS</category>
      
      
      <comments>https://www.boris1993.com/setting-up-microserver-gen8-routeros.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>自建 Tailscale 的 DERP 节点</title>
      <link>https://www.boris1993.com/self-hosting-tailscale-derp.html</link>
      <guid>https://www.boris1993.com/self-hosting-tailscale-derp.html</guid>
      <pubDate>Wed, 08 Feb 2023 05:57:27 GMT</pubDate>
      
      <description>&lt;p&gt;迫于 Tailscale 官方的中继节点在国内几乎没法用，于是在轻量云香港区自建了一个 DERP 服务。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>迫于 Tailscale 官方的中继节点在国内几乎没法用，于是在轻量云香港区自建了一个 DERP 服务。</p><span id="more"></span><h2 id="安装derper"><a href="#安装derper" class="headerlink" title="安装derper"></a>安装 derper</h2><p>因为 derper 是依赖 <code>go install</code> 实现分发，所以要先安装 Go 语言 SDK。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://go.dev/dl/go1.20.linux-amd64.tar.gz</span><br><span class="line">$ sudo <span class="built_in">rm</span> -rf /usr/local/go &amp;&amp; sudo tar -C /usr/local -xzf go1.20.linux-amd64.tar.gz</span><br></pre></td></tr></tbody></table></figure><p>安装成功后，需要配置环境变量，把 Go 的可执行文件，和 <code>~/go/bin</code> 目录加入 <code>PATH</code>。在<code>.bashrc</code>（如果你用 <code>zsh</code>，那就是<code>.zshrc</code>）中添加如下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin:~/go/bin</span><br></pre></td></tr></tbody></table></figure><p>重新载入<code>.bashrc</code> 后，执行 <code>go install tailscale.com/cmd/derper@main</code>，安装 <code>derper</code>。</p><p>此外，因为 derper 不能自动更新，所以需要设定一个定时任务来定期重新运行 <code>go install</code> 命令，如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 * * * go install tailscale.com/cmd/derper@main</span><br></pre></td></tr></tbody></table></figure><h2 id="测试derper"><a href="#测试derper" class="headerlink" title="测试derper"></a>测试 derper</h2><p>在运行 derper 之前，你需要给这个服务器绑定一个域名，derper 会用这个域名来申请 Let’s Encrypt 的 SSL 证书。申请和购买域名我就不在这废话了，网上有很多相关文章。</p><p>此外，因为 derper 需要监听 443 端口，而我又不想以 root 身份运行它，所以我选择给它分配 <code>CAP_NET_BIND_SERVICE</code> 这个 capability，来让它有监听低位端口的权限。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">setcap</span> CAP_NET_BIND_SERVICE=+eip ~/go/bin/derper</span><br></pre></td></tr></tbody></table></figure><p>然后就可以手动运行 <code>derper</code> 来测试了。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># derper.conf它会自动创建，你给它指定一个位置就行</span></span><br><span class="line">$ go/bin/derper -c derper/derper.conf -hostname derp.mydomain.com</span><br><span class="line">2023/02/08 13:35:11 derper: serving on :443 with TLS</span><br><span class="line">2023/02/08 13:35:11 running STUN server on [::]:3478</span><br></pre></td></tr></tbody></table></figure><p>这时候 derper 就会开始监听 443 端口。</p><p>如果 443 端口被占用，那么就需要手动指定监听的端口（比如 4443），SSL 证书也要自己通过 <code>acme.sh</code> 之类的工具生成，而且证书的名字必须符合<code>域名.crt</code>（即 <code>derp.mydomain.com.crt</code>）这种格式。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">derper -c=derper/derper.conf -hostname derp.mydomain.com -a :4443 -certmode manual -certdir /home/admin/certs</span><br></pre></td></tr></tbody></table></figure><p>此时用浏览器访问 <code>https://derp.mydomain.com</code>，会得到一个这样的网页：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>DERP<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  This is a</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://tailscale.com/"</span>&gt;</span>Tailscale<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://pkg.go.dev/tailscale.com/derp"</span>&gt;</span>DERP<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  server.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置服务和防火墙"><a href="#配置服务和防火墙" class="headerlink" title="配置服务和防火墙"></a>配置服务和防火墙</h2><p>每次手动执行 derper 命令肯定不现实，所以这时候就要 <code>systemd</code> 出马了。进入 <code>/etc/systemd/system</code>，新建一个名为 <code>derper.service</code> 的文件，输入如下内容：</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="comment"># 服务名字</span></span><br><span class="line"><span class="attr">Description</span>=Tailscale DERP Server</span><br><span class="line"><span class="comment"># 在网络服务启动后启动这个服务</span></span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="comment"># 改成你的用户名</span></span><br><span class="line"><span class="attr">User</span>=admin</span><br><span class="line"><span class="comment"># 总是自动重新启动</span></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="comment"># 重启前等待5秒</span></span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">5</span></span><br><span class="line"><span class="comment"># 启动derper的命令，跟上面测试用的命令一样</span></span><br><span class="line"><span class="attr">ExecStart</span>=/home/admin/go/bin/derper -c=/home/admin/derper/derper.conf -hostname derp.mydomain.com</span><br><span class="line"><span class="comment"># 停止derper的命令</span></span><br><span class="line"><span class="attr">ExecStop</span>=/bin/kill <span class="variable">$MAINPID</span></span><br><span class="line"><span class="comment"># 赋予CAP_NET_BIND_SERVICE这个capability</span></span><br><span class="line"><span class="attr">AmbientCapabilities</span>=CAP_NET_BIND_SERVICE</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></tbody></table></figure><p>然后分别执行如下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 载入service文件的变更</span></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动derper</span></span><br><span class="line">$ sudo systemctl start derper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查状态</span></span><br><span class="line">$ sudo systemctl status derper</span><br><span class="line">● derper.service - Tailscale DERP Server</span><br><span class="line">     Loaded: loaded (/etc/systemd/system/derper.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Wed 2023-02-08 14:27:13 CST; 2s ago</span><br><span class="line">   Main PID: 4944 (derper)</span><br><span class="line">      Tasks: 6 (<span class="built_in">limit</span>: 1006)</span><br><span class="line">     Memory: 2.6M</span><br><span class="line">        CPU: 16ms</span><br><span class="line">     CGroup: /system.slice/derper.service</span><br><span class="line">             └─4944 /home/admin/go/bin/derper -c=/home/admin/derper/derper.conf -hostname derp.mydomain.com</span><br><span class="line"></span><br><span class="line">Feb 08 14:27:13 iZj6caykwpo11gr659a9avZ systemd[1]: Started Tailscale DERP Server.</span><br><span class="line">Feb 08 14:27:13 iZj6caykwpo11gr659a9avZ derper[4944]: 2023/02/08 14:27:13 derper: serving on :443 with TLS</span><br><span class="line">Feb 08 14:27:13 iZj6caykwpo11gr659a9avZ derper[4944]: 2023/02/08 14:27:13 running STUN server on [::]:3478</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> derper</span><br><span class="line">Created symlink /etc/systemd/system/multiuser.target.wants/derper.service → /etc/systemd/system/derper.service.</span><br><span class="line">Unit /etc/systemd/system/derper.service is added as a dependency to a non-existent unit multiuser.target.</span><br></pre></td></tr></tbody></table></figure><p>因为 derper 依赖 HTTP、HTTPS 和 STUN 协议，所以需要配置防火墙或安全组，开放 <code>80/tcp</code>，<code>443/tcp</code>，和 <code>3478/udp</code> 端口。</p><h2 id="配置Tailscale"><a href="#配置Tailscale" class="headerlink" title="配置Tailscale"></a>配置 Tailscale</h2><p>现在自建的 DERP 节点就成功启动了，接下来我们就需要让 Tailscale 知道这个节点的信息。进入 Tailscale 的 Admin console，进入 <code>Access controls</code>，在 JSON 中增加如下配置：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="comment">// 前略</span></span><br><span class="line">    <span class="attr">"derpMap"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="comment">// 如果想要所有节点只使用自建中继的话，就启用这条配置</span></span><br><span class="line">        <span class="comment">// "OmitDefaultRegions": true,</span></span><br><span class="line">        <span class="attr">"Regions"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"900"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"RegionID"</span><span class="punctuation">:</span>   <span class="number">900</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"RegionCode"</span><span class="punctuation">:</span> <span class="string">"Aliyun-HKG"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"Nodes"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">{</span></span><br><span class="line">                        <span class="attr">"Name"</span><span class="punctuation">:</span> <span class="string">"Aliyun-HKG-1"</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">"RegionID"</span><span class="punctuation">:</span> <span class="number">900</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">"HostName"</span><span class="punctuation">:</span> <span class="string">"derp.mydomain.com"</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// 如果有多个区域、多个节点，或者使用了自定义端口，那么可以参考这部分</span></span><br><span class="line">            <span class="attr">"901"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"RegionID"</span><span class="punctuation">:</span> <span class="number">901</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"RegionCode"</span><span class="punctuation">:</span> <span class="string">"Oracle-OSAKA"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"Nodes"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">{</span></span><br><span class="line">                        <span class="attr">"Name"</span><span class="punctuation">:</span> <span class="string">"Oracle-OSAKA-1"</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">"RegionID"</span><span class="punctuation">:</span> <span class="number">901</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">"HostName"</span><span class="punctuation">:</span> <span class="string">"osaka1.derp.mydomain.com"</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">"DERPPort"</span><span class="punctuation">:</span> <span class="number">4443</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">{</span></span><br><span class="line">                        <span class="attr">"Name"</span><span class="punctuation">:</span> <span class="string">"Oracle-OSAKA-1"</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">"RegionID"</span><span class="punctuation">:</span> <span class="number">901</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">"HostName"</span><span class="punctuation">:</span> <span class="string">"osaka2.derp.mydomain.com"</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">"DERPPort"</span><span class="punctuation">:</span> <span class="number">4443</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>最后不要忘了点击 <code>Save</code> 保存。保存成功后，可以在 <code>Machines</code> 中随便点进一台机器，看 <code>Relays</code> 里面有没有出现刚刚添加的 DERP 服务器。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4msmuvDDZPYK8hKUlVo6ezbJqipcZRb3l8q9ejiAfCWSN7GS_UdIjLdv5nNuxr1IgkDMrq9kC9ONsKCRQLZ7rACaP-sXvzmVg1wcHKfk-zndJ_ULEaEnz1F8MRb9k1IWRTIyA0HlDEi3mnz_Ewag3lyGocNYJMEhVMGsalQdc4ohcWN23yZIDC3kifbqfOE72a?width=660&amp;height=151&amp;cropmode=none"></p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90YWlsc2NhbGUuY29tL2tiLzExMTgvY3VzdG9tLWRlcnAtc2VydmVycy8=">Custom DERP Servers<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/Tailscale/">Tailscale</category>
      
      <category domain="https://www.boris1993.com/tags/DERP/">DERP</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/">内网穿透</category>
      
      
      <comments>https://www.boris1993.com/self-hosting-tailscale-derp.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SwiftUI 学习记录 - 切换 TabView 的 tab 时触发震动反馈</title>
      <link>https://www.boris1993.com/swiftui-trigger-haptic-feedback-when-changing-tabs.html</link>
      <guid>https://www.boris1993.com/swiftui-trigger-haptic-feedback-when-changing-tabs.html</guid>
      <pubDate>Sun, 05 Feb 2023 16:02:10 GMT</pubDate>
      
      <description>&lt;p&gt;最近在折腾 iOS 开发的时候，想实现在切换 &lt;code&gt;TabView&lt;/code&gt; 的 tab 时触发震动反馈，因为一边写一边学嘛，基础不牢，只能在网上瞎搜，试了各种方法都不奏效。直到前两天看到&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL0RpbWlsbGlhbi9JY2VDdWJlc0FwcC9ibG9iLzczMGU0NzE3MTgzODliNTRmMWM5MjgwNWM1NmY1YTQ3MjI1NjUwYTIvSWNlQ3ViZXNBcHAvQXBwL0ljZUN1YmVzQXBwLnN3aWZ0I0wxMzItTDE0NQ==&quot;&gt; Ice Cubes: for Mastodon 的这段代码&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，豁然开朗。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>最近在折腾 iOS 开发的时候，想实现在切换 <code>TabView</code> 的 tab 时触发震动反馈，因为一边写一边学嘛，基础不牢，只能在网上瞎搜，试了各种方法都不奏效。直到前两天看到<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RpbWlsbGlhbi9JY2VDdWJlc0FwcC9ibG9iLzczMGU0NzE3MTgzODliNTRmMWM5MjgwNWM1NmY1YTQ3MjI1NjUwYTIvSWNlQ3ViZXNBcHAvQXBwL0ljZUN1YmVzQXBwLnN3aWZ0I0wxMzItTDE0NQ=="> Ice Cubes: for Mastodon 的这段代码<i class="fa fa-external-link-alt"></i></span>，豁然开朗。</p><span id="more"></span><p>之前写的时候，只知道给 <code>selection</code> 传一个绑定的对象，但是看完 <code>IceCubes</code> 的代码，再一看 <code>selection</code> 参数的文档，恍然大悟，这个参数要的其实是一个 <code>SelectionValue</code> 的绑定对象，所以我其实可以在这个对象的 <code>set</code> 方法上面做文章。</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> {</span><br><span class="line">    <span class="meta">@State</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> selectedTab <span class="operator">=</span> <span class="type">Tab</span>.<span class="type">Timeline</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {</span><br><span class="line">        <span class="type">TabView</span>(selection: .<span class="keyword">init</span>(</span><br><span class="line">            get: {</span><br><span class="line">                selectedTab</span><br><span class="line">            },</span><br><span class="line">            set: { newTab <span class="keyword">in</span> </span><br><span class="line">                selectedTab <span class="operator">=</span> newTab</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 在TabView更新selection的时候触发震动反馈就行了</span></span><br><span class="line">                <span class="keyword">if</span> (globalState.isHapticFeedbackEnabled) {</span><br><span class="line">                    <span class="type">HapticsHelper</span>.playHapticFeedback()</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        )) {</span><br><span class="line">            <span class="comment">// Views</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>顺便提一嘴我之前走过的一个弯路，就是试图在 <code>TabView</code> 上用<code>.onTapGesture()</code> 方法，结果虽然能震了，但是 tab 不会切换，当时还花了好长时间找怎么调用原本的<code>.onTapGesture()</code> 来切 tab，当然最后一无所获，最后认输，把震动反馈这个功能忍痛砍了……</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/SwiftUI/">SwiftUI</category>
      
      <category domain="https://www.boris1993.com/tags/TabView/">TabView</category>
      
      <category domain="https://www.boris1993.com/tags/Haptic-Feedback/">Haptic Feedback</category>
      
      <category domain="https://www.boris1993.com/tags/%E9%9C%87%E5%8A%A8%E5%8F%8D%E9%A6%88/">震动反馈</category>
      
      
      <comments>https://www.boris1993.com/swiftui-trigger-haptic-feedback-when-changing-tabs.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>通过 Hexo 博客完成 NIP-05 验证</title>
      <link>https://www.boris1993.com/nostr-nip-05-with-hexo.html</link>
      <guid>https://www.boris1993.com/nostr-nip-05-with-hexo.html</guid>
      <pubDate>Sat, 04 Feb 2023 17:26:02 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;让Hexo在生成时包含-well-known目录&quot;&gt;&lt;a href=&quot;#让Hexo在生成时包含-well-known目录&quot; class=&quot;headerlink&quot; title=&quot;让Hexo在生成时包含.well-known目录&quot;&gt;&lt;/a&gt;让 Hexo 在生成时包含&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="让Hexo在生成时包含-well-known目录"><a href="#让Hexo在生成时包含-well-known目录" class="headerlink" title="让Hexo在生成时包含.well-known目录"></a>让 Hexo 在生成时包含<code>.well-known</code> 目录</h2><p>编辑 <code>config.yml</code>，添加如下配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">include:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">".well-known/**"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="转换公钥格式"><a href="#转换公钥格式" class="headerlink" title="转换公钥格式"></a>转换公钥格式</h2><p>Damus 生成的 <code>npub</code> 开头的公钥不能直接用，要先转换成十六进制格式的公钥。可以用<span class="exturl" data-url="aHR0cHM6Ly9kYW11cy5pby9rZXkv">这个网站<i class="fa fa-external-link-alt"></i></span>来转换。</p><p>把 <code>npub</code> 开头的公钥粘贴进 <code>damus key</code> 一栏，<code>hex key</code> 会自动计算出来，复制 <code>hex key</code> 的内容备用。</p><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>在 <code>source</code> 目录下新建一个名为<code>.well-known</code> 的目录，然后在<code>.well-known</code> 目录中创建 <code>nostr.json</code>，填写如下信息：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"names"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"你的用户名"</span><span class="punctuation">:</span> <span class="string">"刚刚转换得到的hex key"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>在本地运行 <code>hexo clean &amp;&amp; hexo g</code>，生成成功后检查 <code>public</code> 目录中是否存在<code>.well-known/nostr.json</code> 文件，如存在则说明配置正确。</p><h2 id="配置Nostr"><a href="#配置Nostr" class="headerlink" title="配置Nostr"></a>配置 Nostr</h2><p>提交代码并部署成功后，即可在 <code>nostr</code> 客户端配置 <code>NIP-05</code> 认证，本文以 <code>Damus</code> 为例。</p><p>点击左上角头像，进入 <code>Profile</code>，点击 <code>Edit</code>，在 <code>NIP-05 VERIFICATION</code> 一栏中填写<code>你的username@你的博客网站</code>，比如我填写的是 <code>boris1993@www.boris1993.com</code>，最后点击 <code>Save</code>。</p><p>如果一切正常的话，在你的 Profile 页面就能看到一个对勾图标，代表验证成功。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/nostr/">nostr</category>
      
      <category domain="https://www.boris1993.com/tags/NIP-05/">NIP-05</category>
      
      <category domain="https://www.boris1993.com/tags/Damus/">Damus</category>
      
      
      <comments>https://www.boris1993.com/nostr-nip-05-with-hexo.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>设计并实现一个简易的短 URL 服务</title>
      <link>https://www.boris1993.com/designing-and-implementing-a-short-url-service.html</link>
      <guid>https://www.boris1993.com/designing-and-implementing-a-short-url-service.html</guid>
      <pubDate>Fri, 03 Feb 2023 09:57:07 GMT</pubDate>
      
      <description>&lt;p&gt;突然就对短链接服务的原理来了兴趣，于是就查了些资料，自己实现了一个很简陋的演示性的短链接服务。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>突然就对短链接服务的原理来了兴趣，于是就查了些资料，自己实现了一个很简陋的演示性的短链接服务。</p><span id="more"></span><h2 id="短链接服务是怎么工作的"><a href="#短链接服务是怎么工作的" class="headerlink" title="短链接服务是怎么工作的"></a>短链接服务是怎么工作的</h2><p>短链接服务这玩意，说来其实非常简单，就是给用户传来的 URL 起个别名，然后把别名与原链接的映射关系记录在数据库里。</p><p>用户访问短链接时，请求首先会到短链接服务的服务器；短链接服务端收到请求，取出对应的原 URL，最后通知用户端的浏览器做个跳转。</p><h2 id="301跳转？还是302跳转？"><a href="#301跳转？还是302跳转？" class="headerlink" title="301跳转？还是302跳转？"></a>301 跳转？还是 302 跳转？</h2><p>尽管按照语义来讲，301 跳转更合适，因为一个短 URL 必定只对应一个长 URL，但是看起来生产上更多使用 302 跳转，因为这样的话请求会经过短网址提供商的服务器，短网址提供商就可以收集到用户的一些信息，然后把这些信息变现。</p><h2 id="如何生成短链接"><a href="#如何生成短链接" class="headerlink" title="如何生成短链接"></a>如何生成短链接</h2><p>上面说到，短链接服务的核心就是要给长链接生成一个 “别名”，那么这个别名应该怎么生成呢？</p><p>我相信不少人一上来就会想到哈希算法，比如给原 URL 做个 MD5，虽然不是不行，就是哈希算法有碰撞这么个问题，虽然影响不大吧，但处理起来还是个麻烦。</p><p>上网一顿冲浪，我发现其实这个生成的算法非常简单，就是直接用发号器生成一个 ID，把这个 ID 跟原链接绑定就行。足够简单，而且不会碰撞。</p><p>不过既然都提到这两种算法了，不如顺便介绍一下。</p><h3 id="发号器方案"><a href="#发号器方案" class="headerlink" title="发号器方案"></a>发号器方案</h3><p>发号器方案本质上就是生成分布式 ID，如果要简单处理，那么可以使用 <code>Redis</code> 的 <code>incr</code> 操作，或者取数据库的自增序列；复杂情况的话，可以让数据库集群中每个节点各负责生成某一范围的数字，或者使用雪花算法等 UUID 生成算法。</p><p>在得到发号器生成的数字之后，再将其转换为 62 进制数，就可以当成短 URL 的 ID 了。这么做的原因，一方面是可以一定程度上防止直接暴露序列的值产生的安全问题；另一方面，因为为了保证序列够用，发号器返回的数字会比较大，将低进制数转换为高进制数可以显著减少字符数量。</p><h3 id="哈希算法方案"><a href="#哈希算法方案" class="headerlink" title="哈希算法方案"></a>哈希算法方案</h3><blockquote><ol><li>将长网址 md5 生成 32 位签名串，分为 4 段，每段 8 个字节</li><li>对这四段循环处理，取 8 个字节，将他看成 16 进制串与 0x3fffffff (30 位 1) 与操作，即超过 30 位的忽略处理</li><li>这 30 位分成 6 段，每 5 位的数字作为字母表的索引取得特定字符，依次进行获得 6 位字符串</li><li>总的 md5 串可以获得 4 个 6 位串，取里面的任意一个就可作为这个长 url 的短 url 地址</li></ol><p>摘自 <span class="exturl" data-url="aHR0cHM6Ly9odWZhbmd5dW4uY29tLzIwMTcvc2hvcnQtdXJsLw==">短网址 (short URL) 系统的原理及其实现<i class="fa fa-external-link-alt"></i></span></p></blockquote><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>解决了理论问题，接下来就要面对现实问题：用什么实现，和跑在哪里。</p><p>因为这只是一个演示性的短链接服务，目前定位是就我一个人玩，所以我一方面不想花时间在部署和维护上，另一方面也想趁机玩点没玩过的东西。所以我决定把这玩意放在 <code>CloudFlare Workers</code> 上面，用 <code>TypeScript</code> 语言开发，数据存放在 <code>CloudFlare Workers KV</code> 数据库里。这样，我就只需要关心代码怎么写，其他的包括维护数据库、估算服务器压力这些事都不用担心。</p><p>数据库中我需要用两个表，一个表用来存放当前的序列值，和<code>短URL -&gt; 原URL</code> 的映射，这个表是服务的核心；另一个表用来存放<code>长URL -&gt; 短URL</code> 的映射，这么设计的原因是，针对相同的长 URL，我不需要在生成新的短 URL，既节省空间，也能稍微节省点能源不是。</p><p>而生成短链接的算法，我当然选择最简单的数据库序列。但因为 <code>CloudFlare Workers KV</code> 并不支持真正的序列，所以我在数据库里面用一个专门的 key 当作序列来用。这个选型有一个风险就是，在高并发状态下我无法保证序列的值不会重复，因为<code>取出序列 -- 生成ID -- 保存新的序列</code>这个操作不是原子性的，高并发状态下可能会有多个请求同时取到相同的序列，进而生成相同的 ID，最后就会产生错误的结果。不过，还是那句话，就我一个人用的玩意，暂时先不考虑那么多。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>这个服务的流程分两大部分，生成新的短 URL，和查询短 URL 并完成跳转。查询操作没什么梗，查到了就返回，查不到就 404 呗。</p><p>生成新的短 URL 的话，大致就是这么个流程：</p><pre><code class="highlight mermaid">graph TD;    start[开始];    finish[结束];    request_received[收到生成的请求];    check_existing_record{检查是否已经生成过};    return_existing_record[返回已有的短URL];    fetch_current_sequence[查询当前的序列];    calculate_base62[计算序列的62进制数值];    increase_sequence_number[序列增1];    save_to_database[将短URL和新的序列存入数据库];    return_new_generated_short_url[返回生成的短URL];        start --&gt; request_received;    request_received --&gt; check_existing_record;    check_existing_record --&gt;|Y| return_existing_record;    return_existing_record --&gt; finish;    check_existing_record --&gt;|N| fetch_current_sequence;    fetch_current_sequence --&gt; calculate_base62;    calculate_base62 --&gt; increase_sequence_number;    increase_sequence_number --&gt; save_to_database;    save_to_database --&gt; return_new_generated_short_url;    return_new_generated_short_url --&gt; finish;</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>这里就只放具体实现相关的代码了，完整的代码库可以到参考文档第一条的 GitHub 仓库看到。</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> url <span class="keyword">from</span> <span class="string">'url'</span>;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">RequestBody</span>, <span class="title class_">ResponseBody</span>, <span class="title class_">ShortUrl</span> } <span class="keyword">from</span> <span class="string">'./model'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起始的序列值</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INITIAL_SEQUENCE_NUMBER</span> = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Env</span> {</span><br><span class="line">    [<span class="attr">x</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetch</span>(</span><br><span class="line">        <span class="attr">request</span>: <span class="title class_">Request</span>,</span><br><span class="line">        <span class="attr">env</span>: <span class="title class_">Env</span>,</span><br><span class="line">        <span class="attr">ctx</span>: <span class="title class_">ExecutionContext</span></span><br><span class="line">    ): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; {</span><br><span class="line">        <span class="keyword">switch</span> (request.<span class="property">method</span>) {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">handlePostRequest</span>(request, env);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'GET'</span>:</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">handleGetRequest</span>(request, env);</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleGetRequest</span>(<span class="params"></span></span><br><span class="line"><span class="params">    request: Request,</span></span><br><span class="line"><span class="params">    env: Env</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; {</span><br><span class="line">    <span class="comment">// 取URL中的path部分</span></span><br><span class="line">    <span class="keyword">let</span> url_parts = url.<span class="title function_">parse</span>(request.<span class="property">url</span>);</span><br><span class="line">    <span class="keyword">let</span> path = url_parts.<span class="property">pathname</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有path部分，或者path有多层</span></span><br><span class="line">    <span class="comment">// 那么视为无效请求</span></span><br><span class="line">    <span class="comment">// 合法的短URL格式为：https://mydomain.com/RlB2PdD</span></span><br><span class="line">    <span class="keyword">if</span> (path == <span class="literal">null</span> || path.<span class="title function_">split</span>(<span class="regexp">/\/(?=.)/</span>).<span class="property">length</span> !== <span class="number">2</span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">"No short URL key provided or invalid path. Returning 400"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">"No short URL key provided or the path is invalid."</span>, {</span><br><span class="line">            <span class="attr">status</span>: <span class="number">400</span></span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> pathParts = path?.<span class="title function_">split</span>(<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 专门处理下favicon.ico的请求</span></span><br><span class="line">    <span class="comment">// 可能是我的实现有问题，不一定必须</span></span><br><span class="line">    <span class="keyword">if</span> (pathParts[<span class="number">1</span>] === <span class="string">"favicon.ico"</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出path，即短URL的key</span></span><br><span class="line">    <span class="keyword">let</span> key = pathParts[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Looking for the target URL with key <span class="subst">${key}</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对env.SHORT_URL操作，就是对SHORT_URL这个KV数据库做操作</span></span><br><span class="line">    <span class="comment">// 这里就是从数据库中查询这个key对应的长URL</span></span><br><span class="line">    <span class="keyword">let</span> shortUrlJson = <span class="keyword">await</span> env.<span class="property">SHORT_URL</span>.<span class="title function_">get</span>(key);</span><br><span class="line">    <span class="keyword">if</span> (shortUrlJson === <span class="literal">null</span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`No target URL found for key <span class="subst">${key}</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">"No target URL found"</span>, {</span><br><span class="line">            <span class="attr">status</span>: <span class="number">404</span></span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造返回的JSON，然后返回一个HTTP 302让浏览器跳转</span></span><br><span class="line">    <span class="keyword">let</span> shortUrlObject = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(shortUrlJson) <span class="keyword">as</span> <span class="title class_">ShortUrl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Target URL for key <span class="subst">${key}</span> is <span class="subst">${shortUrlObject.url}</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Response</span>.<span class="title function_">redirect</span>(shortUrlObject.<span class="property">url</span>, <span class="number">302</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handlePostRequest</span>(<span class="params"></span></span><br><span class="line"><span class="params">    request: Request,</span></span><br><span class="line"><span class="params">    env: Env</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Response</span>&gt; {</span><br><span class="line">    <span class="keyword">let</span> requestBody = <span class="keyword">await</span> request.<span class="title function_">json</span>() <span class="keyword">as</span> <span class="title class_">RequestBody</span>;</span><br><span class="line">    <span class="keyword">let</span> targetUrl = requestBody.<span class="property">url</span>!;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Creating a short URL for target <span class="subst">${targetUrl}</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询这个长URL是否已经有对应的短URL</span></span><br><span class="line">    <span class="comment">// SHORT_URL_MAPPING表记录的是长URL对应的短URL</span></span><br><span class="line">    <span class="keyword">let</span> existingShortUrl = <span class="keyword">await</span> env.<span class="property">SHORT_URL_MAPPING</span>.<span class="title function_">get</span>(targetUrl) <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">if</span> (existingShortUrl !== <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// 查到了，就直接返回</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Existing short URL key <span class="subst">${existingShortUrl}</span> found for <span class="subst">${targetUrl}</span>`</span>);</span><br><span class="line">        <span class="keyword">let</span> responseBody = <span class="keyword">new</span> <span class="title class_">ResponseBody</span>(existingShortUrl);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">            <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(responseBody),</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">status</span>: <span class="number">201</span>,</span><br><span class="line">                <span class="attr">headers</span>: {</span><br><span class="line">                    <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出当前的序列值，将其转换为62进制，作为短URL的key</span></span><br><span class="line">    <span class="keyword">let</span> curentSequence = <span class="keyword">await</span> <span class="title function_">getCurrentSequence</span>(env);</span><br><span class="line">    <span class="keyword">let</span> key = <span class="title function_">string10to62</span>(curentSequence);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">new</span> <span class="title class_">ShortUrl</span>(targetUrl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存短URL，更新序列</span></span><br><span class="line">    <span class="keyword">await</span> env.<span class="property">SHORT_URL</span>.<span class="title function_">put</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">    <span class="keyword">await</span> env.<span class="property">SHORT_URL_MAPPING</span>.<span class="title function_">put</span>(targetUrl, key);</span><br><span class="line">    <span class="keyword">await</span> env.<span class="property">SHORT_URL</span>.<span class="title function_">put</span>(<span class="string">"sequence"</span>, <span class="string">`<span class="subst">${++curentSequence}</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`Created a new short URL key <span class="subst">${key}</span> for <span class="subst">${targetUrl}</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回生成的结果</span></span><br><span class="line">    <span class="keyword">let</span> responseBody = <span class="keyword">new</span> <span class="title class_">ResponseBody</span>(key);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">        <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(responseBody),</span><br><span class="line">        {</span><br><span class="line">            <span class="attr">status</span>: <span class="number">201</span>,</span><br><span class="line">            <span class="attr">headers</span>: {</span><br><span class="line">                <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取出当前的序列值，如果数据库中未初始化，</span></span><br><span class="line"><span class="comment"> * 那么就将初始序列写入数据库，然后返回初始序列。</span></span><br><span class="line"><span class="comment"> * 这个方法不涉及序列的更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getCurrentSequence</span>(<span class="params">env: Env</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; {</span><br><span class="line">    <span class="keyword">let</span> currentSequence = <span class="keyword">await</span> env.<span class="property">SHORT_URL</span>.<span class="title function_">get</span>(<span class="string">"sequence"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentSequence === <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">await</span> env.<span class="property">SHORT_URL</span>.<span class="title function_">put</span>(<span class="string">"sequence"</span>, <span class="string">`<span class="subst">${INITIAL_SEQUENCE_NUMBER}</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable constant_">INITIAL_SEQUENCE_NUMBER</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentSequence;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将10进制数转换为62进制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">string10to62</span>(<span class="params"><span class="built_in">number</span>: <span class="built_in">number</span></span>) {</span><br><span class="line">    <span class="keyword">var</span> chars = <span class="string">'0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ'</span>.<span class="title function_">split</span>(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> radix = chars.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> qutient = +<span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">do</span> {</span><br><span class="line">        <span class="keyword">let</span> mod = qutient % radix;</span><br><span class="line">        qutient = (qutient - mod) / radix;</span><br><span class="line">        arr.<span class="title function_">unshift</span>(chars[mod]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (qutient);</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">''</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="一些改进空间"><a href="#一些改进空间" class="headerlink" title="一些改进空间"></a>一些改进空间</h2><p>因为针对相同的长 URL 并不需要每次都返回相同的短 URL，所以<code>长URL -&gt; 短URL</code> 表中，我可以给每条记录都加一个 TTL，在有效期内，每次针对相同的长 URL 的生成请求都会返回同一个短 URL，同时刷新 TTL；而超过有效期后，这条映射就会被删除，对应的长 URL 则会生成新的短 URL。这样一定程度上既可以防止恶意刷接口炸数据库，同时也可以清除掉不太可能再被用到的数据。</p><p>而在如上改动的影响下，必然会出现多个短 URL 对应同一个长 URL 的情况，这多少也是浪费了一些空间。所以我感觉可以在<code>短URL -&gt; 长URL</code> 映射表中，增加一个最后访问时间字段，每有一个短 URL 的请求，就更新这个时间到请求的时间。再启动一个定时任务，定时扫描每个短链接的最后访问时间，并将在指定时间（如半年）内没有被访问过的短链接删除。（我觉得，应该没有人把短链接当成永久链接吧？就算不考虑被删，万一服务商跑路了呢？</p><p>此外，还可以给<code>短URL -&gt; 长URL</code> 映射表中再增加一个访问次数字段，以便结合其他收集到的数据来做分析。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzMTk5My9jZi13b3JrZXItc2hvcnQtdXJs">cf-worker-short-url - GitHub<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGlubGluaXNtaW5lL3AvOTUyMzA5NS5odG1s">短网址服务 (TinyURL) 生成算法<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI5MjcwMDM0L2Fuc3dlci80NjQ0NjkxMQ==">短 URL 系统是怎么设计的？ - iammutex 的回答 - 知乎<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9odWZhbmd5dW4uY29tLzIwMTcvc2hvcnQtdXJsLw==">短网址 (short URL) 系统的原理及其实现<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/%E7%9F%AD%E9%93%BE%E6%8E%A5/">短链接</category>
      
      
      <comments>https://www.boris1993.com/designing-and-implementing-a-short-url-service.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关闭 Vercel 的部署结果通知</title>
      <link>https://www.boris1993.com/disable-vercel-deployment-notification.html</link>
      <guid>https://www.boris1993.com/disable-vercel-deployment-notification.html</guid>
      <pubDate>Thu, 02 Feb 2023 15:57:51 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;每次 Vercel 部署之后，它都会在部署的 commit 下面发个类似这样的留言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Successfully deployed to the following URLs:&lt;/p&gt;
&lt;h2 id=&quot;blog-–-x2F&quot;&gt;&lt;a hr</description>
        
      
      
      
      <content:encoded><![CDATA[<p>每次 Vercel 部署之后，它都会在部署的 commit 下面发个类似这样的留言：</p><blockquote><p>Successfully deployed to the following URLs:</p><h2 id="blog-–-x2F"><a href="#blog-–-x2F" class="headerlink" title="blog – ./"></a>blog – ./</h2><hr><p>blog-boris1993.vercel.app</p><p>boris1993.com</p><p><a href="http://www.boris1993.com/">www.boris1993.com</a></p></blockquote><p>而且 GitHub 还会给我发邮件通知这个留言的内容，但是这个消息说实话没啥用，白白麻烦人而已，后来发现，在项目根目录创建一个名为 <code>vercel.json</code> 的文件，里面写上这样的配置就行：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"github"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"silent"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>这个配置的作用就是让 Vercel 不再往这个 repo 的 commit 下面评论部署状态。提交之后，Vercel 就会在这次部署开始遵循 <code>vercel.json</code> 的设定，不会再发送评论，自然也就不会有那封 “骚扰邮件” 了。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/tips/">小技巧</category>
      
      
      <category domain="https://www.boris1993.com/tags/Vercel/">Vercel</category>
      
      
      <comments>https://www.boris1993.com/disable-vercel-deployment-notification.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Concourse 实战 - 监控 GitHub release 并自动构建镜像</title>
      <link>https://www.boris1993.com/concourse-practise-build-and-push-docker-image.html</link>
      <guid>https://www.boris1993.com/concourse-practise-build-and-push-docker-image.html</guid>
      <pubDate>Sun, 29 Jan 2023 07:12:56 GMT</pubDate>
      
      <description>&lt;p&gt;距离上一篇 Concourse 相关的文章发布，已过去两年有余，期间因为没什么使用场景，不知道该怎么继续写下去，于是就断了。这次，我终于有机会将 Concourse 用到我自己的 home lab，并成功完成了一条 pipeline。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>距离上一篇 Concourse 相关的文章发布，已过去两年有余，期间因为没什么使用场景，不知道该怎么继续写下去，于是就断了。这次，我终于有机会将 Concourse 用到我自己的 home lab，并成功完成了一条 pipeline。</p><span id="more"></span><h2 id="背景及需求"><a href="#背景及需求" class="headerlink" title="背景及需求"></a>背景及需求</h2><p>偶然在网上看到了一个可以多端直播推流的工具，叫<span class="exturl" data-url="aHR0cHM6Ly9hbnRtZWRpYS5pby8="> Ant Media Server<i class="fa fa-external-link-alt"></i></span>，但是它的安装程序并不支持我正在用的 <code>Ubuntu 22.04 LTS</code>，同时它也没有提供制作好的 Docker 镜像，只能自己手动构建。可手动构建也太不优雅，根本不能忍，所以萌生了一个需求：监控 <code>Ant Media Server</code> 的 GitHub releases，如果有新的版本发布，那么就自动构建新的 Docker 镜像，并推送到我的 Docker Hub 中。</p><h2 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h2><p>首先，我要实现在 Concourse 里面监控 GitHub release。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvbmNvdXJzZS9naXRodWItcmVsZWFzZS1yZXNvdXJjZS8=">github-release<i class="fa fa-external-link-alt"></i></span>这个 resource type 就是干这件事的，所以我们可以在 pipeline 中定义这样一个 resource：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">github-release</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">ant-media</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">Ant-Media-Server</span></span><br><span class="line">    <span class="comment"># 默认监视的是"release-"开头的tag</span></span><br><span class="line">    <span class="comment"># 但Ant Media Server的tag都是以"ams-"开头的</span></span><br><span class="line">    <span class="comment"># 所以需要指定一下</span></span><br><span class="line">    <span class="attr">tag_filter:</span> <span class="string">"ams-v?([^v].*)"</span></span><br></pre></td></tr></tbody></table></figure><p>资源光在 <code>resources</code> 里面定义好还不够，我们需要在 pipeline 里面用 <code>get</code> 这个 task 来让 Concourse 做出从这个资源获取数据的操作。所以，开始写 pipeline 咯。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span> <span class="comment"># pipeline的名字</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span> <span class="comment"># 公开就意味着用户不需登录也能在dashboard中看到</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">get:</span> <span class="string">ant-media-server</span> <span class="comment"># 这里要写上面定义的resource的名字</span></span><br><span class="line">      <span class="attr">trigger:</span> <span class="literal">true</span> <span class="comment"># 这个资源将作为一个触发器</span></span><br></pre></td></tr></tbody></table></figure><p>这样就实现了让 Concourse 监控这个 GitHub release，并在发布新 release 的时候触发 pipeline 运行。而这个 task 在运行的时候，会将 release 中的 artifact 下载到 <code>ant-media-server</code> 这个目录中，所以我们也不用担心下载文件的问题。同时它还会把 release 的版本号写在 <code>version</code> 这个文件中，后面我们可以利用这个文件来生成 Docker 镜像的 tag。</p><p>有了 Ant Media Server 的成品文件，按照<span class="exturl" data-url="aHR0cHM6Ly9yZXNvdXJjZXMuYW50bWVkaWEuaW8vZG9jcy9kb2NrZXItYW5kLWRvY2tlci1jb21wb3NlLWluc3RhbGxhdGlvbg==">官方文档<i class="fa fa-external-link-alt"></i></span>的说法，接下来只要做两件事：下载 Dockerfile，执行 <code>docker build</code> 命令就行。但是放在 pipeline 里面，就没这么简单了。</p><p>先做第一件事，下载 Dockerfile。感谢<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pncmlmZi9odHRwLXJlc291cmNl"> jgriff/http-resource<i class="fa fa-external-link-alt"></i></span>这个仓库，它可以实现在 Concourse 里面通过 HTTP 下载一个文件。那么接下来 pipeline 里面可以这么写：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为这不是Concourse官方提供的resource type</span></span><br><span class="line"><span class="comment"># 所以需要在这里定义一个名为http-resource的resource type</span></span><br><span class="line"><span class="comment"># 并声明由jgriff/http-resource这个Docker镜像来实现</span></span><br><span class="line"><span class="attr">resource_types:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-resource</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">    <span class="attr">source:</span></span><br><span class="line">      <span class="attr">repository:</span> <span class="string">jgriff/http-resource</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-dockerfile</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">http-resource</span> <span class="comment"># 上面定义好这个resource type之后，就可以在这里用了</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="comment"># 指定要下载的文件</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://raw.githubusercontent.com/ant-media/Scripts/master/docker/Dockerfile_Process</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span> <span class="comment"># pipeline的名字</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span> <span class="comment"># 公开就意味着用户不需登录也能在dashboard中看到</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">  <span class="comment"># 让这两个task并行执行，节省时间</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">in_parallel:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">get:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">trigger:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 下载ant-media-server-dockerfile这个resource指定的文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">get:</span> <span class="string">ant-media-server-dockerfile</span></span><br></pre></td></tr></tbody></table></figure><p>现在 Dockerfile 可以下载到了，但是它是被保存在 <code>ant-media-server-dockerfile/body</code> 这个文件里面的，我们需要把它移动到 <code>ant-media-server</code> 这个目录里，才能保证后面成功运行 <code>docker build</code>。所以接下来要用 <code>mv</code> 命令把文件移过去。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">  <span class="comment"># 前略</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">move-dockerfile</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># task运行在Linux环境</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="comment"># task将通过ubuntu这个Docker镜像运行</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">ubuntu</span></span><br><span class="line">      <span class="comment"># 将这两个资源传给镜像</span></span><br><span class="line">      <span class="attr">inputs:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-dockerfile</span></span><br><span class="line">      <span class="comment"># 因为修改了ant-media-server这个资源的内容</span></span><br><span class="line">      <span class="comment"># 所以要将其输出，这样后续的task才能取到修改后的内容</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">run:</span> </span><br><span class="line">        <span class="attr">path:</span> <span class="string">mv</span></span><br><span class="line">        <span class="attr">args:</span> [<span class="string">"ant-media-server-dockerfile/body"</span>, <span class="string">"ant-media-server/Dockerfile"</span>]</span><br></pre></td></tr></tbody></table></figure><p>有了 Dockerfile，接下来就可以开始着手构建了。不用想，对于构建 Docker 镜像这样常见的 task，Concourse 预先制作好了 <a href="https://github.com/concourse/oci-build-task/"><code>concourse/oci-build-task</code></a>这个镜像来给我们用。</p><p>但是首先我们需要创建一个包含着 build args 的文件，因为文档的 <code>docker build</code> 命令中提到了 <code>--build-arg AntMediaServer=&lt;Replace_With_Ant_Media_Server_Zip_File&gt;</code> 这个参数，而 Ant Media Server 的 zip 文件名又会随着 release 而变化，同时 <code>oci-build-task</code> 的参数 <code>BUILD_ARGS_*</code> 并不支持 shell 命令，也就是说我不能通过 <code>BUILD_ARGS_AntMediaServer=ant-media-server-community-$(cat version).zip</code> 这样的方法来生成，那么只能用 <code>oci-build-task</code> 的 <code>BUILD_ARGS_FILE</code> 参数，传进去一个生成好的 build args file。</p><p>所以我们需要在 pipeline 中增加这两步来完成镜像的构建操作。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">  <span class="comment"># 前略</span></span><br><span class="line">  <span class="comment"># 生成build args file</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">generate-build-args</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">ubuntu</span></span><br><span class="line">      <span class="attr">inputs:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">run:</span> </span><br><span class="line">        <span class="comment"># 这里我曾经试过 </span></span><br><span class="line">        <span class="comment"># path: echo</span></span><br><span class="line">        <span class="comment"># args: ["AntMediaServer=ant-media-server-community-$(cat ant-media-server/version).zip", "&gt;", "ant-media-server/build_args.txt"]</span></span><br><span class="line">        <span class="comment"># 但是没成功，因为Concourse会把args做字符串拼接处理，最后当成一整个字符串传给命令</span></span><br><span class="line">        <span class="comment"># 所以其实变成了 echo "AntMediaServer=ant-media-server-community-$(cat ant-media-server/version).zip &gt; ant-media-server/build_args.txt"</span></span><br><span class="line">        <span class="comment"># 很明显这只能把这串字符串打在屏幕上，并不能生成文件</span></span><br><span class="line">        <span class="comment"># 所以只能通过调用sh来执行命令，把命令当成参数传给sh</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">sh</span></span><br><span class="line">        <span class="attr">args:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">-exc</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">'echo "AntMediaServer=ant-media-server-community-$(cat ant-media-server/version).zip" &gt; ant-media-server/build_args.txt'</span></span><br><span class="line">  <span class="comment"># 开始构建镜像</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">build-image</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">registry-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">concourse/oci-build-task</span></span><br><span class="line">      <span class="comment"># 构建所需的文件都在ant-media-server这个资源中</span></span><br><span class="line">      <span class="comment"># 所以将它传给这个task</span></span><br><span class="line">      <span class="attr">inputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="comment"># 将task输出的资源命名为image，并将其输出</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">params:</span></span><br><span class="line">        <span class="attr">CONTEXT:</span> <span class="string">ant-media-server</span></span><br><span class="line">        <span class="attr">BUILD_ARGS_FILE:</span> <span class="string">ant-media-server/build_args.txt</span></span><br><span class="line">      <span class="comment"># 缓存构建结果，加速将来的新的构建</span></span><br><span class="line">      <span class="attr">caches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">run:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">build</span></span><br></pre></td></tr></tbody></table></figure><p><code>oci-build-task</code> 成功后，会把镜像保存到 <code>image/image.tar</code> 文件中。要将它上传到 Docker Hub，我们还需要定义一个 <code>registry-image</code> 类型的 resource，来指定要将镜像上传到哪里。</p><p>因为上传 Docker Hub 需要登陆，而把 token 写在 pipeline 里面是非常蠢的行为，所以我把登陆信息放到了 Vault 中。向 Vault 放登陆信息很简单，在 <code>/concourse</code> 这个 path 中新建两个 secret 就可以了：</p><ul><li><code>/shared/dockerhub_username</code>，key 是 <code>value</code>，value 填写 Docker Hub 的用户名</li><li><code>/shared/dockerhub_token</code>，key 是 <code>value</code>，value 填写 Docker Hub 的 access token</li></ul><p>之所以我把登陆信息放到 <code>/shared</code> 这个 path 下，是因为我在 Vault 中配置了这个 path 作为一个公共的 path，在构建的时候要根据实际情况来修改，比如改成 team 的名字，或者放在 <code>/{team}/{pipeline}/</code> 下面。具体请参考 Concourse 与 Vault 集成相关的文档，这里不再赘述。</p><p>放好登陆信息后，就可以添加这样一个 resource：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="comment"># 前略</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-docker</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">registry-image</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">"((dockerhub_username))/ant-media-server"</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">"((dockerhub_username))"</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">"((dockerhub_token))"</span></span><br></pre></td></tr></tbody></table></figure><p>然后在 pipeline 最后增加两个 task，一个是读取 <code>ant-media-server/version</code> 的值，将其写在名为 <code>tag</code> 的变量中，后面我们会用这个变量来指定镜像的 tag；另一个就是对 <code>ant-media-server-docker</code> 这个资源执行 <code>put</code> 的操作，将 <code>image/image.tar</code> 这个镜像上传到 Docker Hub。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">  <span class="comment"># 前略</span></span><br><span class="line">  <span class="comment"># load_var用来从文件读入数据，并将其放在一个变量中</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">load_var:</span> <span class="string">tag</span></span><br><span class="line">    <span class="comment"># 指定要读的文件</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">ant-media-server/version</span></span><br><span class="line">    <span class="comment"># 为避免自动识别给我识别错，干脆直接指定文件内容的格式</span></span><br><span class="line">    <span class="comment"># trim就是纯文本，读取之后会去掉头尾的空白</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">trim</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">put:</span> <span class="string">ant-media-server-docker</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">image/image.tar</span></span><br><span class="line">      <span class="comment"># 上传时，同时更新latest和相关semver的镜像</span></span><br><span class="line">      <span class="comment"># 比如上传2.5.3时，会同时更新2.5，2，latest这三个tag</span></span><br><span class="line">      <span class="attr">bump_aliases:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 这里注意要指明从local var source中寻找变量，也就是开头的.:</span></span><br><span class="line">      <span class="comment"># 否则会找不到这个变量</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">"((.:tag))"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="完整的pipeline"><a href="#完整的pipeline" class="headerlink" title="完整的pipeline"></a>完整的 pipeline</h2><p>至此这个 pipeline 就完成了，下面我附上已经部署过的版本，供参考。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">resource_types:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-resource</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">    <span class="attr">source:</span></span><br><span class="line">      <span class="attr">repository:</span> <span class="string">jgriff/http-resource</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">github-release</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">ant-media</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">Ant-Media-Server</span></span><br><span class="line">    <span class="attr">tag_filter:</span> <span class="string">"ams-v?([^v].*)"</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-dockerfile</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">http-resource</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://raw.githubusercontent.com/ant-media/Scripts/master/docker/Dockerfile_Process</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-docker</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">registry-image</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">source:</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">"((dockerhub_username))/ant-media-server"</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">"((dockerhub_username))"</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">"((dockerhub_token))"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build-image</span></span><br><span class="line">  <span class="attr">public:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">build_log_retention:</span></span><br><span class="line">    <span class="comment"># 只保留最近5次的构建记录，以节省空间</span></span><br><span class="line">    <span class="attr">builds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">plan:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">in_parallel:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">get:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">trigger:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">get:</span> <span class="string">ant-media-server-dockerfile</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">load_var:</span> <span class="string">tag</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">ant-media-server/version</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">trim</span></span><br><span class="line">    <span class="attr">reveal:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">move-dockerfile</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">ubuntu</span></span><br><span class="line">      <span class="attr">inputs:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server-dockerfile</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">run:</span> </span><br><span class="line">        <span class="attr">path:</span> <span class="string">mv</span></span><br><span class="line">        <span class="attr">args:</span> [<span class="string">"ant-media-server-dockerfile/body"</span>, <span class="string">"ant-media-server/Dockerfile"</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">generate-build-args</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">docker-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">ubuntu</span></span><br><span class="line">      <span class="attr">inputs:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">run:</span> </span><br><span class="line">        <span class="attr">path:</span> <span class="string">sh</span></span><br><span class="line">        <span class="attr">args:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">-exc</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">'echo "AntMediaServer=ant-media-server-community-$(cat ant-media-server/version).zip" &gt; ant-media-server/build_args.txt'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">build-image</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">image_resource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">registry-image</span></span><br><span class="line">        <span class="attr">source:</span> </span><br><span class="line">          <span class="attr">repository:</span> <span class="string">concourse/oci-build-task</span></span><br><span class="line">      <span class="attr">inputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ant-media-server</span></span><br><span class="line">      <span class="attr">outputs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">params:</span></span><br><span class="line">        <span class="attr">CONTEXT:</span> <span class="string">ant-media-server</span></span><br><span class="line">        <span class="attr">BUILD_ARGS_FILE:</span> <span class="string">ant-media-server/build_args.txt</span></span><br><span class="line">      <span class="attr">caches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">run:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">put:</span> <span class="string">ant-media-server-docker</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">image/image.tar</span></span><br><span class="line">      <span class="attr">bump_aliases:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">"((.:tag))"</span></span><br></pre></td></tr></tbody></table></figure>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/concourse/">concourse</category>
      
      <category domain="https://www.boris1993.com/tags/concourse-ci/">concourse-ci</category>
      
      <category domain="https://www.boris1993.com/tags/vault/">vault</category>
      
      
      <comments>https://www.boris1993.com/concourse-practise-build-and-push-docker-image.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LeetCode 刷题笔记</title>
      <link>https://www.boris1993.com/leetcode-notes.html</link>
      <guid>https://www.boris1993.com/leetcode-notes.html</guid>
      <pubDate>Thu, 26 Jan 2023 07:23:57 GMT</pubDate>
      
      <description>&lt;p&gt;迫于找工作，不得不一边鄙视自己的智商，一边硬着头皮刷 LeetCode。既然开始刷题，那顺便做个笔记，以便日后温习。&lt;/p&gt;
&lt;p&gt;因为顺序是乱的，所以请善用 &lt;code&gt;CTRL-F&lt;/code&gt;。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>迫于找工作，不得不一边鄙视自己的智商，一边硬着头皮刷 LeetCode。既然开始刷题，那顺便做个笔记，以便日后温习。</p><p>因为顺序是乱的，所以请善用 <code>CTRL-F</code>。</p><span id="more"></span><h2 id="217-Contains-Duplicate"><a href="#217-Contains-Duplicate" class="headerlink" title="217. Contains Duplicate"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY29udGFpbnMtZHVwbGljYXRlLw==">217. Contains Duplicate<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,1]</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Input: nums = [1,2,3,4]</span><br><span class="line">Output: false</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        HashSet&lt;Integer&gt; hashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums) {</span><br><span class="line">            <span class="comment">// 看见一个数字就去hashSet里面查，</span></span><br><span class="line">            <span class="comment">// 查到就说明重复过了</span></span><br><span class="line">            <span class="keyword">if</span> (hashSet.contains(i)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            hashSet.add(i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="242-Valid-Anagram"><a href="#242-Valid-Anagram" class="headerlink" title="242. Valid Anagram"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdmFsaWQtYW5hZ3JhbS8=">242. Valid Anagram<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "anagram", t = "nagaram"</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Input: s = "rat", t = "car"</span><br><span class="line">Output: false</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> {</span><br><span class="line">        <span class="keyword">if</span> (s.length() != t.length()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串s中各个字符出现的次数</span></span><br><span class="line">        Map&lt;Character, Integer&gt; countS = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串t中各个字符出现的次数</span></span><br><span class="line">        Map&lt;Character, Integer&gt; countT = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) {</span><br><span class="line">            countS.put(</span><br><span class="line">                s.charAt(i), </span><br><span class="line">                countS.getOrDefault(s.charAt(i), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) {</span><br><span class="line">            countT.put(</span><br><span class="line">                t.charAt(i), </span><br><span class="line">                countT.getOrDefault(t.charAt(i), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Map#equals比较的是两个map中的键值对</span></span><br><span class="line">        <span class="comment">// 键值对相同，说明两串字符都用了相同的字母，每个字母出现的次数也一样</span></span><br><span class="line">        <span class="comment">// 即同字母异序词</span></span><br><span class="line">        <span class="keyword">return</span> countS.equals(countT);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1299-Replace-Elements-with-Greatest-Element-on-Right-Side"><a href="#1299-Replace-Elements-with-Greatest-Element-on-Right-Side" class="headerlink" title="1299. Replace Elements with Greatest Element on Right Side"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVwbGFjZS1lbGVtZW50cy13aXRoLWdyZWF0ZXN0LWVsZW1lbnQtb24tcmlnaHQtc2lkZS8=">1299. Replace Elements with Greatest Element on Right Side<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [17,18,5,4,6,1]</span><br><span class="line">Output: [18,6,6,6,1,-1]</span><br><span class="line">Explanation: </span><br><span class="line">- index 0 --&gt; the greatest element to the right of index 0 is index 1 (18).</span><br><span class="line">- index 1 --&gt; the greatest element to the right of index 1 is index 4 (6).</span><br><span class="line">- index 2 --&gt; the greatest element to the right of index 2 is index 4 (6).</span><br><span class="line">- index 3 --&gt; the greatest element to the right of index 3 is index 4 (6).</span><br><span class="line">- index 4 --&gt; the greatest element to the right of index 4 is index 5 (1).</span><br><span class="line">- index 5 --&gt; there are no elements to the right of index 5, so we put -1.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] replaceElements(<span class="type">int</span>[] arr) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = max;</span><br><span class="line">            max = Math.max(max, a);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解题思路就是把 explanation 反过来看，既然要找元素右边最大的数，那么就从最右开始，这样找到的最大的数必定适用于 <code>arr[i] ~ arr[length - 1]</code> 这个范围。</p><h2 id="392-Is-Subsequence"><a href="#392-Is-Subsequence" class="headerlink" title="392. Is Subsequence"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaXMtc3Vic2VxdWVuY2Uv">392. Is Subsequence<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "abc", t = "ahbgdc"</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Input: s = "axc", t = "ahbgdc"</span><br><span class="line">Output: false</span><br><span class="line"></span><br><span class="line">Input: s = "acb", t = "ahbgdc"</span><br><span class="line">Output: false</span><br><span class="line"></span><br><span class="line">Input: s = "aaaaaa", t = "bbaaaa"</span><br><span class="line">Output: false</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubsequence</span><span class="params">(String s, String t)</span> {</span><br><span class="line">        <span class="keyword">if</span> (s.equals(t) || s.length() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t.length() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) {</span><br><span class="line">            <span class="keyword">if</span> (t.charAt(i) == s.charAt(sIndex)) {</span><br><span class="line">                sIndex++;</span><br><span class="line">                <span class="keyword">if</span> (sIndex &gt;= s.length()) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解题思路就是整两个指针，<code>sIndex</code> 指向 <code>s</code> 的各个字符，在循环里面逐个取 <code>t</code> 的字符跟 <code>s[sIndex]</code> 对比，匹配到的话 <code>sIndex</code> 就往下走一步，如果 <code>sIndex</code> 能走到头，就说明 <code>s</code> 是 <code>t</code> 的子序列。</p><h2 id="58-Length-of-Last-Word"><a href="#58-Length-of-Last-Word" class="headerlink" title="58. Length of Last Word"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbGVuZ3RoLW9mLWxhc3Qtd29yZC8=">58. Length of Last Word<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "Hello World"</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The last word is "World" with length 5.</span><br><span class="line"></span><br><span class="line">Input: s = "   fly me   to   the moon  "</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The last word is "moon" with length 4.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLastWord</span><span class="params">(String s)</span> {</span><br><span class="line">        String[] strs = s.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">return</span> strs[strs.length - <span class="number">1</span>].length();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我的评价是，这道题不应该出现在 LeetCode，应该出现在大学 Java 课程的作业里。</p><h2 id="14-Longest-Common-Prefix"><a href="#14-Longest-Common-Prefix" class="headerlink" title="14. Longest Common Prefix"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbG9uZ2VzdC1jb21tb24tcHJlZml4Lw==">14. Longest Common Prefix<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = ["flower","flow","flight"]</span><br><span class="line">Output: "fl"</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> {</span><br><span class="line">        <span class="keyword">if</span> (strs.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿第一个字符串当模版，匹配剩下几个字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">commonPrefix</span> <span class="operator">=</span> strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; strs.length; i++) {</span><br><span class="line">            <span class="comment">// 如果commonPrefix在strs[i]的下标不是0</span></span><br><span class="line">            <span class="comment">// 那么就去掉commonPrefix的最后一个字母，直到下标为0</span></span><br><span class="line">            <span class="comment">// 如果没有common prefix，那么commonPrefix会被砍成空字符串</span></span><br><span class="line">            <span class="keyword">while</span> (strs[i].indexOf(commonPrefix) != <span class="number">0</span>) {</span><br><span class="line">                commonPrefix = commonPrefix.substring(<span class="number">0</span>, commonPrefix.length() - <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> commonPrefix;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算过程：（语言描述太费劲，直接拿 Replit 放示意图算了）</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mo-0mHl8WwWsSHDX4V-7bYAUGZodjRGawnyJS2NygvakiR5dihCV8UzWHK5fCWseo_znk-QV23IbwhHmbYzDUV1L2RylbjtAdsI8Yc3Ab80dTy8IqmzAYV-nXAjsUHcVwD3Bk206U9ziDJ_ZJV05k9oT0rlAY4Ec3wFw2twnnfQCN3iCrbEgvjG9ENijPx7y_?width=1024&amp;height=227&amp;cropmode=none"></p><h2 id="49-Group-Anagrams"><a href="#49-Group-Anagrams" class="headerlink" title="49. Group Anagrams"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZ3JvdXAtYW5hZ3JhbXMv">49. Group Anagrams<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = ["eat","tea","tan","ate","nat","bat"]</span><br><span class="line">Output: [["bat"],["nat","tan"],["ate","eat","tea"]]</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> {</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str: strs) {</span><br><span class="line">            <span class="comment">// 取一个字符串，打散成字符数组，把字符数组排序后得到一个新字符串</span></span><br><span class="line">            <span class="comment">// 比如eat-&gt; aet，tea-&gt;aet</span></span><br><span class="line">            <span class="comment">// 这个作为map的key</span></span><br><span class="line">            <span class="type">char</span>[] charArray = str.toCharArray();</span><br><span class="line">            Arrays.sort(charArray);</span><br><span class="line">            <span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(newStr)) {</span><br><span class="line">                map.put(newStr, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 把重排序后结果相同的字符串放在同一个key下面的List里面</span></span><br><span class="line">            map.get(newStr).add(str);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(map.values());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算过程语言不好描述…… 但是代码挺易懂的吧，实在看不明白的话自己 debug 一下就清楚了。</p><h2 id="118-Pascal’s-Triangle"><a href="#118-Pascal’s-Triangle" class="headerlink" title="118. Pascal’s Triangle"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcGFzY2Fscy10cmlhbmdsZS8=">118. Pascal’s Triangle<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example: </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: numRows = 5</span><br><span class="line">Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]</span><br><span class="line"></span><br><span class="line">Input: numRows = 1</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">generate</span><span class="params">(<span class="type">int</span> numRows)</span> {</span><br><span class="line">        <span class="comment">// 需要单独处理只有一行的情况</span></span><br><span class="line">        <span class="comment">// 否则会因为下面预设前两行数据的代码而返回错误的数据</span></span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> List.of(List.of(<span class="number">1</span>));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(numRows);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 前两行的内容是固定的</span></span><br><span class="line">        result.add(List.of(<span class="number">1</span>));</span><br><span class="line">        result.add(List.of(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">2</span>; row &lt; numRows; row++) {</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(row + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 这一行最左边肯定是1</span></span><br><span class="line">            list.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 两个两个取上一行的各个数，两两相加，得到当前格子的数字</span></span><br><span class="line">            <span class="comment">// 因为要取上一行的第i和第i+1个元素，所以循环结束条件得是上一行的个数减一</span></span><br><span class="line">            <span class="comment">// 否则就下标越界了</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">previousRow</span> <span class="operator">=</span> row - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; result.get(previousRow).size() - <span class="number">1</span>; i++) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> result.get(previousRow).get(i) + result.get(previousRow).get(i + <span class="number">1</span>);</span><br><span class="line">                list.add(sum);</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 最右边也肯定是1</span></span><br><span class="line">            list.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            result.add(list);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="27-Remove-Element"><a href="#27-Remove-Element" class="headerlink" title="27. Remove Element"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVtb3ZlLWVsZW1lbnQv">27. Remove Element<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,2,3], val = 3</span><br><span class="line">Output: 2, nums = [2,2,_,_]</span><br><span class="line">Explanation: Your function should return k = 2, with the first two elements of nums being 2.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="comment">// 不等于val的数字的个数，同时当作nums的一个指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val) {</span><br><span class="line">                nums[count] = nums[i];</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="929-Unique-Email-Addresses"><a href="#929-Unique-Email-Addresses" class="headerlink" title="929. Unique Email Addresses"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdW5pcXVlLWVtYWlsLWFkZHJlc3Nlcw==">929. Unique Email Addresses<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: emails = ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: "testemail@leetcode.com" and "testemail@lee.tcode.com" actually receive mails.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numUniqueEmails</span><span class="params">(String[] emails)</span> {</span><br><span class="line">        HashSet&lt;String&gt; uniqueEmails = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String email : emails) {</span><br><span class="line">            <span class="type">String</span> <span class="variable">sanitizedEmail</span> <span class="operator">=</span> <span class="string">""</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">indexOfPlusSign</span> <span class="operator">=</span> email.indexOf(<span class="string">"+"</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">indexOfAtSign</span> <span class="operator">=</span> email.indexOf(<span class="string">"@"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (indexOfPlusSign &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// 按题目要求，第一个加号及其以后的用户名部分都会被忽略</span></span><br><span class="line">                sanitizedEmail += email.substring(<span class="number">0</span>, indexOfPlusSign);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                sanitizedEmail += email.substring(<span class="number">0</span>, indexOfAtSign);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 按题目要求，用户名部分的点都会被忽略</span></span><br><span class="line">            sanitizedEmail = sanitizedEmail.replace(<span class="string">"."</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理完了用户名部分，把域名部分拼上去</span></span><br><span class="line">            sanitizedEmail += email.substring(indexOfAtSign);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 全处理完之后，扔进HashSet里面，顺便去重</span></span><br><span class="line">            uniqueEmails.add(sanitizedEmail);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uniqueEmails.size();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="205-Isomorphic-Strings"><a href="#205-Isomorphic-Strings" class="headerlink" title="205. Isomorphic Strings"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvaXNvbW9ycGhpYy1zdHJpbmdz">205. Isomorphic Strings<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example: </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "paper", t = "title"</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Input: s = "foo", t = "bar"</span><br><span class="line">Output: false</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIsomorphic</span><span class="params">(String s, String t)</span> {</span><br><span class="line">        <span class="comment">// 俩字符串长度都不一样，那必然不同形</span></span><br><span class="line">        <span class="keyword">if</span> (s.length() != t.length()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立s中每个字符与t中同位置字符的映射关系</span></span><br><span class="line">        <span class="comment">// 如 egg -&gt; add</span></span><br><span class="line">        <span class="comment">// e -&gt; a, g -&gt; d</span></span><br><span class="line">        HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>(s.length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) {</span><br><span class="line">            <span class="keyword">if</span> (map.containsValue(t.charAt(i))) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            map.put(s.charAt(i), t.charAt(i));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后从map里面，按照s的每个字母，取出映射过的字符</span></span><br><span class="line">        <span class="comment">// 拼在StringBuilder里面</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) {</span><br><span class="line">            <span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> map.get(s.charAt(i));</span><br><span class="line">            sb.append(ch);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查用映射拼出来的字符串与t是否相同</span></span><br><span class="line">        <span class="keyword">return</span> sb.toString().equals(t);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="347-Top-K-Frequent-Elements"><a href="#347-Top-K-Frequent-Elements" class="headerlink" title="347. Top K Frequent Elements"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdG9wLWstZnJlcXVlbnQtZWxlbWVudHMv">347. Top K Frequent Elements<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,1,1,2,2,3], k = 2</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) {</span><br><span class="line">        <span class="keyword">if</span> (nums.length == k) {</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Arrays</span><br><span class="line">            .stream(nums)</span><br><span class="line">            <span class="comment">// int -&gt; Integer</span></span><br><span class="line">            .boxed()</span><br><span class="line">            <span class="comment">// 收集到一个map中，key是数字，value是出现的次数</span></span><br><span class="line">            .collect(Collectors.groupingBy(num -&gt; num, Collectors.summingInt(num -&gt; <span class="number">1</span>)))</span><br><span class="line">            .entrySet()</span><br><span class="line">            .stream()</span><br><span class="line">            <span class="comment">// 把entry set按照value降序排列</span></span><br><span class="line">            .sorted(Map.Entry.comparingByValue((a, b) -&gt; Integer.compare(b, a)))</span><br><span class="line">            <span class="comment">// 取前k个</span></span><br><span class="line">            .limit(k)</span><br><span class="line">            <span class="comment">// 把key取出来，unbox成int</span></span><br><span class="line">            .mapToInt(e -&gt; e.getKey())</span><br><span class="line">            <span class="comment">// 最后造个数组出来返回掉</span></span><br><span class="line">            .toArray();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>还写 (chao) 了一个不用 <code>stream</code>，纯手工拿 entry set 做比较的解法，因过于丑陋，就不贴在这了，<code>submission</code> 在<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdG9wLWstZnJlcXVlbnQtZWxlbWVudHMvc3VibWlzc2lvbnMvODg2MTUyMzUzLw==">这里<i class="fa fa-external-link-alt"></i></span>。</p><h2 id="128-Longest-Consecutive-Sequence"><a href="#128-Longest-Consecutive-Sequence" class="headerlink" title="128. Longest Consecutive Sequence"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbG9uZ2VzdC1jb25zZWN1dGl2ZS1zZXF1ZW5jZS9kZXNjcmlwdGlvbi8=">128. Longest Consecutive Sequence<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [100,4,200,1,3,2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.</span><br><span class="line"></span><br><span class="line">Input: nums = [0,3,7,2,5,8,4,6,0,1]</span><br><span class="line">Output: 9</span><br><span class="line">Explanation: The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore its length is 9.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">longestStreak</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentStreak</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">// 因为当前数字已经记入了一个“连击”</span></span><br><span class="line">            <span class="comment">// 所以当这个数字跟上一个数字重复的时候，直接跳到下一个数字</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>]) {</span><br><span class="line">                <span class="comment">// 既然连续，那么当前数字跟上一个数字肯定差1</span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] == nums[i - <span class="number">1</span>] + <span class="number">1</span>) {</span><br><span class="line">                    currentStreak++;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 如果不连续了，记下来最大的连击数，当前连击数重置</span></span><br><span class="line">                    longestStreak = Math.max(longestStreak, currentStreak);</span><br><span class="line">                    currentStreak = <span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后取最大的连击数，这个不用多说吧</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(longestStreak, currentStreak);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="125-Valid-Palindrome"><a href="#125-Valid-Palindrome" class="headerlink" title="125. Valid Palindrome"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdmFsaWQtcGFsaW5kcm9tZS8=">125. Valid Palindrome<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "A man, a plan, a canal: Panama"</span><br><span class="line">Output: true</span><br><span class="line">Explanation: "amanaplanacanalpanama" is a palindrome.</span><br><span class="line"></span><br><span class="line">Input: s = " "</span><br><span class="line">Output: true</span><br><span class="line">Explanation: s is an empty string "" after removing non-alphanumeric characters.</span><br><span class="line">Since an empty string reads the same forward and backward, it is a palindrome.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="comment">// 把不是字母和数字的字符剔出去，然后转小写，方便比较</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.replaceAll(<span class="string">"[\\W]|_"</span>, <span class="string">""</span>);</span><br><span class="line">        str = str.toLowerCase();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">reversed</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str).reverse().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str.equals(reversed);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但是很显然，这个偷鸡解法并不是 <code>two pointers</code> 这个分类想要的，所以另一个解法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="comment">// 把不是字母和数字的字符剔出去，然后转小写，方便比较</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.replaceAll(<span class="string">"[\\W]|_"</span>, <span class="string">""</span>);</span><br><span class="line">        str = str.toLowerCase();</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> chars.length / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> chars.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// head和tail两个指针逐步向middle逼近</span></span><br><span class="line">        <span class="comment">// 一边走，一边比较两个指针指向的字母是不是一样</span></span><br><span class="line">        <span class="keyword">while</span> (head &lt; middle) {</span><br><span class="line">            <span class="keyword">if</span> (chars[head] != chars[tail]) {</span><br><span class="line">                <span class="comment">// 不一样的话，那自然就不是回文字符串了</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            head++;</span><br><span class="line">            tail--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdHdvLXN1bS8=">1. Two Sum<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) {</span><br><span class="line">        <span class="comment">// key是数字本身，value是数字所在下标</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">// 算一下target与当前下标的差</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">complement</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(complement)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] { map.get(complement), i };</span><br><span class="line">            }</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"No solution found"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算过程：</p><ul><li><code>i = 0</code>，<code>nums[i] = 2</code>，<code>complement = 9 - 2 = 7</code>，map 的 key 里面找不到 7，所以 <code>map.put(2, 0)</code></li><li><code>i = 1</code>，<code>nums[i] = 7</code>，<code>complement = 9 - 7 = 2</code>，map 的 key 里面有 2，即 <code>nums[i] + nums[map.get(2)] = 9</code>，返回 <code>[map.get(2), nums[i]]</code> 即 <code>[0, 1]</code></li></ul><h2 id="167-Two-Sum-II-Input-Array-Is-Sorted"><a href="#167-Two-Sum-II-Input-Array-Is-Sorted" class="headerlink" title="167. Two Sum II - Input Array Is Sorted"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdHdvLXN1bS1paS1pbnB1dC1hcnJheS1pcy1zb3J0ZWQ=">167. Two Sum II - Input Array Is Sorted<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: numbers = [2,7,11,15], target = 9</span><br><span class="line">Output: [1,2]</span><br><span class="line">Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) {</span><br><span class="line">        <span class="comment">// 两个指针</span></span><br><span class="line">        <span class="comment">// 一个从头往尾走，一个从尾往头走</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> numbers.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) {</span><br><span class="line">            <span class="comment">// 要求是计算两个数字之和是否等于target</span></span><br><span class="line">            <span class="comment">// 同时因为数组已经按升序排列</span></span><br><span class="line">            <span class="comment">// 那么如果加的结果大于target，就让尾指针往前，取更小的数</span></span><br><span class="line">            <span class="comment">// 如果结果小于target，就让头指针往后，取更大的数</span></span><br><span class="line">            <span class="comment">// 结果要么找到合适的两个数，要么两个指针相遇，即没有合适的数字</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> numbers[low] + numbers[high];</span><br><span class="line">            <span class="keyword">if</span> (sum == target) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] {low + <span class="number">1</span>, high + <span class="number">1</span>};</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) {</span><br><span class="line">                ++low;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                --high;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] {-<span class="number">1</span>, -<span class="number">1</span>};</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="15-3Sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvM3N1bQ==">15. 3Sum<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example: </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,0,1,2,-1,-4]</span><br><span class="line">Output: [[-1,-1,2],[-1,0,1]]</span><br><span class="line">Explanation: </span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.</span><br><span class="line">The distinct triplets are [-1,0,1] and [-1,-1,2].</span><br><span class="line">Notice that the order of the output and the order of the triplets does not matter.</span><br></pre></td></tr></tbody></table></figure></blockquote><p>一种解法是，类似 <code>Two Sum II</code>，取一个基准数，然后用 <code>Two Sum II</code> 的方法找基准数右边符合要求的两个数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="comment">// 先把nums排序，让这个数组符合Two Sum II的要求</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从头到尾遍历nums，取一个数字作为基准</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length &amp;&amp; nums[i] &lt;= <span class="number">0</span>; ++i) {</span><br><span class="line">            <span class="comment">// 这里的条件是为了不重复计算相同的数字，</span></span><br><span class="line">            <span class="comment">// 即只在当前数字不跟上一个数字重复的时候才计算</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || nums[i - <span class="number">1</span>] != nums[i]) {</span><br><span class="line">                twoSumII(nums, i, result);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">twoSumII</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, List&lt;List&lt;Integer&gt;&gt; result)</span> {</span><br><span class="line">        <span class="comment">// 取nums[i]右边的数组作为子数组</span></span><br><span class="line">        <span class="comment">// 左指针指向子数组第一个元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 右指针指向最后一个元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) {</span><br><span class="line">            <span class="comment">// 基准数 + 左指针 + 右指针</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[low] + nums[high];</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// 结果小于零，那么左指针往右走，取更大的一个数</span></span><br><span class="line">                ++low;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// 结果大于零，那么右指针往左走，取更小的一个数</span></span><br><span class="line">                --high;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 等于零，那么这三个数就是我们想要的</span></span><br><span class="line">                result.add(Arrays.asList(nums[i], nums[low], nums[high]));</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 继续缩小范围</span></span><br><span class="line">                low++;</span><br><span class="line">                high--;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 并且当low指向相同数字时，继续向右走</span></span><br><span class="line">                <span class="comment">// 然后重新在上一层循环里面继续找符合要求的数字</span></span><br><span class="line">                <span class="comment">// 毕竟区间内可能有多组符合条件的数字</span></span><br><span class="line">                <span class="keyword">while</span> (low &lt; high &amp;&amp; nums[low] == nums[low - <span class="number">1</span>]) {</span><br><span class="line">                    ++low;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但是，如果题目不允许改变 <code>nums</code> 数组呢？那么可以这样解，</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        Set&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; duplicates = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Integer, Integer&gt; seen = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (!duplicates.add(nums[i])) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">complement</span> <span class="operator">=</span> -(nums[i] + nums[j]);</span><br><span class="line">                <span class="comment">// 如果在seen这个map里面找到了曾经计算过的complement</span></span><br><span class="line">                <span class="comment">// 那么说明complement存在于nums数组中</span></span><br><span class="line">                <span class="comment">// 即找到了三个和为零的数字，nums[i]，nums[j]，complement</span></span><br><span class="line">                <span class="keyword">if</span> (seen.containsKey(complement) &amp;&amp; seen.get(complement) == i) {</span><br><span class="line">                    List&lt;Integer&gt; triplet = Arrays.asList(nums[i], nums[j], complement);</span><br><span class="line">                    <span class="comment">// 排序之后再放进set，避免插入内容相同位置不同的结果</span></span><br><span class="line">                    Collections.sort(triplet);</span><br><span class="line">                    result.add(triplet);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 记录nums[j]可以作为nums[i]的补充（complement）</span></span><br><span class="line">                seen.put(nums[j], i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(result);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="11-Container-With-Most-Water"><a href="#11-Container-With-Most-Water" class="headerlink" title="11. Container With Most Water"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY29udGFpbmVyLXdpdGgtbW9zdC13YXRlcg==">11. Container With Most Water<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: height = [1,8,6,2,5,4,8,3,7]</span><br><span class="line">Output: 49</span><br><span class="line">Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg"></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> height.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">            <span class="comment">// 取容器最短的那个板子，木桶原理嘛</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">ht</span> <span class="operator">=</span> Math.min(height[left], height[right]);</span><br><span class="line">            <span class="comment">// 板子左右有几格水</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">water</span> <span class="operator">=</span> right - left;</span><br><span class="line">            <span class="comment">// 水的体积，也就是蓝色正方形的面积，底*高</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">volume</span> <span class="operator">=</span> ht * water;</span><br><span class="line">            <span class="comment">// 记录最大的体积</span></span><br><span class="line">            max = Math.max(max, volume);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 既然要找最大的体积，当然哪个板子短就换哪个</span></span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) {</span><br><span class="line">                left++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                right--;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="121-Best-Time-to-Buy-and-Sell-Stock"><a href="#121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="121. Best Time to Buy and Sell Stock"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYmVzdC10aW1lLXRvLWJ1eS1hbmQtc2VsbC1zdG9jay8=">121. Best Time to Buy and Sell Stock<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: prices = [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</span><br><span class="line">Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> {</span><br><span class="line">        <span class="keyword">if</span> (prices.length &lt; <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">buyPrice</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">overallProfit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">profitIfSoldToday</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prices.length; i++) {</span><br><span class="line">            <span class="comment">// 让buyPrice保存最小的价格</span></span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; buyPrice) {</span><br><span class="line">                buyPrice = prices[i];</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算今日价格与买入价的差</span></span><br><span class="line">            profitIfSoldToday = prices[i] - buyPrice;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// overallProfit记录最大的总利润</span></span><br><span class="line">            <span class="keyword">if</span> (overallProfit &lt; profitIfSoldToday) {</span><br><span class="line">                overallProfit = profitIfSoldToday;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> overallProfit;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="108-Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY29udmVydC1zb3J0ZWQtYXJyYXktdG8tYmluYXJ5LXNlYXJjaC10cmVlLw==">108. Convert Sorted Array to Binary Search Tree<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-10,-3,0,5,9]</span><br><span class="line">Output: [0,-3,9,-10,null,5]</span><br></pre></td></tr></tbody></table></figure><p><img data-src="https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg"></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">return</span> builder(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">builder</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从中间将nums二分</span></span><br><span class="line">        <span class="comment">// 比如在第一层递归中，</span></span><br><span class="line">        <span class="comment">// [-10,-3,0,5,9] -&gt; [-10,-3,0] [5,9]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中间的数字作为二叉搜索树的根节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">rootNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[middle]);</span><br><span class="line">        <span class="comment">// 第一层递归中[-10, -3]拿去构造左边的子节点</span></span><br><span class="line">        rootNode.left = builder(nums, left, middle - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 第一层递归中[5,9]拿去构造右边的子节点</span></span><br><span class="line">        rootNode.right = builder(nums, middle + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rootNode;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>思路就是递归 + 二分，或许还有些分治思想？先找见根节点，然后把数组左右分成两半，在递归里面再重复这样的操作，直到只有一个根节点，也就是最下面的叶子节点。最后往上组装。<br>数据怎么跑的 debug 一下看看吧，用语言描述肯定要乱死。</p><h2 id="146-LRU-Cache"><a href="#146-LRU-Cache" class="headerlink" title="146. LRU Cache"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbHJ1LWNhY2hlL2Rlc2NyaXB0aW9uLw==">146. LRU Cache<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example: </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]</span><br><span class="line">[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, 1, null, -1, null, -1, 3, 4]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">LRUCache lRUCache = new LRUCache(2);</span><br><span class="line">lRUCache.put(1, 1); // cache is {1=1}</span><br><span class="line">lRUCache.put(2, 2); // cache is {1=1, 2=2}</span><br><span class="line">lRUCache.get(1);    // return 1</span><br><span class="line">lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}</span><br><span class="line">lRUCache.get(2);    // returns -1 (not found)</span><br><span class="line">lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}</span><br><span class="line">lRUCache.get(1);    // return -1 (not found)</span><br><span class="line">lRUCache.get(3);    // return 3</span><br><span class="line">lRUCache.get(4);    // return 4</span><br></pre></td></tr></tbody></table></figure></blockquote><p>解题思路：</p><p>LRU Cache，即 <code>Least Recently Used Cache</code>，其运作机理是，如果在 cache 已满的时候添加新的记录，那么要先删掉其中最不常用的记录，然后添加新的记录。</p><p>我们可以用双向链表来实现这个效果，越靠近链表头，就代表这个元素越常被用到；反之越靠近链表尾，这个元素就越不常用，链表尾的前一个元素也将是在 cache 满了之后被删掉的那个元素。</p><p>那么首先需要创建一个类 <code>Node</code>，代表双向链表中的节点。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">    Node next;</span><br><span class="line">    Node prev;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> {</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这时候就可以初始化 <code>LRUCache</code> 这个类的结构了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> {</span><br><span class="line">    <span class="comment">// 链表头节点，永远不动</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 链表尾节点，永远不动</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 存储key与Node的映射，get的时候实际上是从这取值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Node&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// cache容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> {</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="comment">// 双向链表头尾相连</span></span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来先实现 <code>get</code> 方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当一个节点被get</span></span><br><span class="line"><span class="comment">// 那么就把它提到双向链表的头部位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> {</span><br><span class="line">    <span class="comment">// 根据题目要求，key不存在就返回-1</span></span><br><span class="line">    <span class="keyword">if</span> (!map.containsKey(key)) {</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">nodeNext</span> <span class="operator">=</span> node.next;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">nodePrev</span> <span class="operator">=</span> node.prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先把这个node从当前位置抹去</span></span><br><span class="line">    nodePrev.next = nodeNext;</span><br><span class="line">    nodeNext.prev = nodePrev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后插入到头部</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">headNext</span> <span class="operator">=</span> head.next;</span><br><span class="line">    node.next = headNext;</span><br><span class="line">    node.prev = head;</span><br><span class="line">    headNext.prev = node;</span><br><span class="line">    head.next = node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.value;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来实现 <code>put</code> 方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> {</span><br><span class="line">    <span class="comment">// 如果key已经存在</span></span><br><span class="line">    <span class="comment">// 那么put相当于更新value，同时刷新在LRU Cache中的位置</span></span><br><span class="line">    <span class="comment">// 所以先把已有的这个node删掉</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key)) {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.remove(key);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">nodeNext</span> <span class="operator">=</span> node.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">nodePrev</span> <span class="operator">=</span> node.prev;</span><br><span class="line">        nodePrev.next = nodeNext;</span><br><span class="line">        nodeNext.prev = nodePrev;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果cache满了，就要先删掉末尾的节点（末位淘汰制？</span></span><br><span class="line">    <span class="keyword">if</span> (map.size() == capacity) {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">leastRecentUsedNode</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        map.remove(leastRecentUsedNode.key);</span><br><span class="line"></span><br><span class="line">        leastRecentUsedNode.prev = tail;</span><br><span class="line">        tail.prev = leastRecentUsedNode.prev;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">    map.put(key, newNode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把这个新建的node塞到head和headNext之间</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">headNext</span> <span class="operator">=</span> head.next;</span><br><span class="line">    newNode.prev = head;</span><br><span class="line">    newNode.next = headNext;</span><br><span class="line">    headNext.prev = newNode;</span><br><span class="line">    head.next = newNode;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可见新增节点和删除节点操作的代码是经常重复的，所以抽成两个单独的方法。最后完整的解题代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, Node&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> {</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> {</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) {</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        remove(node);</span><br><span class="line">        insert(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> {</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) {</span><br><span class="line">            remove(map.get(key));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (map.size() == capacity) {</span><br><span class="line">            remove(tail.prev);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        insert(<span class="keyword">new</span> <span class="title class_">Node</span>(key, value));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node node)</span> {</span><br><span class="line">        map.remove(node.key);</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Node node)</span> {</span><br><span class="line">        map.put(node.key, node);</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">headNext</span> <span class="operator">=</span> head.next;</span><br><span class="line">        node.prev = head;</span><br><span class="line">        node.next = headNext;</span><br><span class="line">        headNext.prev = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">        Node next;</span><br><span class="line">        Node prev;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> {</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><h2 id="9-Palindrome-number"><a href="#9-Palindrome-number" class="headerlink" title="9. Palindrome number"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcGFsaW5kcm9tZS1udW1iZXIv">9. Palindrome number<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 121</span><br><span class="line">Output: true</span><br><span class="line">Explanation: 121 reads as 121 from left to right and from right to left.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">input</span> <span class="operator">=</span> x;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">reversedNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// x从低位往高位取数字，然后从高位到低位填给reversedNum</span></span><br><span class="line">        <span class="comment">// 即把x反转</span></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">// reversedNum乘10，加上x除以10的余数，即当前x的末位数</span></span><br><span class="line">            reversedNum = reversedNum * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// x除以10，抛掉当前的末位数</span></span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (reversedNum &gt; Integer.MAX_VALUE || reversedNum &lt; Integer.MIN_VALUE) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> input == reversedNum;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算过程：</p><ul><li><code>x = 121</code>，<code>reversedNum = 0</code>；<code>reversedNum = reversedNum * 10 + x % 10 = 0 + 1 = 1</code>；<code>x = x / 10 = 121 / 10 = 12</code></li><li><code>x = 12</code>，<code>reversedNum = 1</code>；<code>reversedNum = reversedNum * 10 + x % 10 = 10 + 2 = 12</code>；<code>x = x / 10 = 12 / 10 = 1</code></li><li><code>x = 1</code>，<code>reversedNum = 12</code>；<code>reversedNum = reversedNum * 10 + x % 10 = 120 + 1 = 121</code>；<code>x = x / 10 = 1 / 10 = 0</code></li><li><code>input == reversedNum =&gt; 121 == 121 =&gt; true</code></li></ul><p>写到这想到还有个粗暴解法，把数字当成字符串，翻转一下然后比较两个字符串是不是一样不就行了，做什么数学题？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputString</span> <span class="operator">=</span> Integer.toString(x);</span><br><span class="line">        <span class="type">String</span> <span class="variable">reversedString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(inputString).reverse().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inputString.equals(reversedString);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>多清爽，三行完事还不烧脑子。</p><h2 id="13-Roman-to-Integer"><a href="#13-Roman-to-Integer" class="headerlink" title="13. Roman to Integer"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcm9tYW4tdG8taW50ZWdlci8=">13. Roman to Integer<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = "MCMXCIV"</span><br><span class="line">Output: 1994</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="comment">// 基本罗马数字</span></span><br><span class="line">        <span class="keyword">final</span> HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">7</span>);</span><br><span class="line">        map.put(<span class="string">'I'</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">'V'</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">'X'</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">'L'</span>, <span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">'C'</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">'D'</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">'M'</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// IV这种左减格式的数字收拾起来太麻烦，</span></span><br><span class="line">        <span class="comment">// 直接转成连续的基本数字</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">sanitized</span> <span class="operator">=</span> s</span><br><span class="line">                .replace(<span class="string">"IV"</span>, <span class="string">"IIII"</span>)</span><br><span class="line">                .replace(<span class="string">"IX"</span>, <span class="string">"VIIII"</span>)</span><br><span class="line">                .replace(<span class="string">"XL"</span>, <span class="string">"XXXX"</span>)</span><br><span class="line">                .replace(<span class="string">"XC"</span>, <span class="string">"LXXXX"</span>)</span><br><span class="line">                .replace(<span class="string">"CD"</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">                .replace(<span class="string">"CM"</span>, <span class="string">"DCCCC"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">char</span>[] chars = sanitized.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> aChar : chars) {</span><br><span class="line">            result += map.get(aChar);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算过程：</p><ul><li><code>MCMXCIV</code>(1994) =&gt; <code>M CM XC IV</code>(1000 900 90 4) =&gt; <code>M DCCC LXXXX IIII</code></li><li>从头到尾遍历 <code>MDCCCLXXXXIIII</code> 中每个字符，去 map 里面找对应的阿拉伯数字，加起来就完事了</li></ul><p>一开始做的时候愁死我了，没有左减格式的数字没啥难度，想破脑袋也没想到怎么处理左减，抄答案发现还能这么玩，属实打开思路了。</p><h2 id="252-Meeting-Rooms"><a href="#252-Meeting-Rooms" class="headerlink" title="252. Meeting Rooms"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWVldGluZy1yb29tcy8=">252. Meeting Rooms<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Given an array of meeting time <code>intervals</code> where <code>intervals[i] = [starti, endi]</code>, determine if a person could attend all meetings.</p><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: intervals = [[0,30],[5,10],[15,20]]</span><br><span class="line">Output: false</span><br></pre></td></tr></tbody></table></figure></blockquote><p>Easy 级别的题，思路很简单，先把会议安排按照开始时间升序排列，然后比较下一场会议的开始时间是否小于上一场会议的结束时间，是的话就说明这个人无法参加全部会议。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canAttendMeetings</span><span class="params">(<span class="type">int</span>[][] intervals)</span> {</span><br><span class="line">        <span class="keyword">if</span> (intervals.length &lt;= <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sort with the meeting start time</span></span><br><span class="line">        Arrays.sort(intervals, (a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastEndTime</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">currentBeginTime</span> <span class="operator">=</span> intervals[i][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (currentBeginTime &lt; lastEndTime) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            lastEndTime = intervals[i][<span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="253-Meeting-Rooms-II"><a href="#253-Meeting-Rooms-II" class="headerlink" title="253. Meeting Rooms II"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWVldGluZy1yb29tcy1paS8=">253. Meeting Rooms II<i class="fa fa-external-link-alt"></i></span></h2><blockquote><p>Given an array of meeting time intervals <code>intervals</code> where <code>intervals[i] = [starti, endi]</code>, return the minimum number of conference rooms required.</p><p>Example:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: intervals = [[0,30],[5,10],[15,20]]</span><br><span class="line">Output: 2</span><br></pre></td></tr></tbody></table></figure></blockquote><p>这道题要用到优先队列，具体算法见注释。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMeetingRooms</span><span class="params">(<span class="type">int</span>[][] intervals)</span> {</span><br><span class="line">        <span class="keyword">if</span> (intervals.length &lt;= <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> intervals.length;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个优先队列，存储会议的结束时间，按升序排列</span></span><br><span class="line">        <span class="comment">// 因为会议结束，下一场会议才能占用这个会议室</span></span><br><span class="line">        <span class="comment">// 所以只需要比较当前会议的开始时间与上一场会议的结束时间</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; allocator = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(</span><br><span class="line">            intervals.length,</span><br><span class="line">            (a, b) -&gt; a - b</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新排序intervals，按照会议的开始时间升序排列</span></span><br><span class="line">        Arrays.sort(</span><br><span class="line">            intervals, </span><br><span class="line">            (a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一场会议占用一个会议室</span></span><br><span class="line">        allocator.add(intervals[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) {</span><br><span class="line">            <span class="comment">// 从第二场会议开始检查</span></span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= allocator.peek()) {</span><br><span class="line">                <span class="comment">// 如果第二场会议在开始的时候，上一场会议已经结束</span></span><br><span class="line">                <span class="comment">// 那么释放掉上一场会议的会议室</span></span><br><span class="line">                <span class="comment">// 也就是删除掉优先队列的第一个元素</span></span><br><span class="line">                allocator.poll();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前会议肯定要占一个会议室</span></span><br><span class="line">            allocator.add(intervals[i][<span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> allocator.size();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="655-Print-Binary-Tree"><a href="#655-Print-Binary-Tree" class="headerlink" title="655. Print Binary Tree"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcHJpbnQtYmluYXJ5LXRyZWUv">655. Print Binary Tree<i class="fa fa-external-link-alt"></i></span></h2><p>抄答案<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcHJpbnQtYmluYXJ5LXRyZWUvc29sdXRpb25zLzIyMjI3NTgvamF2YS1lYXN5LXNvbHV0aW9uLw=="> Java Easy Solution - shawonnirob16<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">printTree</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> getHeight(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> height + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">column</span> <span class="operator">=</span> (<span class="type">int</span>) Math.pow(<span class="number">2</span>, height + <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先全部填充空字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; row; k++) {</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; column; i++) {</span><br><span class="line">                list.add(<span class="string">""</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            result.add(list);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> column - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        fill(result, left, right, level, root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归整个树，每层高度加一，计算树的高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> getHeight(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> getHeight(root.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + Math.max(left, right);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(</span></span><br><span class="line"><span class="params">        List&lt;List&lt;String&gt;&gt; result,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> left,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> right,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> level,</span></span><br><span class="line"><span class="params">        TreeNode root</span></span><br><span class="line"><span class="params">    )</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算list的中间位置的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 在中间位置填入当前节点的值</span></span><br><span class="line">        result.get(level).set(middle, String.valueOf(root.val));</span><br><span class="line"></span><br><span class="line">        fill(result, left, middle - <span class="number">1</span>, level + <span class="number">1</span>, root.left);</span><br><span class="line">        fill(result, middle + <span class="number">1</span>, right, level + <span class="number">1</span>, root.right);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/LeetCode/">LeetCode</category>
      
      <category domain="https://www.boris1993.com/tags/%E4%B9%90%E6%89%A3/">乐扣</category>
      
      
      <comments>https://www.boris1993.com/leetcode-notes.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>我的新冠感染纪实</title>
      <link>https://www.boris1993.com/recording-my-infection-of-corona.html</link>
      <guid>https://www.boris1993.com/recording-my-infection-of-corona.html</guid>
      <pubDate>Sat, 24 Dec 2022 10:48:15 GMT</pubDate>
      
      <description>&lt;p&gt;我，很不幸，于 2022-12-23 夜，新冠奥密克戎发作。不过，最近记录自己被感染的生活好像是个流量密码，那我干脆也蹭一波热点，记录一下我感染之后的感受。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>我，很不幸，于 2022-12-23 夜，新冠奥密克戎发作。不过，最近记录自己被感染的生活好像是个流量密码，那我干脆也蹭一波热点，记录一下我感染之后的感受。</p><span id="more"></span><h2 id="病发"><a href="#病发" class="headerlink" title="病发"></a>病发</h2><p>说来，一开始有征兆还是在 22 日下午，我从医院开完药出来之后，就偶尔会咳两声，但是嗓子里的感觉又不像是感染，更像是吸入了什么灰尘，喉咙那有点麻麻沙沙的异物感，所以就没放在心上。</p><p>正经开始感觉不对劲，是在 12 月 23 日的下午。本来这天阳光不是很足，上海又降温了，好死不死我还没开空调，屋里本来就有点冷。我慢慢开始感觉有点浑身发凉，但是没想到是发病，以为只是单纯的着凉而已，于是打开了空调，期盼能舒服一点。</p><p>但是慢慢的事情开始朝不对劲的方向发展，晚上我开始感觉脑袋会忽然飘一下，后背也开始有一种奇怪但熟悉的痛感，我不知道该怎么描述，就是那种你摸上去就会有点钝痛的那种感觉。我发觉这事不是那么简单，我估计是发烧了，但这时候我依旧没往新冠感染上想，以为就是个普通感冒。但是苦于我的温度计找不到了，不量体温又不是个办法，遂硬着头皮，走到小区对面的药房，借了药房的温度计测了一下。结果不出预料，37 度 5。因为药房的温度计也卖完了，于是在咨询了一下怎么吃药之后，就回去了。</p><p>说真的，家里必须得时常检查下温度计还能不能找见，发烧的时候顶着寒冷出门绝不是个好主意。我在走路的时候，时不时就会晕一下，过马路左右扭头的时候甚至耳朵嗡的一下，虽然神志清楚，但是总感觉险些要晕过去。也就算我命大，硬是慢慢的走回来了。</p><p>书归正传，有时候吧，这事还真就是无巧不成书，正好我在 22 日那天要去医院开我的焦虑症的药，就顺路在药房买了些能对应新冠感染的药，虽然不是布洛芬和对乙酰氨基酚这种值钱玩意，但至少退烧、止痛、镇咳、缓解咽痛的药都拿到了。只是万万没想到第二天就能派上用场…..TAT。</p><p>得了医嘱，回来开始吃退烧药。药名叫<code>酚氨咖敏片</code>，说主治感冒、发烧、头痛，里面包含氨基比林、对乙酰氨基酚、咖啡因、马来酸氯苯那敏。吃了药，想到没有体温计还是不行，于是打开各种外卖平台，想看看附近药房有没有能外卖过来的。要不说咱命好呢，正好交大附近的一个药房还有额温枪，不容多想，手起键落下了一单。一看预计 00:23 送达，我还挺美，哪知道临到凌晨的时候美团说已经送达？？？我一问骑手，才知道他们不肯单独为这一个玩意跑这么远，只能等第二天中午再送。行吧，没盼头了，一摸电热毯烧的很热，空调也够劲，睡。</p><h2 id="次日"><a href="#次日" class="headerlink" title="次日"></a>次日</h2><p>一晚上觉也没睡太好，醒了有三四次，期间还做了不少奇奇怪怪的梦，到了早上 10 点来钟，迷迷糊糊的醒了，但是感觉非常赖床，左滚右滚就是不想起，还感觉身上似乎出了很多的汗。翻腾了大概半小时，终于鼓起勇气，爬出被窝起床。一摸后背，果然湿漉漉的，出了不少的汗。起来刷过牙洗过脸，开始吃药。过了会看到我这还有不少抗原试剂盒，是中旬上海封城的时候发的，于是就拿了一个测了一下，一开始只看见 C 有杠杠，T 没有，还庆幸不是新冠，但是 15 分钟后，T 这里开始出现浅浅的一道。果然，还是没躲掉。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mWO2voEUyEI09T5DfSeht0WLEhBksrM1G-I2m6Qz1cph3sn3FvgkBze2-raZzaQYy0QtBH58HvWkrIOGbMPRpiA6nus5-pdy2BM88NtU_hpRbKP8H69u8yn9mUvkq28d0UYhuC7uQrbkcRfIkQh4HW7kTtU6_p2J2SbulOeLFuzmnSihKQXNh8born4k8Iqo4?width=2268&amp;height=4032&amp;cropmode=none" alt="噫！好了！我中了！"></p><p>既然中了，那果然还是得搞点更对症的药。问了之前感染过的兄弟，都说布洛芬好使，但是现在药房肯定是买不到了。好在微信上线了一个互助小程序，我成功联系到了两个人，一位给我送了 4 片对乙酰氨基酚，另一位网购了 100 来片布洛芬，我正在等他到货。中午吃过饭之后，跑腿小哥也把药送到了我这里。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mAj0KEJQDSmAdPc9Gp3eRloZUcZhlxE78QLynR-nL5HiKM202igAlGwbVZhPzHzSJ79vtdaxB-p2RkS-BLLQN7pjVgPTwGeP7wihpBB4g-B24Jwj3qz7o6yXaTmlqeBfHikxcMi9-SmlruXConpxWlzUI2NkBXMZnauHyq9WD_HT-r1UetDROti8Hxc2bW0cM?width=1080&amp;height=1920&amp;cropmode=none"></p><p>之前一直不相信自己是新冠感染的另一个原因就是，很多人都说他们感染之后丧失了嗅觉和味觉，但是我味觉丝毫不受任何影响，吃什么都很有味，包括头一天晚上吃的柚子，和这一天吃的外卖，味觉都很正常，没有发生味觉丧失和味觉改变。或许这个症状也是因人而异吧。至于嗅觉，我是个过敏性鼻炎患者，嗅觉不好使不是一年两年了，所以就算没了我也不知道……</p><p>下午也没心情搞什么，躺在床上无所事事，大概三点来钟睡着了，一觉干到 6 点半。醒来没一会接到家里的电话，说已经在来上海的飞机上了。我是感觉又安心又担心，安心当然是因为父母能来照顾我，但是我又非常害怕传染给他们，不过既然来了，也劝不回去，只能车到山前必有路了吧。吃过晚饭，一边写这篇流水账，一边等父母过来。</p><p>对了，还没说我买的额温枪呢。实话说我一开始特别怀疑这玩意的准确度，因为中午拿到之后我就测了好几次，那会身体明明感觉到还有一点烧，但是一直都只能测出来 36 度 5、36 度 8。直到刚才 (20:54)，我明显感觉到体温又上来之后，才测出来个 37 度 6，而且这还夹杂在一堆 37 度整、36 度 8 之间。果然还是得整个水银的才靠谱啊。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mvpAGcJhm0Ud7IgIpXh_ebi-CJ_hvcEOunXKa0-GyFdpnHvxh2pZo8t-z1xrjmQWDubZ-xUd6ySxUEmBohnXrwEDrJJ32_kzqZc-CMm25T-URLNl7A1_y9dPca2CV4VPB9ybTbB_hT9mUQNm_hZ75NLNd1Msl12-4NhittfqsuFP07KCBKPbAZzAdfKcg17kR?width=2268&amp;height=4032&amp;cropmode=none"></p><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>前一天晚上还是有点低烧，看到网上建议忍一忍再吃退烧药，让体温帮助杀灭病毒，所以睡前也没喝布洛芬，直接钻进烧热了电热毯的被窝睡了。一晚上还是各种奇怪的梦。可早上一醒，嘿，你猜怎么着？我不烧了！然而嗓子比前一天加倍的疼，咳嗽好像也略微多了点，还带着白痰。莫非病毒已经被打的溃不成军，妄图用加重咳嗽的方法往外大量散播么？如果屋里只有我一个人的话，那我才懒得管，你随便爱往哪传播就往哪传播去，但是现在我父母也来了，那我的评价就是</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mHsmVq1FsngCGjpoupugQmvcHH_aq6pFAIOw9nkLrZ97rGWUpk4cnvdzv5iZZ8w_OcyIWEkifWVdOOByx8isrFVbrJLeJMGBqQtxgD8OoK231mwDKm-5FjFpBOWQuAziP21oZofqePtefWifQ0y9D9PWRu2G5dQvaCn_0A0sfu69ChbHckn3Ix5h7MMbvfyH6?width=1024&amp;height=640&amp;cropmode=none"></p><p>继续说症状，今天后背还是有类似发烧引发的那种痛感，隐隐还有点头疼，而且偶尔脑袋还是会恍惚一下，大概是发烧导致的问题还没好利索。</p><p>中午吃过饭，也没什么精神头干别的，直接从大概一两点睡到了将近 6 点，起来之后，因为头疼搞得很恶心，吐了一大口。好在没有影响食欲，晚饭依旧吃得很香。饭后也没啥精神，待了会就睡了。</p><h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><p>第四天一整天的主旨就是一个字：睡。</p><p>头天晚上睡觉的时候，一晚上醒了几次，断断续续的睡到了大概十点来钟，起来也没什么精神，什么都不想干，只想趴着，只想睡觉。但也有值得高兴的事，母上大人做的素面一如既往的好吃。</p><p>下午断断续续睡了好几觉，睡醒了就还是头疼。喝了口热水，感觉有点恶心，暗觉不妙，但是也没多想，就想接着睡。但是刚躺下没一会，突然胃就一抽给呕出来一口。说时迟那时快，我强忍着咬紧牙关，光速戴上口罩冲进厕所，哇哇的把中午饭和晚饭都吐干净了。饭吐了不说，还吐了好几口鲜血，场面甚是恐怖。我害怕是肺出血，还特意咳了口痰，还好还好痰里没血。但又想到最近吃的药有点杂，开始担心是不是肝坏了，遂在支付宝上找了个在线问诊，大夫听完我描述说，不像是肝损伤，建议我把药都停了，饭不要吃太烫的，观察一下看看，如果不再吐就没事了。还好还好，不需要去 ICU。完事喝了点水，待了会就准备继续睡觉。可是白天睡了太多，晚上断断续续的差不多两点钟才正经睡着。</p><p>为啥我突然开始担心肝呢？因为这几天确实药吃的有点杂，有布洛芬，有胆木浸膏糖浆，还有父母从老家带来的 “新冠治疗方” 中药，我害怕里面有什么成分重叠，给肝脏上了太大压力，就像那些因为害怕而过量服药的人一样。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4momBf0-4kRXGd8YzfJ6IHXOC5B4ZYoOdhbTDy8wnPJZ_68SQ3QKJIHL08fZDInoe_q5BBfI8IuyEms3o6aoFuiRo9HeLLQ49_OR7aFroxb-XvNxVPkBQZThtd5vORAu-oTxac9YmPr2-hJcfq5lQFuh27E9SLy9TFovbUSxj4GodB1ZIhNTMGaWiI0AzA9AoI?width=3024&amp;height=3024&amp;cropmode=none"></p><p>不过既然大夫都说把不必要的药都停了，那就遵医嘱呗，反正新冠这玩意最后还是得靠自己，不烧也不死命的咳，那也就别瞎吃药了。</p><p>忘了是中午还是下午，顺便又做了个自测，这次变成强阳性了，T 这一杠红的甚是晃眼。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4m42eoOX0de8IY9xgzaa3XARYNIKRJ-YEX8FIJpYXKRqHssNwGu3al8ub991s7nRKM7FQ-o5UuXj8kZtmvw65O1UbTjQ5FZqm2Dp-03rubFSXO7f0_tiq9vvfor2swOyfjVqEWJp2L31zDFZjIeuNcp9lyCsV04yo-licKxim2HH_OdhcTesOz0IuDjQFNSMeC?width=2268&amp;height=4032&amp;cropmode=none"></p><p>这两天也算是目前为止精神最差的两天，什么都不想干，要是味觉再没了的话，我可能连饭都不想吃。</p><h2 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h2><p>今天早上的主题是：疼！</p><p>第四天开始，我的左边嗓子就已经开始疼起来了，但是今天我没想到竟能如此的疼！什么吞刀片感，明明是电钻打眼感好吗？而且正好是左边打穿了，正在开始往右边打！</p><p>不过也有好消息，就是咳嗽更少了，而且也确实没有再吐血，甚至没有恶心的感觉。精神状态也比前两天好了不少。前两天不止是什么都不想干，听到微信的通知声音都烦躁的很。</p><p>而且今天开始，咳嗽的次数又变少了，一天满打满算好像也就不到 10 次的样子。感觉应该是快要康复了？</p><p>早饭吃了个黑麦片配小麦胚芽，这还是我在六七月份上海解封之后买的。然后遵医嘱吃了颗奥美拉唑肠溶胶囊养养胃。吃完早饭无所事事，瞎翻手机的时候，看到小区群有人在卖体温计，正好我缺个体温计，只有个感觉并不是那么准的额温枪。没时间多想，果断拿下。呐，就是这玩意：</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mvcCwFHFZ9heCSzDiPI8594gPozMjNjaby8Wx4m2UbpAaSuX1wH70q9raTFwTqdjA-7otQ90rDVgzreyKNmSaDM11hL2YD_zA5lhfa52mhS8_bDMeZP6mRQaKo8ZF1ctYcdEj9AAEpfXGZSEzgBYV8QnSqx_bxLykeC9Hq7LhsbsYtkoKQvB8gZ0P8Zzlf54a?width=2268&amp;height=4032&amp;cropmode=none" alt="我也是有体温计的人了"></p><p>中午吃的是素面和金枪鱼罐头。饭后虽然说有了点精神，但还是什么都不想干，那不用说，睡！</p><p>睡到大概四五点的时候，隐约感觉有点冷，以为是下午睡觉没开空调，屋里降温的原因。想到有了体温计，就测一下吧。可这一测吓我一跳，37 度 5，这是又烧上了？但是感觉又不像，嘴里哈气也没有之前发烧那种哈热气的感觉，摸脑门也不觉得热，让父母摸了一下，好像也没啥大差别，只好不管了，再观察一下。</p><p>网上瞎冲浪的时候，看见这么一张图，又想到我晚上睡大床，父母却只能在沙发和帆布床上凑合，瞬间泪如雨下。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mlI63YdtYfe7RKJPG8T-jZ2rEfuEyBJzTsmOSvUjzb2rDn-TwDU4EiW9gNF_nO7F7SvIj2ZupkyTIVvh8SJwQIjtsJ3urXwt_QI6MhDl8BMteOtKEQ26T16OvW09T8z15F3ftc3dbB7wL7skrn4R4lsSgoyJO3lbJ44eqX5F8BouaR_RKyK_p9VK-EZzUPIwG?width=596&amp;height=1024&amp;cropmode=none"></p><p>晚饭吃的小米粥和香菇炒油菜，吃过饭之后感觉头疼的厉害，那正好吃片扑热息痛，又退烧又缓解头痛。有一说一我真的觉得扑热息痛比布洛芬好使欸，见效又快又明显。刚刚 (20:52) 又测了下体温，37 度 1，果然是真的又烧起来了，不过拜扑热息痛所赐，并不觉得很难受，甚至有精神继续更新这篇纪实。</p><p>一边写文，一边喝椰子水，美得很！</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mU0vNu3XcC1lXN_JcvApJrWxp2Xh6IV53PpvpcWOxj-jRUwX3IOdtc_L8LrVLcT2yp-nInmepeAd-LdYdPj8aQ_aeXewTv9qvJ1EKxx09xQApDY8MSSTlJLutuc3TJkS8Mf_LcxqXAANGTvNcT5vw4jdCZ-90A_vXCshXFxHVWi_0iIBtBs-cdhLj0NVWkv7q?width=2268&amp;height=4032&amp;cropmode=none"></p><p>如果说大量喝白开水会感觉不舒服或者恶心的话，确实喝果汁是个不错的选择，写文的功夫，我大概已经连着干下去三分之二盒了。确实比喝白开水舒服。</p><p>说话的功夫，又到了 21:00，烧上电热毯，休息一会，准备睡觉。</p><h2 id="第六天-第八天"><a href="#第六天-第八天" class="headerlink" title="第六天 ~ 第八天"></a>第六天～第八天</h2><p>这三天变化不是很多，想想干脆合起来写好了。</p><p>从第六天开始突然感觉症状明显减轻，第六天仍稍微有一点类似发烧的头晕感，但是第七天往后就几乎没有这种感觉，精力也恢复不少，能专心做事或者动脑了。会想起前几天，“脑雾” 比较严重的一次，是在厕所蹲完坑扯了张纸准备擦，但扯下来纸后我鬼使神差开始擦手，擦了两下感觉有点不对，顿了顿才想起来是要擦屁股……</p><p>虽然说病情是在好转，但是最近这两天的抗原结果我属实没看明白。第六天测的时候是弱阳性，第七天突然强阳，缓冲液刚滴进去，T 那条就红了，然后第八天呢，又变成非常弱的阳性，缓冲液滴进去 15 分钟之后都得仔细盯才能看到及其不明显的一条杠。难道说，病毒也在跟我玩回光返照么？</p><table><thead><tr><th>第六天</th><th>第七天</th><th>第八天</th></tr></thead><tbody><tr><td><img data-src="https://bn02pap001files.storage.live.com/y4m7IztWVFellz1Ya9Ks7gSssT7zlO6stwOnAgj9ryG913-sjpdRQ8ZJFnNZQ2xSMLiazfAHa-_NEurjAA3yVDv4r5D9krDXRZ02t6H-fSFfxOyyD7Nch6JjQEjN_X4jvdARUXBY10ubWndM_u0VW0hQEvHrvCup3AU_hF-5R6A3W7sliVUF__vPb5lOdQO7wKy?width=371&amp;height=660&amp;cropmode=none"></td><td><img data-src="https://bn02pap001files.storage.live.com/y4mYIGOT7g2N4NcFCf2tDmeNE6shFZdC7evo-MoQAoms9Dn5rGB2rWyiW1UXzFPLr3ogMwYLpw8MOmfCCtTgNJOIV4Fv5w8IfUFY3e0606zp5fkp1UUHY_l9KtFIHOJfkpieRGrRJU9LsDcgiWy4u9wJluLWCJjucRuKUXOKzWOYavsbareDegQaCPojL3NI3yM?width=371&amp;height=660&amp;cropmode=none"></td><td><img data-src="https://bn02pap001files.storage.live.com/y4mXdA7L2ny1fjGqETOFcZKI2pXOYC6pTz9O7Pd-Im8tlc0kdNeF7oVoCxqOPb6oeUYfYE4PpwLgQ2Bj8a4uQf4kvjfunqe-lGhmNd6aSoayxcNZINfqyvvvteKGBCR-pYe2n0rNkcIhRAL6M3dkMZjaCI7hvROmzbrtZARHfh8oI63byZ6f8IOIw8J0k5Xx4pe?width=371&amp;height=660&amp;cropmode=none"></td></tr></tbody></table><p>咳嗽倒还是那样，每天还是有十来次咳痰，后面还有一点干咳。看网上的说法，这算是长新冠症状的一种？</p><p>然后就是最恶心的症状 – 嗓子吞刀片，这几天就还是该怎么疼就怎么疼，一天下来可能某个时间段稍微好点，但过一会好像又加重。拿手机给自己的嗓子眼拍了张特写，发现咽部有网状白色，而且扁桃腺也肿的厉害，盲猜是诱发咽炎和扁桃腺炎了。照片…… 我想想还是不贴出来了吧，血盆大口也不是那么好看。</p><h2 id="第九天-第十二天"><a href="#第九天-第十二天" class="headerlink" title="第九天 ~ 第十二天"></a>第九天～第十二天</h2><p>第九天往后开始没啥大变化，依旧是偶尔咳痰，以及嗓子干痛。问了药房大夫，说吃点消炎药控制咽痛就行，正好我有点蒲地兰消炎片，照着说明书就开始吃。第十一天早上醒来，突然就发现嗓子不疼了，我也懒得再看嗓子眼里面是啥样，盲猜咽炎和扁桃肿大都应该是没了。咳痰依旧偶尔有一点，打算等有时间了去医院再做个检查，顺便照个肺部 CT，看看肺子有没有受影响。</p><p>第十一天又测了个抗原，已经完全看不到 T 的那条杠，看来新冠病毒是已经没有了，剩下的症状大概就是所谓的长新冠？</p><p><img data-src="https://bn02pap001files.storage.live.com/y4m1FZzo_p7Gsi-ZzZqjwicWEyrQq-ICE1HX_aQKkPMsNe5L89wUEj9UvSnWWAHjpwmKSN_ipdFFaS-TjV4aObT5MfPb43OY29wnLnu8Hm_yhTDlmkY80JiSMJZmTo9xJvEHsxihns5iysc10_I6C815vwZGAwatP9KWQPwQ0xTmlbZj9z6lYtW0m0xYKoWioXx?width=371&amp;height=660&amp;cropmode=none"></p><p>而且这几天虽然精力恢复了不少，但还是很困，早上不想起，迷迷糊糊能一直睡到中午，吃过午饭就眼皮发沉又想睡觉。</p><h2 id="其他查到的信息"><a href="#其他查到的信息" class="headerlink" title="其他查到的信息"></a>其他查到的信息</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9lLmR4eS5jbi93aXNkb20vZnJvbnQvemhpaHVpaGFvLzEzNzk=">布洛芬和对乙酰氨基酚 你可能不知道的事<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/recoding-my-life/">生活记录</category>
      
      
      <category domain="https://www.boris1993.com/tags/%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E/">新冠肺炎</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%A5%A5%E5%AF%86%E5%85%8B%E6%88%8E/">奥密克戎</category>
      
      <category domain="https://www.boris1993.com/tags/Omicron/">Omicron</category>
      
      
      <comments>https://www.boris1993.com/recording-my-infection-of-corona.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>二手 MicroServer Gen8 折腾记 (1/n) - 初始化服务器</title>
      <link>https://www.boris1993.com/setting-up-microserver-gen8.html</link>
      <guid>https://www.boris1993.com/setting-up-microserver-gen8.html</guid>
      <pubDate>Sun, 18 Dec 2022 19:01:45 GMT</pubDate>
      
      <description>&lt;p&gt;上个月冲动消费，入手了一台 HPE ProLiant MicroServer Gen8。其实我早想搞一台正经的服务器来玩了，因为群晖的魔改 Linux 总是玩的不那么爽。现在心愿实现，开始折腾。&lt;/p&gt;
&lt;p&gt;本篇为&lt;a href=&quot;/tags/%E4%BA%8C%E6%89%8BMicroServer-Gen8%E6%8A%98%E8%85%BE%E8%AE%B0/&quot;&gt;二手 MicroServer Gen8 折腾记&lt;/a&gt;的第一篇，记录拿到服务器之后做的一些初始化的工作。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>上个月冲动消费，入手了一台 HPE ProLiant MicroServer Gen8。其实我早想搞一台正经的服务器来玩了，因为群晖的魔改 Linux 总是玩的不那么爽。现在心愿实现，开始折腾。</p><p>本篇为<a href="/tags/%E4%BA%8C%E6%89%8BMicroServer-Gen8%E6%8A%98%E8%85%BE%E8%AE%B0/">二手 MicroServer Gen8 折腾记</a>的第一篇，记录拿到服务器之后做的一些初始化的工作。</p><span id="more"></span><h2 id="重置iLO"><a href="#重置iLO" class="headerlink" title="重置iLO"></a>重置 iLO</h2><p>到手之后，我发现我把事想简单了，服务器一般只给一个 VGA 口，而这台也不例外，然而，我这里没有一个能接 VGA 口的设备。是的，你没看错。不止显示器没有 VGA 口，连电视也没有。遂果断下单了一个 VGA 到 HDMI 转接器。第二天收到快递，兴冲冲的接上，却发现只能显示 POST 画面，之后无论是正常继续启动，还是进 RBSU（ROM based setup utility），电视上都是无信号。事到如此，接显示器这条路算是堵死了。别问我为什么不买个支持 VGA 的显示器，你自己想想这成本划得来么？</p><p>虽然接显示器不行，但是天无绝人之路啊，地球人都知道，正经服务器上都有一个带外管理系统，Gen 8 也不例外，带有惠普的 iLO（Integrated Lights-out）带外管理模块。iLO 的地址在 POST 界面左下角有显示，</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mqoh9KX_EvO-_zK6RXa5mBvTr2Y4o_qEol3rVfXy6yPZ0FD0_UYVzbEbSiLSngI4dqdPIDpfaZR-n0GDa-Wxnw64D-CPNF5bwi7aIRw8RA5sbnJRLjW3u7fTv3LLp5iILHCw1mM7Y0_CZq77fkpKdVMClUPJqB2nSWL2Uanp3V06q-wSJz57jWtefq0RDRGZj?width=242&amp;height=167&amp;cropmode=none"></p><p>但是这个地址跟我的网络不在一个网段啊？没办法，拎出来一台带网口的笔记本电脑，把电脑跟 iLO 直连，给电脑配置静态 IP 为 <code>10.132.190.34</code>，子网掩码 <code>255.0.0.0</code>，试一试，果然能 ping 通，问题解决。开玩笑，哥们可是网络工程专业的。</p><p>接下来就要重置 iLO，省得因为上任机主的配置引出什么别的麻烦。但是问题又出现了，不知道什么原因，iLO 的网页不是打不开，就是报错 <code>Connection with iLO cannot be established</code>。一顿上网冲浪之后，发现还可以用 SSH 连接，果断掏出 <code>putty</code>，好在上任没改 iLO 的默认管理员密码，不然我就真的抓瞎了。</p><p>登进去之后，反手就是一个 <code>Reset /map1</code> 来重置 iLO 的所有配置，过了一会 iLO 重启完毕，再次 SSH 登录，把 DHCP 打开，这样我就能给 iLO 分配一个我的内网的地址了。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;/&gt;hpiLO-&gt; cd /map1/dhcpendpt1</span><br><span class="line"></span><br><span class="line">status=0</span><br><span class="line">status_tag=COMMAND COMPLETED</span><br><span class="line">Tue Dec 20 15:13:47 2022</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/map1/dhcpendpt1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/map1/dhcpendpt1&gt;hpiLO-&gt; set EnabledState=yes</span><br><span class="line"></span><br><span class="line">status=0</span><br><span class="line">status_tag=COMMAND COMPLETED</span><br><span class="line">Tue Dec 20 15:14:28 2022</span><br><span class="line"></span><br><span class="line">Network settings change applied.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Settings change applied, iLO 4 will now be reset.</span><br><span class="line">Logged Out: It may take several minutes before you can log back in.</span><br><span class="line"></span><br><span class="line">CLI session stopped</span><br></pre></td></tr></tbody></table></figure><p>然后 iLO 会自动重启，过几分钟重启完成之后，就能在路由器里面看到 iLO 分配的地址了。</p><h2 id="更新iLO固件"><a href="#更新iLO固件" class="headerlink" title="更新iLO固件"></a>更新 iLO 固件</h2><p>上面一顿操作重置 iLO 之后，很神奇地，iLO 的 web 端能正常打开了。那么接下来，我就要升级 iLO 固件的版本，因为自带的 iLO 版本太低，反正自己用着玩，用新不用旧。</p><p>到<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmhwZS5jb20vY29ubmVjdC9zL3Byb2R1Y3Q/bGFuZ3VhZ2U9ZW5fVVMma21wbW9pZD0xMDA5MTQzODUzJnRhYj1kcml2ZXJzQW5kU29mdHdhcmUjdD1Ecml2ZXJzYW5kU29mdHdhcmU="> HPE Integrated Lights-Out 4 (iLO 4)<i class="fa fa-external-link-alt"></i></span>这里进入 <code>Online ROM Flash Component for Windows x64 - HPE Integrated Lights-Out 4</code> 下载最新的 iLO 4 固件。目前最新版是 <code>2.81</code>。下载好安装程序之后，打开运行，选择 <code>Extract</code> 把安装包解压缩到一个地方。<code>Install</code> 是不能用的，因为只能在服务器上才能自动安装。解压后可以看到一个叫 <code>ilo4_281.bin</code> 的文件，这个就是 iLO 的固件。</p><p>进入 iLO 控制台的 <code>Administration -&gt; Firmware</code> 页面，<code>File</code> 里面选择 <code>ilo4_281.bin</code> 这个文件。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mEPrwJVtS4chVC9o-Nby06DcHRydHTg18hCaMz9uOQCBbe9WbBRW93RtHOxuhk4SdkIW4QtRZ_ep2rZ_kGrOvdCBm1UrD38ds4JjCu0q1JjZfMnBmfpeobgFiOQyISblL3Lzhv1M5JTF0Rv91wpaUQHUDqZmWaMlIwWWHUaHyBUn1KYVMxOMI1RQJvcFliqWD?width=1038&amp;height=733&amp;cropmode=none"></p><p>然后点 <code>Upload</code>，静等固件上传和更新完成即可。期间不要刷新页面或者关掉页面内的进度条弹窗，地球人都知道，刷机期间手贱就是找事。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mwwKwQJTYXytd8h4bSp_b8urrY_tOzwx9Kj9c_t7O8--V6Fo_XVnc7ol2zhrXTbviY-zAoIHHIs19kY05adB65NjaoN_qmNI7wvyYrEsT2oB0rknZ57UzH0g6Z35WOExe_3DUWp7by0wvQfq88g5dSP-3nVnHI_fkvDu3Knq9EAct5EhfrjNRaZOakzgcQ3O6?width=1038&amp;height=733&amp;cropmode=none"></p><h2 id="修复iLO降级"><a href="#修复iLO降级" class="headerlink" title="修复iLO降级"></a>修复 iLO 降级</h2><p>iLO 重启之后，我看到一条报错说 <code>iLO Self-Test reports a problem with: Embedded Flash/SD-CARD</code>，在网上一顿冲浪之后，说可以尝试在 <code>Diagnostics</code> 页面里 Reset iLO 来修复。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mt11qaL1hUQVWvG3oVu3SX2o8kav-0_PFMkjELRZHWcqmuAF93RLPFwCuIvkvZn2iWikw4LdWevru_kwOaFC9z70siunFN0cMfzTpqkJzz4DrLBW9k9M_b5HSHHpK2Er-z_4yVM6E63uXjH_1MO_NGMm5ijTqqEwDWai8DDC5nNrqRHmu0VWW9My-dXGgDyWF?width=1719&amp;height=538&amp;cropmode=none"></p><p>但是我在 Reset 之后，问题依旧存在，按照网上的说法来看，应该是硬件有问题，要更换板载 Flash 了。</p><p>更新：发现了另一篇博客<span class="exturl" data-url="aHR0cHM6Ly9zeXNhZG1pbmd1aWRlcy5vcmcvMjAxOC8wOC8yNi9maXgtaWxvLWhwLWVycm9yLWVtYmVkZGVkLWZsYXNoLXNkLWNhcmQtZW1iZWRkZWQtbWVkaWEtbWFuYWdlci1mYWlsZWQtaW5pdGlhbGl6YXRpb24v"> [Fix] ILO HP Error – Embedded Flash/SD-CARD: Embedded media manager failed initialization<i class="fa fa-external-link-alt"></i></span>，说强制格式化 NAND 可以修复，我试了下，格式化并重启之后，一开始虽然显示正常，但几分钟后依旧会报同样错误。</p><p>此外根据<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmhwZS5jb20vaHBlc2MvcHVibGljL2RvY0Rpc3BsYXk/ZG9jSWQ9YzA0OTk2MDk3"> HPE 官方的 advisory<i class="fa fa-external-link-alt"></i></span>：</p><blockquote><p>Step 1) Upgrade the iLO 4 firmware to version 2.61<br>Step 2) Perform a NAND format<br>Step 3) Check the iLO status If the iLO status is normal, then skip to Step 6 If the iLO status is still degraded, continue to Step 4<br>Step 4) Schedule downtime; AC power-cycle and repeat the NAND format<br>Step 5) Check the iLO status If the iLO status is normal, continue to<br>Step 6 If the iLO status is still degraded, then skip to Step 7<br>Step 6) Perform these final steps if the system board does not need to be replaced: Reboot the server; reinstall IP; and refresh the server in OneView (if server is managed by OneView)<br>Step 7) If steps 1-4 did not resolve the degraded iLO, replace the system board.</p></blockquote><p>确实走到了 <code>Step 7</code>，只能 <code>replace the system board</code>。╮(╯▽╰)╭</p><h2 id="配置RAID"><a href="#配置RAID" class="headerlink" title="配置RAID"></a>配置 RAID</h2><blockquote><p>这一部分因为不方便复现，故使用<span class="exturl" data-url="aHR0cHM6Ly93d3cuZW9vbC5uZXQvP3A9NjU="> HP MicroServer Gen8 不疼使用教程 - Eddie’s Blog<i class="fa fa-external-link-alt"></i></span>的文章配图用作参考。向 Eddie 表示由衷的感谢！</p></blockquote><p>我在 3 和 4 盘位插了两块 1TB 的固态硬盘，1 和 2 盘位暂时空下来。这么做的原因是，1 和 2 盘位是 SATA-3，3 和 4 盘位是 SATA-2，所以我打算把更快的接口留给日后拓展更大容量的机械硬盘，而固态硬盘本身读写速度就很快，插在一个慢点的接口上也不会造成很大的性能问题。</p><p>插硬盘之前要先关机，因为 Gen 8 的硬盘位是不支持热插拔的。插好硬盘后开机，在 POST 界面出现 <code>HP Dynamic Smart Array B120i</code> 的初始化信息时敲 F5 来进入 RAID 配置页面。这里可以多敲几次来保证成功率，就像进 BIOS 敲 del 那样。如果进入成功，就会看到一个写着 HP 的大球，这时候系统正在加载 RAID 卡的配置界面。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mkcpDtOtKU0DbaC-Tkn1cgrQfqpxWvCNTFl-ITdjeFKlXvlCx7_P7YUnM20OgSmYhqdacjJ3hI5QniuSzFkn6yF8B_y4R3LihrneZYb9UfBg6jpBkqHPdp0JxJERoUVRvNmr4g3GgJIgwFJ4RpJlZtOcuVfPg7Rq4J9BJDSyYMklMqivaONVUZNtjQkQX2tHh?width=750&amp;height=551&amp;cropmode=none"></p><p>进来之后，就可以点 <code>Dynamic Smart Array B120i RAID</code> 页面的 <code>Configure</code> 按钮来配置 RAID 了。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mMomyaUTiIKYGDPS3nEIxiEt6EMVKQ8f0UeGiQ_U9Ad68uONhXjG7eASnLeryXT3hgvED72HABXSIkORtEQXeGp50tDaHnL-FQ9HN_n_QYzpKzKlTXx-twPSG6iLgNWT8ZeuGrRa86Kcsl8OjwUXS_cO55yMUaiTCC1r8f9Ikw57SMvPukfQ33b17fRTtCZFN?width=750&amp;height=412&amp;cropmode=none"></p><h2 id="装ESXi"><a href="#装ESXi" class="headerlink" title="装ESXi"></a>装 ESXi</h2><p>前面洋洋洒洒整了一大堆，但那都是前置任务。到这一步开始主线，装系统。Gen 8 主板上带了一个 TF 卡槽和一个 USB 2.0 接口。起初我打算把 ESXi 装在 TF 卡里面的，但是试了一张之前用过的老卡，安装慢的令人发指，又试了一张几个月前买的卡，结果 ESXi 安装程序发现不了，怀疑是系统没识别。我懒得折腾卡了，遂拿出一个闲置的 U 盘，插在了主板的 USB 口上。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mTFefdMmvB0ewsT0Qe_LkMu0rX_oG4F18mR8ZoCmROtHupCIWpReH__OnotZhnxBCh6z_1V6xfhdN4VViTFd8PPjrWkxL5jpanAvCnWO_DHOhsyKct4smeTxiDriSLPAGUKSm6Fejwn_xuuA2D7dMIv_NeUTQH6RFGpxEXE6qk1m7DWtM3QQZHTkOi-8UHgy1?width=2365&amp;height=1330&amp;cropmode=none"></p><p>至于 ESXi 系统，我选择了惠普定制的版本，毕竟不知道 VMWare 官方版跟定制版差别在哪，还不如直接选厂商定制的版本来的方便。镜像可以到<span class="exturl" data-url="aHR0cHM6Ly9jdXN0b21lcmNvbm5lY3Qudm13YXJlLmNvbS9kb3dubG9hZHMvZGV0YWlscz9kb3dubG9hZEdyb3VwPU9FTS1FU1hJNjVVMi1IUEUmcHJvZHVjdElkPTYxNA==">这里<i class="fa fa-external-link-alt"></i></span>下载，记得要选 <code>Pre-Gen9 Custom Image</code>。下载好 Install CD 之后，进入 iLO 的远程控制台，HTML5 的就行，然后点击标题栏的光盘按钮，选 <code>CD/DVD - Local *.iso file</code>，就可以把 ESXi 的安装盘插进服务器的虚拟光驱。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mekuH7sP_2xy3uapbEPDgUvkBU0iwQIgzetoEiZGg85LzsUdff9pHQia4m2npTMOpBOwFS7y_39SqB77VaeGrh10bqhy3AEgI-GFwybJLxLW5fnRYX1zu_TygXJUsNwEScCF5ZbYavpNo0HiP6nTmrXkADnI_oz3qICNzlLxmAKp-57aFVDuf-9QxiO5-tN0G?width=461&amp;height=198&amp;cropmode=none"></p><p>打开服务器电源之后，就会正常从光盘启动进入 ESXi 的安装程序。安装步骤很简单，这里就不再赘述了，唯一要注意的就是选对安装位置，因为安装程序会把一整块盘当作系统盘，所以我个人建议把它装在 TF 卡或者 U 盘里。也不用担心 TF 卡或者 U 盘会降低系统性能，我这里实测没有什么明显难忍的性能问题。</p><h2 id="换阵列卡驱动，更新系统"><a href="#换阵列卡驱动，更新系统" class="headerlink" title="换阵列卡驱动，更新系统"></a>换阵列卡驱动，更新系统</h2><blockquote><p>这里参考了<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3JlYWQvY3Y4ODU2NTY1">第三篇：虚拟化层 - MicroServer Gen8 + ESXi Server 6.5u3 部署踩坑记 - 天一先生的游牧生活<i class="fa fa-external-link-alt"></i></span>，这里向作者表示感谢！</p></blockquote><p>装好 ESXi 之后，我先装上了 <code>Ubuntu Server 22.10</code> 和 <code>Windows Server 2019 Datacenter</code>。用了一段时间，总感觉有点奇怪，尽管说这是好多年前的机器，性能不强我是有心理准备的，但也不至于点个开始菜单都要好几秒，打开资源管理器也要将近半分钟。今天等待程序载入的时候看了眼任务管理器，发现磁盘占用率竟然 100%，要知道我这是两块固态硬盘组的阵列诶！既然有问题，就上网搜一搜呗，这不冲浪不知道，一冲浪吓一跳，惠普给 <code>ESXi 6.x</code> 打包的 <code>B120i</code> 板载阵列卡驱动有性能问题，会导致磁盘读写异常缓慢。针对这个问题，网上最普遍的一个解决方案就是把阵列卡驱动退回到 <code>ESXi 5.x</code> 中的最后一个版本 <code>5.5.0-88</code>。</p><p>那话不多说，搞它！</p><p>首先，把所有虚拟机关机，全部关机后，在 ESXi 的<code>主机</code>页面里，点击<code>操作</code>菜单中的<code>进入维护模式</code>；在点击<code>操作</code>菜单，进入<code>服务</code>，选择<code>启用 Secure Shell(SSH)</code>，因为后面要 SSH 进 ESXi 里面安装驱动。</p><p>下载 <code>http://downloads.hpe.com/pub/softlib2/software1/pubsw-linux/p1749737361/v98767/hpvsa-5.5.0-88.zip</code>，完成后，解压这个 ZIP 包，得到驱动本体 <code>scsi-hpvsa-5.5.0-88OEM.550.0.0.1331820.x86_64.vib</code>。将这个 <code>vib</code> 文件上传到 ESXi 的 <code>/var/log/vmware</code> 目录下。上传成功后，SSH 进入 ESXi，执行如下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载当前版本的驱动</span></span><br><span class="line">esxcli software vib remove -n scsi-hpvsa -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装5.5.0-88版驱动</span></span><br><span class="line">esxcli software vib install -v file:scsi-hpvsa-5.5.0-88OEM.550.0.0.1331820.x86_64.vib --force --no-sig-check --maintenance-mode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启ESXi</span></span><br><span class="line">reboot</span><br></pre></td></tr></tbody></table></figure><p>重启完了，进 ESXi 看了眼驱动，发现 RAID 也没认出来，驱动也变成 <code>vmw_achi</code> 了，这是没认出来阵列卡驱动啊。搜了一下，发现可以强制禁用 <code>vmw_ahci</code>，于是再进 SSH，执行 <code>esxcli system module set --enabled=false --module=vmw_ahci</code> 这条命令，再重启之后，RAID 回来了，驱动也变成 <code>hpvsa</code> 了。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4m24R_gZu4yEpncp__yKYhEgNSJ6KzPzY7PV5aaUVemr782bhA8hdGSSjs65GTsLGMnKbWY6nFB9lVcjGIT5tsAyHs2x-itYQ-GtLzqdd6Sy5tXbWEeLkN5wtVqmCwBRdDP6vmzS3j2-jlOBzuexlHAECeVLi4RZfRA6frmI97dQcCH4VcgVRoq8iGJoiHV-xZ?width=3106&amp;height=890&amp;cropmode=none"></p><p>如果你在禁用 <code>vmw_ahci</code> 之后还不能成功加载 <code>hpvsa</code> 驱动，那么就得先执行 <code>esxcli software vib remove -n scsi-hpvsa -f</code> 来卸掉它，重启之后再重装。这时候千万不能操作硬盘，否则可能造成数据损毁。</p><p>换驱动的时候了解到，VMWare 也会给 ESXi 推出一些系统修正补丁，那有补丁当然要打啊。一开始我想着参照<span class="exturl" data-url="aHR0cHM6Ly9lc3hpLXBhdGNoZXMudi1mcm9udC5kZS9FU1hpLTYuNS4wLmh0bWw="> ESXi 6.5 - VMware ESXi Patch Tracker<i class="fa fa-external-link-alt"></i></span>这个网站给的命令在线更新，但是一直报 <code>Got no data from process</code> 这个错误，<span class="exturl" data-url="aHR0cHM6Ly9jb21tdW5pdGllcy52bXdhcmUuY29tL3Q1L0VTWGktRGlzY3Vzc2lvbnMvZXN4Y2xpLXNvZnR3YXJlLXByb2ZpbGUtdXBkYXRlLWZhaWxzLXdpdGgtcXVvdC1Hb3Qtbm8tZGF0YS1mcm9tL3RkLXAvMjg0NzQ3OA==">VMWare Communities<i class="fa fa-external-link-alt"></i></span>上面也有人遇到同样的错误，解决方法是下载补丁然后手动安装。</p><blockquote><p>关于 <code>Got no data from process</code> 这个错误，根据<span class="exturl" data-url="aHR0cHM6Ly93d3cubmFraXZvLmNvbS9ibG9nL2hvdy10by11cGdyYWRlLWZyb20tdm13YXJlLXZzcGhlcmUtZXN4aS02LTctdG8tNy0wLw=="> How to Upgrade from VMware vSphere ESXi 6.7 to 7.0<i class="fa fa-external-link-alt"></i></span>中的描述：</p><blockquote><p>If you see the error message:</p><p>Got no data from process: LANG=en_US.UTF-8 /usr/lib/vmware/esxcli-software profile.update  -d “<span class="exturl" data-url="aHR0cHM6Ly9ob3N0dXBkYXRlLnZtd2FyZS5jb20vc29mdHdhcmUvVlVNL1BST0RVQ1RJT04vbWFpbi92bXctZGVwb3QtaW5kZXgueG1s">https://hostupdate.vmware.com/software/VUM/PRODUCTION/main/vmw-depot-index.xml<i class="fa fa-external-link-alt"></i></span>“ -p “ESXi-7.0.0-15843807-standard”,</p><p>check whether there is a persistent scratch partition. There may not be a persistent scratch partition if you’re running ESXi from a USB flash drive. </p></blockquote><p>而根据<span class="exturl" data-url="aHR0cHM6Ly93d3cubmFraXZvLmNvbS9ibG9nL3J1bi1lc3hpLWZyb20tdXNiLWZsYXNoLWRyaXZlLWd1aWRlLw=="> How to Run ESXi from a USB Flash Drive<i class="fa fa-external-link-alt"></i></span>所说：</p><blockquote><p><img data-src="https://bn02pap001files.storage.live.com/y4me6v6s6MFvYY8WNMnHj6TzyWCOUFO8Zim7eLRIrFve0Je43aqNyCZW2bSloFq7uv1mwQ5A-xUvfDAUeUuojDaNDeO5WJpnAoZ0EVprV0SBrFU2YKYeqLDWvdf6JfaI0SYilFTyNIoFHSujvomXFUV5OHaDisddog-16UH396pByk7uFUfst_ob3HS2-Lb7TmB?width=1151&amp;height=106&amp;cropmode=none" alt="Installing ESXi on an 8-GB drive (or bigger)"><br>If ESXi is installed on a USB flash drive or SD card whose size is 8 GB or more, partitions #2 and #3 are not created. The Scratch directory used to store logs is linked to the /tmp/scratch directory that is located on the RAM drive. </p></blockquote><p>也就是说，如果把 ESXi 装在大于等于 8GB 的 TF 卡或者 U 盘里面的话，就会缺少一个 <code>scratch</code> 分区。</p><p>另外根据这个分区图，我还发现，如果把 ESXi 装在硬盘里的话，它会把剩余空间作为数据存储，而不是像网上一些文章说的只用来装系统，这个我后面有时间会再测试一下。</p></blockquote><p>那么，首先到<span class="exturl" data-url="aHR0cHM6Ly9jdXN0b21lcmNvbm5lY3Qudm13YXJlLmNvbS9wYXRjaA=="> Product Patches<i class="fa fa-external-link-alt"></i></span>这里，Product 选 <code>ESXi (Embeeded and Installable)</code>，Version 选 <code>6.5.0</code>（如果你装的不一样，以你为准），点 Search 后会列出一堆补丁，选最新那个，点 Download Now 来下载补丁的 ZIP 包。然后点 <code>View Details</code>，我们要在详细信息页面找到 Image Profile 的名字。</p><p><img data-src="https://bn02pap001files.storage.live.com/y4mV0dd-Yv2SXaLKTzpYUxK2WeQ6Cdy_mcTg4C5zVYERBvswb5OznCxwIaD9km-BiCTCuJokyx9BWW7diupFhx-vNL8_gLogdeMkgEfoaDLNSFqW4hINYzSAfoTbgvIKyhKeEsmasMfjrjCPzx6ez6ZkKcJZ86Hm7Pv89MvR60PciKY0N98orG452TLF2ZquafU?width=3584&amp;height=1800&amp;cropmode=none"></p><blockquote><p>关于什么是 Image Profile：<br>VMWare 文档说：Image profiles define the set of VIBs that an ESXi installation or update process uses.<br>也就是说，Image Profile 定义了包里的哪些 VIB 会被安装。<br>每个补丁包中都会带有 2~4 个 Image Profile，根据<span class="exturl" data-url="aHR0cHM6Ly93d3cudmlydGVuLm5ldC92bXdhcmUvdm13YXJlLWVzeGktaW1hZ2UtcHJvZmlsZXMv"> VMware ESXi Image Profiles<i class="fa fa-external-link-alt"></i></span>的描述，各个 Image Profile 的含义是：</p><ol><li>ESXi-5.5.0-20140704001-standard - 包含全部补丁</li><li> ESXi-5.5.0-20140704001-no-tools - 包含除了 VMware Tools 之外的全部补丁</li><li> ESXi-5.5.0-20140701001s-standard - 只包含安全补丁</li><li> ESXi-5.5.0-20140701001s-no-tools - 只包含安全补丁，同时没有 VMware Tools</li></ol></blockquote><p>因为我要更新所有的 VIB，所以我将要用 <code>ESXi-6.5.0-20221004001-standard</code> 这个 Image Profile。SSH 进 ESXi，执行 <code>esxcli software profile update -p ESXi-6.5.0-20221004001-standard -d /vmfs/volumes/63a1b271-3340b157-711e-d0bf9c4694d8/ESXi650-202210001.zip</code> 开始安装（记得把 <code>-d</code> 参数指定的绝对路径改为你的机器上面的路径）。安装过程比较耗时间，这期间可以 <code>tail -f /var/log/esxupdate.log</code> 来看 ESXi 正在干什么，毕竟看着日志在跑，心里也有底，不然总害怕系统是不是死掉了。</p><p>更新成功后，<code>esxcli</code> 会打出来哪些包被更新了，但是实在是太多，我根本懒得看，直接重启。重启之后，ESXi 能正常进系统，存储和虚拟机都正常载入，说明没出啥毛病。这时候就可以退出维护模式，给虚拟机开机。有一说一，现在不管是开机还是打开什么东西，反应确实快了不少，看来驱动导致的硬盘性能问题已经成功解决。</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p><img data-src="https://sat02pap001files.storage.live.com/y4mtOCRNkLk0OewU_7ZO4p0C14cqVkSYyeKx0aBZc83ylumDBA89xk5xF1rOLl-jpgnhS26yPiqJnA3lezTYEs84Pen-Bc5CPGQayAATLpKUVhFG0-A33Ao36Q_TASLxqG76OyePlD5bx97-1ae6fqvUU3nrYkrZxzGurls69q-Regvp_wcesIKJmJZ4aYqslaf?width=600&amp;height=338&amp;cropmode=none"></p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/%E4%BA%8C%E6%89%8BMicroServer-Gen8%E6%8A%98%E8%85%BE%E8%AE%B0/">二手MicroServer Gen8折腾记</category>
      
      <category domain="https://www.boris1993.com/tags/Gen8/">Gen8</category>
      
      
      <comments>https://www.boris1993.com/setting-up-microserver-gen8.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Servlet 和 Spring MVC 是不是线程安全的</title>
      <link>https://www.boris1993.com/are-servlet-and-spring-mvc-thread-safe.html</link>
      <guid>https://www.boris1993.com/are-servlet-and-spring-mvc-thread-safe.html</guid>
      <pubDate>Wed, 14 Dec 2022 06:01:16 GMT</pubDate>
      
      <description>&lt;p&gt;太长不看：默认情况下 &lt;code&gt;servlet&lt;/code&gt; 不是线程安全的；&lt;code&gt;Spring bean&lt;/code&gt; 是否线程安全取决于这个 bean 的 scope。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>太长不看：默认情况下 <code>servlet</code> 不是线程安全的；<code>Spring bean</code> 是否线程安全取决于这个 bean 的 scope。</p><span id="more"></span><h2 id="Servlet为什么不是线程安全的"><a href="#Servlet为什么不是线程安全的" class="headerlink" title="Servlet为什么不是线程安全的"></a>Servlet 为什么不是线程安全的</h2><p>单个 servlet 实例中的方法会被多个线程同时调用很多次，而 servlet 类中的变量是引用传递，多个线程同时存取某个变量时，就会产生线程安全问题。</p><p>以下方法可以让 servlet 或其中的一部分代码块变成线程安全的：</p><ul><li>使用 <code>syncronized</code> 关键字。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span> <span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        <span class="comment">//pre-processing</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) {</span><br><span class="line">            <span class="comment">//code in this block is thread-safe</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//other processing;</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>使用 <code>SingleThreadModel</code> 类</li></ul><p>如果在 <code>Sun Java System Web Server 7.0</code> 中部署单线程 servlet 时，servlet 引擎会创建一个 servlet 实例池，并保持内存中有多个 servlet 实例的副本。要想调整实例池中的实例数量，可以调整 Web Server 中的 <code>singleThreadedServletPoolSize</code> 属性。这种情况下，服务器的性能可能会降低，如果池中的所有实例全部被占用，那么新到来的请求就必须要在队列中等待某个实例被释放。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> <span class="keyword">implements</span> <span class="title class_">SingleThreadModel</span> {</span><br><span class="line">    <span class="comment">//servlet methods...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Spring-Bean什么时候是线程安全的，什么时候不是"><a href="#Spring-Bean什么时候是线程安全的，什么时候不是" class="headerlink" title="Spring Bean什么时候是线程安全的，什么时候不是"></a>Spring Bean 什么时候是线程安全的，什么时候不是</h2><p>首先，<code>singleton</code> 的 bean 不是线程安全的。在不使用 <code>@Lazy</code> 注解时，框架会在启动时就初始化好 singleton bean。但是框架不会管理开发人员怎么用这些 singleton bean，换言之，开发人员要自己处理线程安全问题。</p><p>而被 <code>@RequestScope</code> 注解标记的 bean 是线程安全的，因为这些 bean 不会在线程之间共享，而是在每次请求到来时都会创建新的实例。</p><p>Session scope 的 bean 也不是线程安全的，因为这些 bean 会与用户的会话绑定，每有一个新用户发来请求，就会创建一个新的 bean。但是，用户发来的请求可能是并行的，所以也有可能产生线程安全问题。</p><p>Prototype bean 是不是线程安全取决于它与哪种 bean 绑定。如果它是被一个 singleton bean 所依赖，因为 singleton bean 不是线程安全的，这个 prototype bean 也将被多个线程访问，所以此时 prototype bean 不是线程安全的；如果它被一个 request scope 的 bean 所依赖，那么这个 prototype bean 就是线程安全的，因为它会随着 request scoped bean 消亡而消亡，同时不会被多个线程共享。</p><p>除此之外，如果一个 bean 是无状态的，那么无论是什么 scope，它都是线程安全的。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vY2QvRTE5MTQ2LTAxLzgxOS0yNjM0L2FieGJoL2luZGV4Lmh0bWw=">Handling Threading Issues<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2RvbHN6ZXdza2kuY29tL3NwcmluZy9zcHJpbmctYmVhbi10aHJlYWQtc2FmZXR5LWd1aWRlLw==">Spring bean thread safety guide<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/">多线程</category>
      
      <category domain="https://www.boris1993.com/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/">线程安全</category>
      
      
      <comments>https://www.boris1993.com/are-servlet-and-spring-mvc-thread-safe.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java 的线程安全，以及死锁</title>
      <link>https://www.boris1993.com/java-thread-security-deadlock.html</link>
      <guid>https://www.boris1993.com/java-thread-security-deadlock.html</guid>
      <pubDate>Wed, 14 Dec 2022 05:24:48 GMT</pubDate>
      
      <description>&lt;p&gt;刚才面试的时候被问到了关于线程安全和死锁的问题，有点露怯，故赶紧查漏补缺，记录于此。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>刚才面试的时候被问到了关于线程安全和死锁的问题，有点露怯，故赶紧查漏补缺，记录于此。</p><span id="more"></span><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><blockquote><p>线程安全是程序设计中的术语，指某个函数、函数库在多线程环境中被调用时，能够正确地处理多个线程之间的公用变量，使程序功能正确完成。</p></blockquote><h2 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h2><ul><li>乐观锁：认为在使用数据时，不会有别的线程修改数据，所以不会加锁，只在更新时判断之前有没有被别的线程更新了数据。比如在数据库中设置一个 <code>version</code> 字段，在更新前先查询该字段的值，然后在写入时比较数据库中的值是否与之前查询到的值相同。</li><li>悲观锁：认为自己在使用数据的时候，一定有别的线程来修改数据，因此在获取数据的时候先加锁，确保数据不会被线程修改。</li></ul><h2 id="如何保证线程安全"><a href="#如何保证线程安全" class="headerlink" title="如何保证线程安全"></a>如何保证线程安全</h2><ul><li><code>syncronized</code> 关键字，举例：<code>ConcurrentHashMap</code>。是悲观锁。<ul><li>锁升级机制：<blockquote><p>它是指在锁对象的对象头里面有一个 <code>threadid</code> 字段，在第一次访问的时候 <code>threadid</code> 为空，JVM 让其持有偏向锁，并将 <code>threadid</code> 设置为其线程 ID，再次进入的时候会先判断 <code>threadid</code> 是否与其线程 ID 一致，如果一致则可以直接使用此对象，如果不一致，则升级偏向锁为轻量级锁，通过自旋循环一定次数来获取锁，执行一定次数之后，如果还没有正常获取到要使用的对象，此时就会把锁从轻量级升级为重量级锁，此过程就构成了 <code>synchronized</code> 锁的升级。</p></blockquote><ul><li>偏向锁（无锁）：大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得。偏向锁的目的是在某个线程获得锁之后（线程的 id 会记录在对象的 <code>Mark Word</code> 中），消除这个线程锁重入（CAS）的开销，看起来让这个线程得到了偏护。</li><li>轻量级锁（CAS）：就是由偏向锁升级来的，偏向锁运行在一个线程进入同步块的情况下，当第二个线程加入锁争用的时候，偏向锁就会升级为轻量级锁；轻量级锁的意图是在没有多线程竞争的情况下，通过 CAS 操作尝试将 <code>Mark Word</code> 更新为指向 <code>LockRecord</code> 的指针，减少了使用重量级锁的系统互斥量产生的性能消耗。</li><li>重量级锁：虚拟机使用 CAS 操作尝试将 <code>MarkWord</code> 更新为指向 <code>LockRecord</code> 的指针，如果更新成功表示线程就拥有该对象的锁；如果失败，会检查 <code>MarkWord</code> 是否指向当前线程的栈帧，如果是，表示当前线程已经拥有这个锁；如果不是，说明这个锁被其他线程抢占，此时膨胀为重量级锁。</li></ul></li></ul></li><li><code>Lock</code> 接口的实现类，常用 <code>ReentrantLock</code>。是悲观锁。<code>lock()</code> 加锁，<code>unlock()</code> 解锁，不解锁会造成死锁。<ul><li>等待可中断：当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情，可中断特性对处理执行时间非常长的同步块很有帮助。</li><li>公平锁：多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；而非公平锁则不保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。<code>synchronized</code> 中的锁是非公平的，<code>ReentrantLock</code> 默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁。</li><li>锁绑定多个条件：一个 <code>ReentrantLock</code> 对象可以同时绑定多个 <code>Condition</code> 对象，而在 <code>synchronized</code> 中，锁对象的 <code>wait()</code> 和 <code>notify()</code> 或 <code>notifyAll()</code> 方法可以实现一个隐含的条件，如果要和多于一个的条件关联的时候，就不得不额外地添加一个锁，而 <code>ReentrantLock</code> 则无须这样做，只需要多次调用 <code>newCondition()</code> 方法即可。</li></ul></li><li><code>ThreadLocal</code>。当多个线程操作同一个变量且互不干扰的场景下，可以使用 <code>ThreadLocal</code> 来解决。它会在每个线程中对该变量创建一个副本，即每个线程内部都会有一个该变量，且在线程内部任何地方都可以使用，线程之间互不影响，这样一来就不存在线程安全问题，也不会严重影响程序执行性能。<ul><li><code>ThreadLocal</code> 线程容器保存变量时，底层其实是通过 <code>ThreadLocalMap</code> 来实现的。它是以当前 <code>ThreadLocal</code> 变量为 key，要存的变量为 value。获取的时候就是以当前 <code>ThreadLocal</code> 变量去找到对应的 key，然后获取到对应的值。</li></ul></li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><blockquote><p>两个或两个以上的线程持有不同系统资源的锁，线程彼此都等待获取对方的锁来完成自己的任务，但是没有让出自己持有的锁，线程就会无休止等待下去。线程竞争的资源可以是：锁、网络连接、通知事件，磁盘、带宽，以及一切可以被称作 “资源” 的东西。</p></blockquote><h2 id="检测死锁"><a href="#检测死锁" class="headerlink" title="检测死锁"></a>检测死锁</h2><p>可以使用 <code>jstack</code> 检查死锁。</p><p>命令：<code>jstack $(jps -l | grep 'DeadLockExample' | cut -f1 -d ' ')</code>。</p><p>示例输出：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Java stack information for the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line">"Thread-1":</span><br><span class="line">    at DeadLockExample$2.run(DeadLockExample.java:58)</span><br><span class="line">    - waiting to lock &lt;0x000000076ab660a0&gt; (a java.lang.Object)</span><br><span class="line">    - locked &lt;0x000000076ab660b0&gt; (a java.lang.Object)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">"Thread-0":</span><br><span class="line">    at DeadLockExample$1.run(DeadLockExample.java:28)</span><br><span class="line">    - waiting to lock &lt;0x000000076ab660b0&gt; (a java.lang.Object)</span><br><span class="line">    - locked &lt;0x000000076ab660a0&gt; (a java.lang.Object)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br></pre></td></tr></tbody></table></figure><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><ul><li>以确定的顺序获锁</li><li>超时放弃</li><li>死锁检测</li><li>尽量降低锁的使用粒度</li><li>尽量使用同步代码块，而不是同步方法</li><li>避免嵌套锁</li><li>专锁专用</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzODMyMDY3MA==">4 种解决线程安全问题的方式<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly96aWhlbmdjYXQuZ2l0aHViLmlvLzIwMTkvMDgvMDkvamF2YS10dXRvcmlhbC1mb3ItbGFuZ3VhZ2UtYWRhdmFuY2VkLWRlYWRsb2NrLWV4YW1wbGUtYW5kLXNvbHV0aW9uLw==">Java 高级教程系列 - 死锁示例及解决<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjI5NjY5L2FydGljbGUvZGV0YWlscy8xMDg1NTIzMzE=">Java 多线程开发中避免死锁的八种方法<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/">多线程</category>
      
      <category domain="https://www.boris1993.com/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/">线程安全</category>
      
      <category domain="https://www.boris1993.com/tags/%E6%AD%BB%E9%94%81/">死锁</category>
      
      
      <comments>https://www.boris1993.com/java-thread-security-deadlock.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Filter 与 interceptor 的区别</title>
      <link>https://www.boris1993.com/filter-vs-interceptor.html</link>
      <guid>https://www.boris1993.com/filter-vs-interceptor.html</guid>
      <pubDate>Tue, 13 Dec 2022 07:36:21 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Filter&quot;&gt;&lt;a href=&quot;#Filter&quot; class=&quot;headerlink&quot; title=&quot;Filter&quot;&gt;&lt;/a&gt;Filter&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 是 &lt;code&gt;Servlet&lt;/code&gt; 规范制定的，受 &lt;code&gt;Servlet&lt;/code&gt; 容器支持，接口定义在 &lt;code&gt;javax.servlet&lt;/code&gt; 包中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 是被 Web Server（如 &lt;code&gt;Tomcat&lt;/code&gt;）调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 需要在 &lt;code&gt;web.xml&lt;/code&gt; 中定义之后才会起作用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 只在请求的前后起作用，&lt;code&gt;Servlet&lt;/code&gt; 对于 &lt;code&gt;Filter&lt;/code&gt; 来说是一个黑盒。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filter&lt;/code&gt; 的执行顺序是：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void init(FilterConfig)&lt;/code&gt; - 容器在初始化 &lt;code&gt;Filter&lt;/code&gt; 时调用，在 &lt;code&gt;Filter&lt;/code&gt; 生命周期内仅会被调用一次。方法可以抛出 &lt;code&gt;ServletException&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;doFilter(ServletRequest, ServletResponse, FilterChain)&lt;/code&gt; - Web 容器每一次请求都会调用该方法。该方法将容器的请求和响应作为参数传递进来， &lt;code&gt;FilterChain&lt;/code&gt; 用来调用下一个 &lt;code&gt;Filter&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void destroy()&lt;/code&gt; - 当容器销毁 Filter 实例时调用该方法，可以在方法中销毁资源，该方法在 Filter 的生命周期只会被调用一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Interceptor&quot;&gt;&lt;a href=&quot;#Interceptor&quot; class=&quot;headerlink&quot; title=&quot;Interceptor&quot;&gt;&lt;/a&gt;Interceptor&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Interceptor&lt;/code&gt; 是 &lt;code&gt;Spring&lt;/code&gt; 容器内的，由 &lt;code&gt;Spring&lt;/code&gt; 框架提供支持。接口 &lt;code&gt;HandlerInterceptor&lt;/code&gt; 定义在 &lt;code&gt;org.springframework.web.servlet&lt;/code&gt; 包中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interceptor&lt;/code&gt; 是被 &lt;code&gt;Spring&lt;/code&gt; 调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interceptor&lt;/code&gt; 可以深入到方法前后、异常抛出前后等，比起 &lt;code&gt;Filter&lt;/code&gt; 有更大的弹性。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interceptor&lt;/code&gt; 还允许用户介入请求的生命周期，可以在请求过程中获取信息，通常与请求更加耦合。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interceptor&lt;/code&gt; 的执行顺序是：&lt;ul&gt;
&lt;li&gt;请求到达 &lt;code&gt;DispatcherServlet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DispatcherServlet&lt;/code&gt; 将请求发送至 &lt;code&gt;Interceptor&lt;/code&gt;，&lt;code&gt;Interceptor&lt;/code&gt; 执行 &lt;code&gt;preHandle()&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;请求到达 &lt;code&gt;Controller&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;请求结束后，&lt;code&gt;Interceptor&lt;/code&gt; 执行 &lt;code&gt;postHandle()&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><ul><li><code>Filter</code> 是 <code>Servlet</code> 规范制定的，受 <code>Servlet</code> 容器支持，接口定义在 <code>javax.servlet</code> 包中。</li><li><code>Filter</code> 是被 Web Server（如 <code>Tomcat</code>）调用。</li><li><code>Filter</code> 需要在 <code>web.xml</code> 中定义之后才会起作用。</li><li><code>Filter</code> 只在请求的前后起作用，<code>Servlet</code> 对于 <code>Filter</code> 来说是一个黑盒。</li><li><code>Filter</code> 的执行顺序是：<ul><li><code>void init(FilterConfig)</code> - 容器在初始化 <code>Filter</code> 时调用，在 <code>Filter</code> 生命周期内仅会被调用一次。方法可以抛出 <code>ServletException</code>。</li><li><code>doFilter(ServletRequest, ServletResponse, FilterChain)</code> - Web 容器每一次请求都会调用该方法。该方法将容器的请求和响应作为参数传递进来， <code>FilterChain</code> 用来调用下一个 <code>Filter</code>。</li><li><code>void destroy()</code> - 当容器销毁 Filter 实例时调用该方法，可以在方法中销毁资源，该方法在 Filter 的生命周期只会被调用一次。</li></ul></li></ul><h2 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h2><ul><li><code>Interceptor</code> 是 <code>Spring</code> 容器内的，由 <code>Spring</code> 框架提供支持。接口 <code>HandlerInterceptor</code> 定义在 <code>org.springframework.web.servlet</code> 包中。</li><li><code>Interceptor</code> 是被 <code>Spring</code> 调用。</li><li><code>Interceptor</code> 可以深入到方法前后、异常抛出前后等，比起 <code>Filter</code> 有更大的弹性。</li><li><code>Interceptor</code> 还允许用户介入请求的生命周期，可以在请求过程中获取信息，通常与请求更加耦合。</li><li><code>Interceptor</code> 的执行顺序是：<ul><li>请求到达 <code>DispatcherServlet</code></li><li><code>DispatcherServlet</code> 将请求发送至 <code>Interceptor</code>，<code>Interceptor</code> 执行 <code>preHandle()</code> 方法</li><li>请求到达 <code>Controller</code></li><li>请求结束后，<code>Interceptor</code> 执行 <code>postHandle()</code> 方法</li></ul></li></ul><span id="more"></span><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9laW52ZXJuZS5naXRodWIuaW8vcG9zdC8yMDE3LzA4L3NwcmluZy1pbnRlcmNlcHRvci12cy1maWx0ZXIuaHRtbA==">Spring Interceptor vs Filter 拦截器和过滤器区别<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODI4OTcwNTUzMzU4">Spring Interceptor vs Filter - 掘金<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9lY2xpcHNlLWVlNGouZ2l0aHViLmlvL2plcnNleS5naXRodWIuaW8vZG9jdW1lbnRhdGlvbi9sYXRlc3QvZmlsdGVycy1hbmQtaW50ZXJjZXB0b3JzLmh0bWw=">Chapter 10. Filters and Interceptors - Jersey 2.37 User Guide<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/learning/">学知识</category>
      
      
      <category domain="https://www.boris1993.com/tags/Java/">Java</category>
      
      <category domain="https://www.boris1993.com/tags/Servlet/">Servlet</category>
      
      <category domain="https://www.boris1993.com/tags/Spring-MVC/">Spring MVC</category>
      
      <category domain="https://www.boris1993.com/tags/Filter/">Filter</category>
      
      <category domain="https://www.boris1993.com/tags/Interceptor/">Interceptor</category>
      
      
      <comments>https://www.boris1993.com/filter-vs-interceptor.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用 Tailscale 部署虚拟局域网</title>
      <link>https://www.boris1993.com/setting-up-tailscale.html</link>
      <guid>https://www.boris1993.com/setting-up-tailscale.html</guid>
      <pubDate>Mon, 24 Oct 2022 02:16:39 GMT</pubDate>
      
      <description>&lt;p&gt;最近折腾了下用 Tailscale 搭建虚拟局域网，在这里记录一下折腾的过程和一些心得。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>最近折腾了下用 Tailscale 搭建虚拟局域网，在这里记录一下折腾的过程和一些心得。</p><span id="more"></span><h2 id="什么是Tailscale"><a href="#什么是Tailscale" class="headerlink" title="什么是Tailscale"></a>什么是 Tailscale</h2><p>说起 Tailscale，就不得不提到最近很火的 Mesh VPN 这个概念。</p><p>经典的 VPN 是作为一个网关，让外网用户通过它来访问内网。比如传统的 L2TP VPN：</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mxJygAC6Sf_ZWFDW3UiiiskgVx8HPV3QiysgnQssDo1l1_XTHo2BtHl_RKywA_UXTQ0GIFQBfovfRfXxkB1goh5G_cFGOA_rCNT4IcuzOquY_W-YgXGg_HIr5YHiK9y8E-BtowMJX6nYI64PnziVU7NQJMHvbCNb6VM2T1l_lLazjTnUYsM0rKXmyBj1t8B02?width=6794&amp;height=4674&amp;cropmode=none"></p><p>但是 Mesh VPN 提出了一种全新的拓扑结构，这种结构中每个节点之间都相互连接，不再存在中心的 VPN 服务器。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mn-qliUcavLgr7DxNbuFPvtqBbJX7b69vg4pWQZABjx2BobJrAaeHnqaB1KgQh2U6Ao7cdlAc6PPXiccAS6nXt4JesKlRsiwDm_Lsh8-8esUD-wJ0P-31TyEuyyK7pXApOwBSRIm4AMPUrLz0GAJE5F9tGaeST3qgP2C-H1QBsiYprq2ngXsocdFsPsXY6zjK?width=722&amp;height=574&amp;cropmode=none"></p><p>上图提到的 <code>Wireguard</code> 就是一个 Mesh VPN 的实现，但是 <code>Wireguard</code> 配置比较繁琐，维护成本也比较高，所以 <code>Tailscale</code> 在基于 <code>Wireguard</code> 的基础上做了一些优化，比如用于 NAT 穿透的 <code>DERP</code> 协议、建立了公网 coordinator 服务器用于下发配置，以及集成了第三方 SSO 用于认证和权限管理。</p><h2 id="如何安装和使用Tailscale"><a href="#如何安装和使用Tailscale" class="headerlink" title="如何安装和使用Tailscale"></a>如何安装和使用 Tailscale</h2><p>安装 Tailscale 很简单（除了国内群晖），跟着官网的<span class="exturl" data-url="aHR0cHM6Ly90YWlsc2NhbGUuY29tL2tiLzEwMTcvaW5zdGFsbC8="> Quickstart<i class="fa fa-external-link-alt"></i></span>走就行了。简单来说就是先在官网注册账号，然后在电脑上安装 Tailscale 并使用相同账号登陆，然后这些机器就处于同一个虚拟局域网上了。</p><p>登陆的时候注意，千万不要用 GitHub 或者 Google 认证，原因我不用说，你懂的。就算电脑上你有办法，手机上也会很闹心。</p><p>在机器成功加入 Tailscale 虚拟局域网后，就可以在 Tailscale 控制面板里面看到这些机器的 IP 地址了。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mDsMbIzsWb7WKzxkchzQLwbYWG8xi3VMfczRAZxw5h9NuVJ6b2mz-HQoM_oZxaEmkLpvHBkw9yggccgQgb52LfIoIn6k5XcyALA37xWoduHO_FwPoTqyAFJ31IEAADm5jMSj7vmFjc0ngh6_-01nx-rRH6FXhBrAeMqXa3YJppU57qcs5J2aB-1JHiShWm74k?width=2880&amp;height=1380&amp;cropmode=none"></p><p>这时候，就可以直接使用这些 IP 地址访问到对应的机器了。</p><h3 id="国内群晖安装Tailscale"><a href="#国内群晖安装Tailscale" class="headerlink" title="国内群晖安装Tailscale"></a>国内群晖安装 Tailscale</h3><p>因为国内群晖的套件商店下架了所有 VPN 相关的套件，所以只能到官网的<span class="exturl" data-url="aHR0cHM6Ly9wa2dzLnRhaWxzY2FsZS5jb20vc3RhYmxlLyNzcGtz"> Tailscale Packages - stable track<i class="fa fa-external-link-alt"></i></span>手动下载对应 DSM 版本的 spk，然后到套件中心手动安装。安装成功后就可以在主菜单中看到 Tailscale 的图标，点击启动并在新页面中使用相同账号登陆，然后就能用了。</p><h2 id="Tailnet和Magic-DNS"><a href="#Tailnet和Magic-DNS" class="headerlink" title="Tailnet和Magic DNS"></a>Tailnet 和 Magic DNS</h2><p>当然 Tailscale 并不仅支持通过 IP 地址访问机器，还可以通过域名访问。这里请放心，Tailnet 的域名解析是通过你本机的 Tailnet 客户端解析的。</p><p>要启用这个功能，首先你需要选择一个 Tailnet 域名。Tailscale 会给你一系列域名让你选，选好之后就会在控制面板的 DNS 页面出现。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4muIwoFgIgoYzIi8VyX1n_y-0n2Jm7JT3Sr_bPU_Km8-RAcJf6YGCnkyh9P8OSgxMEOEoTERVWZUh7nZJhgMBNsg9DWCjTr8o6s_81J7OZzb6X1YkQMhq88oqJZ5BCGOcqhRJWuevar6MIBQvPO8hA7ZS06AwJ1W9Sx5qmC8p2OfGJhjiYq2XDOgs5nOk_6y1v?width=1294&amp;height=456&amp;cropmode=none"></p><p>然后，在 <code>Magic DNS</code> 栏目下面点 <code>Enable Magic DNS</code> 就可以了。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4m_Ae_E3bg9Wo3Sh_b1HC-nzLtWeyDQEAdMIndc0yRc0qdvvLxN3zHZzz7MyFqECdg0q10qZ5SkfV8DDntimVjjYVs07TJEt-a39cD7jqn--8sWrLBrYQoSnnSslRrznSegrjjMLnDBYlruYeOzH4UdLgEAdKKtcLYToVL5NrIlvSeKovm7kfBovubvh6jBHPk?width=1394&amp;height=303&amp;cropmode=none"></p><p>在这之后，就可以直接用控制面板中的设备名，或者<code>设备名.Tailnet域名</code>的方式访问你的设备了。比如我要 SSH 到 <code>ds218plus</code> 这台机器上，我就可以 <code>ssh ds218plus</code> 或 <code>ssh ds218plus.tailnet-a8cf.ts.net</code>。</p><h2 id="访问内网机器很慢"><a href="#访问内网机器很慢" class="headerlink" title="访问内网机器很慢"></a>访问内网机器很慢</h2><p>在我试用了几天之后，我发现了一个问题，如果节点双方都有 IPv6 的话，互联速度很快，但是如果节点一方没有 IPv6 的话，速度就出奇的慢。遂用 <code>tailscale status</code> 命令看了下连接情况，不出意外，看到了这样的返回：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tailscale status</span><br><span class="line">100.98.89.5     macbook-pro          boris1993@   macOS   -</span><br><span class="line">100.88.234.12   boris-iphone         boris1993@   iOS     offline</span><br><span class="line">100.105.198.123 ds218plus            boris1993@   linux   active; relay "sfo", tx 1778904 rx 63968652</span><br></pre></td></tr></tbody></table></figure><p>划重点，<code>relay "sfo"</code>，这说明我连接到 <code>ds218plus</code> 的通信，是经过位于旧金山的 <code>DERP</code> 服务器中转的，所以会慢。</p><p>虽然在<span class="exturl" data-url="aHR0cHM6Ly90YWlsc2NhbGUuY29tL2tiLzEwODIvZmlyZXdhbGwtcG9ydHMv"> What firewall ports should I open to use Tailscale?<i class="fa fa-external-link-alt"></i></span>里面说，</p><blockquote><p>Nearly all of the time, you don’t need to open any firewall ports for Tailscale. Tailscale uses various NAT traversal techniques to safely connect to other Tailscale nodes without manual intervention—it “just works.”</p></blockquote><p>也没错，它确实 work，但是我真的没法说它 work 的 well。好在，文章下面提到，除了 <code>443/tcp</code> 之外，Tailscale 还用到 <code>41641/udp</code> 来让 Wireguard 节点互联，以及 <code>3478/udp</code> 用于 STUN 协议。</p><p>在我的这个使用场景中，<code>ds218plus</code> 作为服务器，那么我就在 <code>ds218plus</code> 所在的网络中做了两件事，给 <code>41641/udp</code> 配置端口转发，并在防火墙上放行这个端口。然后我在作为客户端的 <code>macbook-pro</code> 上执行 <code>tailscale down</code> 和 <code>tailscale up</code> 来重启 Tailscale 连接。这时候再用 <code>tailscale status</code> 命令检查连接情况，发现输出变成了这样：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tailscale status</span><br><span class="line">100.98.89.5     macbook-pro          boris1993@   macOS   -</span><br><span class="line">100.88.234.12   boris-iphone         boris1993@   iOS     offline</span><br><span class="line">100.105.198.123 ds218plus            boris1993@   linux   active; direct 121.70.200.131:41641, tx 5884 rx 8500</span><br></pre></td></tr></tbody></table></figure><p>接着划重点，<code>direct</code>，说明现在节点之间已经是直连了，随便做点什么测试一下，果然快了很多。</p><p>不过端口转发只是权宜之计，毕竟没法同时让 <code>41641/udp</code> 转发给多个机器，只能解决一台机器不能直连的问题。要想彻底解决，还是得用 IPv6。</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/Tailscale/">Tailscale</category>
      
      <category domain="https://www.boris1993.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/">内网穿透</category>
      
      <category domain="https://www.boris1993.com/tags/VPN/">VPN</category>
      
      <category domain="https://www.boris1993.com/tags/Virtual-LAN/">Virtual LAN</category>
      
      <category domain="https://www.boris1993.com/tags/%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/">虚拟局域网</category>
      
      
      <comments>https://www.boris1993.com/setting-up-tailscale.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>记一次抢救被 force push 的 GitHub 仓库</title>
      <link>https://www.boris1993.com/rescuing-my-github-repo-from-force-push.html</link>
      <guid>https://www.boris1993.com/rescuing-my-github-repo-from-force-push.html</guid>
      <pubDate>Mon, 17 Oct 2022 06:06:33 GMT</pubDate>
      
      <description>&lt;p&gt;就在刚刚，我一个误操作，在没有本地备份的前提下，force push 了一个 GitHub 上的仓库。万幸最后恢复成功，数据拿回来了。惊魂未定之余，在此记录我的抢救过程以供参考。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>就在刚刚，我一个误操作，在没有本地备份的前提下，force push 了一个 GitHub 上的仓库。万幸最后恢复成功，数据拿回来了。惊魂未定之余，在此记录我的抢救过程以供参考。</p><span id="more"></span><h2 id="前景提要"><a href="#前景提要" class="headerlink" title="前景提要"></a>前景提要</h2><p>在闲逛 GitHub 的时候，发现了一个叫<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BsYXRhbmUvc25r"> snk<i class="fa fa-external-link-alt"></i></span>的项目，可以在我的 profile readme 里面放个贪吃蛇，遂照着它的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BsYXRhbmUvUGxhdGFuZS9ibG9iL21hc3Rlci8uZ2l0aHViL3dvcmtmbG93cy9tYWluLnltbA=="> example with cron job<i class="fa fa-external-link-alt"></i></span>抄了一个 workflow 过来。但是这里我自作聪明地想着把东西全放在 <code>master</code> 上，就把 38 行的 <code>target_branch</code> 改成了 <code>master</code>。结果一运行吓一跳，我的 <code>README.md</code> 没了，仓库只剩下 <code>snk</code> 生成的 svg 文件。这不行啊，我花了好久的时间才整出来的东西，不能说没就没啊！于是赶紧开始网上冲浪，看怎么抢救被 force push 的 repo。</p><h2 id="恢复过程"><a href="#恢复过程" class="headerlink" title="恢复过程"></a>恢复过程</h2><p>首先我要大力感谢<span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vYWdhcndhbHBhcmFzL2QzNTVhOTUwMTQ4NzAyY2M3YmE4MmFiYzRkMTk0M2Jm">这个 Gist<i class="fa fa-external-link-alt"></i></span>，我就是参考这里的做法成功恢复了这个 repo 的。</p><h3 id="找到上一次commit的记录"><a href="#找到上一次commit的记录" class="headerlink" title="找到上一次commit的记录"></a>找到上一次 commit 的记录</h3><p>首先，要通过 <code>https://api.github.com/repos/:owner/:repo/events</code> 这个 API 找到上次提交的 sha。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">-&gt; % curl -u boris1993 https://api.github.com/repos/boris1993/boris1993/events</span><br><span class="line">Enter host password <span class="keyword">for</span> user <span class="string">'boris1993'</span>:</span><br><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"24633558565"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"PushEvent"</span>,</span><br><span class="line">    <span class="string">"actor"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 4367313,</span><br><span class="line">      <span class="string">"login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"display_login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"gravatar_id"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/users/boris1993"</span>,</span><br><span class="line">      <span class="string">"avatar_url"</span>: <span class="string">"https://avatars.githubusercontent.com/u/4367313?"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"repo"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 297097347,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"boris1993/boris1993"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"payload"</span>: {</span><br><span class="line">      <span class="string">"push_id"</span>: 11349267173,</span><br><span class="line">      <span class="string">"size"</span>: 1,</span><br><span class="line">      <span class="string">"distinct_size"</span>: 1,</span><br><span class="line">      <span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br><span class="line">      <span class="string">"head"</span>: <span class="string">"98364ce80ec5bbcdb6dc6f8d2239de2256ede487"</span>,</span><br><span class="line">      <span class="string">"before"</span>: <span class="string">"32276fc643c6b34fee48f46363cfb6a44327cbe4"</span>,</span><br><span class="line">      <span class="string">"commits"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"sha"</span>: <span class="string">"98364ce80ec5bbcdb6dc6f8d2239de2256ede487"</span>,</span><br><span class="line">          <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"41898282+github-actions[bot]@users.noreply.github.com"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"github-actions[bot]"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"message"</span>: <span class="string">"Deploy to GitHub pages"</span>,</span><br><span class="line">          <span class="string">"distinct"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993/commits/98364ce80ec5bbcdb6dc6f8d2239de2256ede487"</span></span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"public"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"created_at"</span>: <span class="string">"2022-10-17T05:44:11Z"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"24633554175"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"PushEvent"</span>,</span><br><span class="line">    <span class="string">"actor"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 4367313,</span><br><span class="line">      <span class="string">"login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"display_login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"gravatar_id"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/users/boris1993"</span>,</span><br><span class="line">      <span class="string">"avatar_url"</span>: <span class="string">"https://avatars.githubusercontent.com/u/4367313?"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"repo"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 297097347,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"boris1993/boris1993"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"payload"</span>: {</span><br><span class="line">      <span class="string">"push_id"</span>: 11349264873,</span><br><span class="line">      <span class="string">"size"</span>: 1,</span><br><span class="line">      <span class="string">"distinct_size"</span>: 1,</span><br><span class="line">      <span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br><span class="line">      <span class="string">"head"</span>: <span class="string">"32276fc643c6b34fee48f46363cfb6a44327cbe4"</span>,</span><br><span class="line">      <span class="string">"before"</span>: <span class="string">"b0ab0263c0693122ae8069c95526e13b7336483f"</span>,</span><br><span class="line">      <span class="string">"commits"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"sha"</span>: <span class="string">"32276fc643c6b34fee48f46363cfb6a44327cbe4"</span>,</span><br><span class="line">          <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"boris1993@live.cn"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Boris Zhao"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"message"</span>: <span class="string">"Create generate_snake_animation.yml"</span>,</span><br><span class="line">          <span class="string">"distinct"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993/commits/32276fc643c6b34fee48f46363cfb6a44327cbe4"</span></span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"public"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"created_at"</span>: <span class="string">"2022-10-17T05:43:50Z"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"23024411036"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"PushEvent"</span>,</span><br><span class="line">    <span class="string">"actor"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 4367313,</span><br><span class="line">      <span class="string">"login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"display_login"</span>: <span class="string">"boris1993"</span>,</span><br><span class="line">      <span class="string">"gravatar_id"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/users/boris1993"</span>,</span><br><span class="line">      <span class="string">"avatar_url"</span>: <span class="string">"https://avatars.githubusercontent.com/u/4367313?"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"repo"</span>: {</span><br><span class="line">      <span class="string">"id"</span>: 297097347,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"boris1993/boris1993"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"payload"</span>: {</span><br><span class="line">      <span class="string">"push_id"</span>: 10514884570,</span><br><span class="line">      <span class="string">"size"</span>: 1,</span><br><span class="line">      <span class="string">"distinct_size"</span>: 1,</span><br><span class="line">      <span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br><span class="line">      <span class="string">"head"</span>: <span class="string">"b0ab0263c0693122ae8069c95526e13b7336483f"</span>,</span><br><span class="line">      <span class="string">"before"</span>: <span class="string">"660e4d3896eb523d703464f89112a2eea07ee309"</span>,</span><br><span class="line">      <span class="string">"commits"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"sha"</span>: <span class="string">"b0ab0263c0693122ae8069c95526e13b7336483f"</span>,</span><br><span class="line">          <span class="string">"author"</span>: {</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"boris1993@live.cn"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Boris Zhao"</span></span><br><span class="line">          },</span><br><span class="line">          <span class="string">"message"</span>: <span class="string">"Update README.md"</span>,</span><br><span class="line">          <span class="string">"distinct"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">"url"</span>: <span class="string">"https://api.github.com/repos/boris1993/boris1993/commits/b0ab0263c0693122ae8069c95526e13b7336483f"</span></span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">    <span class="string">"public"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"created_at"</span>: <span class="string">"2022-07-22T08:05:06Z"</span></span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>从接口的返回可以看到，截至现在一共有三次 push，仓库被覆盖就是发生在最上面的一次 push 中，而接下来的一个就是我添加 workflow 的那一次 push。</p><h3 id="从上一次的push记录中找回数据"><a href="#从上一次的push记录中找回数据" class="headerlink" title="从上一次的push记录中找回数据"></a>从上一次的 push 记录中找回数据</h3><p>找到 push 记录，那么就好办了。点击添加 workflow 那次 push 中的 <code>url</code>，在浏览器中会打开一个新页面，返回的 JSON 中是这次 push 的详细信息。这里我们要找的是 <code>html_url</code> 这个字段。点开这个字段里面的链接，会进入 GitHub 里面，看到这次 commit 的 diff。然后点击 <code>Browse files</code> 按钮，就能看到当时的文件了。这时候还等什么？赶紧下载啊！文件少的话复制内容回来就行，文件多的话，点开 <code>Code</code> 按钮，<code>Download ZIP</code> 就好啦。</p><p><img data-src="https://sat02pap001files.storage.live.com/y4mUHGqsZS-DOY7n369khEGH2agbXnq0bx3w6Oz2YoZHweZ9ptM3bMWltDg7MfPv3Vrip1E2M2YfZjdRhuhO5ESrz7pr94z2QXUrFwC7utxDki_4axu4pdUSv-RxroJJ_pUxjZ3nfa4yTFw5g0jHoJTX87TiqAp6eceM7qOLZ6O2UIJ89mEWLFs7lkcQHaykotn?width=1704&amp;height=412&amp;cropmode=none" alt="Files at that commit"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>一定要做备份啊！</p>]]></content:encoded>
      
      
      <category domain="https://www.boris1993.com/categories/playing/">瞎折腾</category>
      
      
      <category domain="https://www.boris1993.com/tags/GitHub/">GitHub</category>
      
      <category domain="https://www.boris1993.com/tags/git/">git</category>
      
      <category domain="https://www.boris1993.com/tags/force-push/">force push</category>
      
      <category domain="https://www.boris1993.com/tags/%E6%81%A2%E5%A4%8DGitHub%E4%BB%93%E5%BA%93/">恢复GitHub仓库</category>
      
      
      <comments>https://www.boris1993.com/rescuing-my-github-repo-from-force-push.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
